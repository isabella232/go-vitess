//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	tableColumns      *TableColumns
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	columnDefinitions []*ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const PRIMARY = 57444
const SHOW = 57445
const DESCRIBE = 57446
const EXPLAIN = 57447
const DATE = 57448
const ESCAPE = 57449
const REPAIR = 57450
const OPTIMIZE = 57451
const TRUNCATE = 57452
const BIT = 57453
const TINYINT = 57454
const SMALLINT = 57455
const MEDIUMINT = 57456
const INT = 57457
const INTEGER = 57458
const BIGINT = 57459
const INTNUM = 57460
const REAL = 57461
const DOUBLE = 57462
const FLOAT_TYPE = 57463
const DECIMAL = 57464
const NUMERIC = 57465
const TIME = 57466
const TIMESTAMP = 57467
const DATETIME = 57468
const YEAR = 57469
const CHAR = 57470
const VARCHAR = 57471
const BOOL = 57472
const CHARACTER = 57473
const VARBINARY = 57474
const NCHAR = 57475
const TEXT = 57476
const TINYTEXT = 57477
const MEDIUMTEXT = 57478
const LONGTEXT = 57479
const BLOB = 57480
const TINYBLOB = 57481
const MEDIUMBLOB = 57482
const LONGBLOB = 57483
const JSON = 57484
const NULLX = 57485
const AUTO_INCREMENT = 57486
const APPROXNUM = 57487
const SIGNED = 57488
const UNSIGNED = 57489
const ZEROFILL = 57490
const DATABASES = 57491
const TABLES = 57492
const VITESS_KEYSPACES = 57493
const VITESS_SHARDS = 57494
const VSCHEMA_TABLES = 57495
const CURRENT_TIMESTAMP = 57496
const DATABASE = 57497
const CURRENT_DATE = 57498
const CURRENT_TIME = 57499
const LOCALTIME = 57500
const LOCALTIMESTAMP = 57501
const UTC_DATE = 57502
const UTC_TIME = 57503
const UTC_TIMESTAMP = 57504
const REPLACE = 57505
const CONVERT = 57506
const CAST = 57507
const GROUP_CONCAT = 57508
const SEPARATOR = 57509
const MATCH = 57510
const AGAINST = 57511
const BOOLEAN = 57512
const LANGUAGE = 57513
const WITH = 57514
const QUERY = 57515
const EXPANSION = 57516
const UNUSED = 57517

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 219,
	103, 416,
	-2, 412,
	-1, 220,
	103, 417,
	-2, 413,
	-1, 443,
	5, 21,
	-2, 367,
	-1, 479,
	103, 419,
	-2, 415,
	-1, 587,
	5, 22,
	-2, 246,
	-1, 654,
	5, 22,
	-2, 368,
	-1, 740,
	5, 21,
	-2, 370,
	-1, 841,
	5, 22,
	-2, 371,
}

const yyPrivate = 57344

const yyLast = 4402

var yyAct = [...]int{

	220, 402, 575, 343, 823, 596, 576, 214, 779, 248,
	243, 322, 3, 270, 767, 745, 717, 624, 532, 539,
	616, 341, 542, 775, 59, 188, 478, 509, 556, 87,
	180, 471, 761, 237, 181, 295, 572, 57, 246, 301,
	272, 325, 321, 235, 310, 204, 197, 42, 187, 41,
	180, 180, 889, 203, 885, 180, 215, 888, 877, 887,
	884, 216, 544, 876, 730, 217, 182, 183, 184, 185,
	186, 345, 799, 491, 46, 225, 819, 760, 180, 848,
	180, 833, 768, 794, 180, 792, 484, 489, 870, 754,
	230, 222, 202, 78, 48, 49, 50, 51, 349, 346,
	86, 464, 466, 226, 77, 67, 78, 633, 590, 625,
	333, 589, 494, 588, 62, 597, 80, 81, 82, 234,
	75, 357, 356, 71, 66, 862, 369, 368, 378, 379,
	371, 372, 373, 374, 375, 376, 377, 370, 358, 223,
	380, 58, 83, 627, 79, 392, 393, 806, 784, 541,
	414, 332, 605, 357, 356, 657, 628, 356, 607, 856,
	594, 401, 370, 337, 824, 380, 488, 490, 487, 465,
	358, 329, 380, 358, 634, 355, 768, 229, 871, 753,
	869, 752, 336, 358, 250, 369, 368, 378, 379, 371,
	372, 373, 374, 375, 376, 377, 370, 732, 557, 380,
	640, 177, 180, 557, 875, 298, 339, 857, 360, 180,
	180, 61, 180, 70, 68, 72, 429, 430, 334, 357,
	356, 64, 180, 617, 817, 59, 734, 180, 59, 863,
	180, 303, 516, 180, 207, 873, 358, 872, 344, 297,
	492, 344, 359, 606, 830, 604, 514, 515, 513, 348,
	829, 493, 240, 296, 357, 356, 357, 356, 357, 356,
	232, 708, 394, 395, 396, 397, 398, 399, 820, 299,
	533, 358, 534, 358, 60, 358, 65, 74, 69, 63,
	73, 369, 368, 378, 379, 371, 372, 373, 374, 375,
	376, 377, 370, 836, 39, 380, 855, 502, 504, 505,
	846, 59, 503, 757, 512, 361, 180, 814, 758, 180,
	180, 180, 180, 597, 435, 446, 443, 216, 867, 866,
	180, 217, 535, 431, 180, 860, 859, 180, 808, 236,
	180, 340, 180, 180, 231, 462, 403, 622, 236, 59,
	882, 477, 432, 412, 881, 216, 433, 180, 236, 217,
	180, 344, 344, 180, 59, 448, 468, 450, 852, 573,
	481, 335, 447, 458, 449, 460, 461, 344, 467, 609,
	610, 611, 472, 508, 473, 497, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 43, 475, 207, 849, 850, 851, 666, 667, 476,
	59, 470, 472, 635, 510, 546, 656, 236, 18, 479,
	547, 236, 308, 538, 59, 344, 462, 308, 236, 499,
	500, 649, 506, 507, 547, 335, 858, 558, 622, 652,
	390, 536, 537, 739, 416, 417, 418, 419, 420, 421,
	422, 308, 335, 18, 561, 59, 548, 357, 356, 574,
	554, 216, 39, 307, 622, 217, 579, 18, 581, 559,
	427, 598, 622, 564, 358, 565, 441, 403, 442, 811,
	551, 552, 39, 479, 583, 308, 762, 780, 582, 194,
	718, 776, 573, 577, 352, 59, 59, 39, 439, 457,
	296, 316, 317, 207, 207, 207, 207, 76, 599, 344,
	586, 39, 720, 585, 16, 593, 587, 600, 207, 373,
	374, 375, 376, 377, 370, 452, 207, 380, 722, 591,
	726, 601, 721, 39, 719, 613, 614, 615, 451, 724,
	312, 315, 316, 317, 313, 592, 314, 318, 723, 455,
	584, 612, 725, 727, 456, 59, 201, 453, 511, 192,
	198, 199, 454, 886, 510, 549, 550, 883, 626, 553,
	262, 261, 263, 264, 265, 266, 608, 180, 267, 498,
	570, 569, 302, 560, 238, 562, 563, 825, 816, 619,
	880, 879, 813, 620, 639, 300, 239, 812, 571, 737,
	650, 482, 351, 631, 632, 59, 320, 636, 665, 180,
	195, 196, 642, 180, 643, 644, 645, 646, 344, 302,
	630, 651, 312, 315, 316, 317, 313, 664, 314, 318,
	641, 189, 653, 654, 655, 568, 59, 839, 709, 710,
	658, 190, 546, 567, 707, 43, 271, 838, 706, 626,
	802, 403, 344, 713, 472, 712, 659, 660, 803, 716,
	180, 354, 729, 728, 45, 715, 47, 59, 59, 738,
	331, 40, 59, 59, 59, 711, 178, 740, 59, 1,
	742, 743, 749, 844, 751, 746, 746, 746, 747, 748,
	735, 344, 595, 750, 744, 731, 210, 210, 218, 755,
	621, 210, 736, 577, 769, 770, 771, 868, 511, 847,
	479, 756, 818, 733, 637, 59, 759, 763, 764, 765,
	766, 815, 781, 670, 210, 671, 210, 669, 344, 783,
	210, 772, 773, 774, 777, 778, 782, 673, 672, 668,
	84, 790, 378, 379, 371, 372, 373, 374, 375, 376,
	377, 370, 804, 319, 380, 324, 623, 483, 53, 603,
	602, 787, 788, 805, 789, 486, 221, 791, 388, 793,
	785, 786, 566, 580, 428, 294, 837, 801, 638, 411,
	555, 249, 795, 796, 826, 827, 828, 501, 821, 822,
	577, 260, 257, 259, 258, 59, 434, 440, 665, 807,
	362, 809, 810, 247, 241, 463, 206, 800, 344, 304,
	311, 309, 212, 832, 205, 648, 798, 59, 834, 59,
	861, 840, 59, 216, 438, 19, 44, 217, 200, 15,
	842, 14, 843, 13, 12, 845, 853, 854, 11, 10,
	9, 8, 7, 6, 207, 5, 4, 191, 210, 273,
	36, 865, 835, 17, 2, 210, 327, 0, 210, 841,
	371, 372, 373, 374, 375, 376, 377, 370, 210, 0,
	380, 0, 0, 210, 0, 0, 210, 0, 59, 210,
	0, 0, 0, 0, 209, 0, 36, 18, 37, 20,
	21, 878, 0, 0, 193, 0, 618, 0, 0, 208,
	0, 0, 0, 0, 0, 30, 0, 0, 0, 0,
	22, 864, 403, 0, 0, 874, 369, 368, 378, 379,
	371, 372, 373, 374, 375, 376, 377, 370, 29, 67,
	380, 39, 0, 0, 0, 213, 0, 0, 62, 224,
	0, 0, 0, 0, 75, 0, 0, 71, 66, 0,
	0, 0, 210, 0, 218, 210, 210, 210, 210, 0,
	0, 0, 227, 0, 228, 58, 459, 0, 233, 0,
	210, 0, 0, 327, 0, 0, 469, 55, 210, 210,
	0, 0, 218, 0, 469, 0, 0, 23, 24, 26,
	25, 27, 0, 210, 0, 0, 210, 0, 0, 210,
	0, 28, 31, 32, 0, 0, 33, 34, 35, 0,
	369, 368, 378, 379, 371, 372, 373, 374, 375, 376,
	377, 370, 0, 52, 380, 54, 0, 0, 0, 56,
	0, 0, 0, 0, 0, 61, 0, 70, 68, 72,
	0, 0, 0, 36, 0, 64, 0, 545, 469, 0,
	0, 0, 545, 545, 0, 0, 545, 0, 323, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	545, 545, 545, 545, 342, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 0, 545, 306, 0, 218, 0,
	0, 0, 0, 0, 389, 391, 330, 0, 60, 0,
	65, 74, 69, 63, 73, 0, 338, 0, 0, 0,
	0, 347, 0, 0, 350, 0, 0, 353, 0, 0,
	400, 0, 0, 404, 405, 406, 407, 408, 409, 410,
	0, 413, 415, 415, 415, 415, 415, 415, 415, 415,
	423, 424, 425, 426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 0, 208, 208,
	208, 208, 368, 378, 379, 371, 372, 373, 374, 375,
	376, 377, 370, 323, 0, 380, 0, 0, 18, 0,
	0, 208, 0, 0, 0, 0, 0, 545, 342, 67,
	445, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 545, 0, 342, 75, 0, 0, 71, 66, 0,
	0, 0, 0, 210, 0, 0, 0, 474, 0, 0,
	0, 0, 39, 0, 0, 58, 0, 0, 0, 0,
	0, 485, 0, 0, 495, 0, 0, 496, 0, 0,
	0, 36, 0, 0, 0, 210, 0, 0, 0, 210,
	0, 0, 0, 0, 404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 545,
	0, 0, 0, 0, 0, 469, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 578, 0, 36, 61, 210, 70, 68, 72,
	0, 67, 0, 0, 540, 64, 245, 0, 0, 0,
	62, 0, 244, 0, 0, 281, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 39, 342, 0, 219, 262, 261,
	263, 264, 265, 266, 0, 0, 267, 268, 269, 0,
	0, 242, 255, 0, 280, 0, 0, 0, 60, 0,
	65, 74, 69, 63, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 543, 0, 0, 0,
	292, 0, 254, 0, 67, 251, 256, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 629, 177, 0, 75,
	290, 18, 71, 66, 0, 0, 0, 61, 0, 70,
	68, 72, 67, 0, 0, 0, 0, 64, 0, 0,
	58, 62, 0, 436, 0, 0, 437, 75, 0, 0,
	71, 66, 0, 0, 0, 0, 0, 0, 661, 662,
	663, 0, 0, 0, 0, 39, 0, 0, 179, 0,
	218, 647, 0, 0, 0, 282, 291, 288, 289, 286,
	287, 285, 284, 283, 293, 276, 277, 279, 0, 278,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 0,
	177, 0, 0, 704, 0, 0, 0, 705, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 208,
	64, 0, 578, 0, 0, 741, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 342, 65, 74, 69, 63, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	797, 60, 0, 65, 74, 69, 63, 73, 0, 578,
	0, 36, 166, 153, 127, 168, 105, 119, 176, 120,
	121, 147, 93, 135, 67, 117, 0, 108, 89, 114,
	90, 106, 129, 62, 132, 104, 155, 138, 174, 75,
	142, 0, 71, 66, 0, 0, 131, 160, 133, 152,
	126, 148, 98, 141, 169, 118, 145, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	165, 116, 146, 88, 143, 0, 91, 94, 175, 163,
	111, 112, 0, 0, 0, 0, 0, 0, 0, 130,
	134, 149, 124, 0, 0, 0, 0, 0, 0, 831,
	0, 109, 0, 140, 0, 0, 0, 95, 92, 128,
	0, 0, 0, 97, 676, 110, 150, 0, 161, 125,
	177, 164, 123, 122, 167, 170, 0, 159, 107, 115,
	61, 113, 70, 68, 72, 0, 687, 0, 0, 0,
	64, 692, 693, 694, 695, 696, 697, 698, 0, 699,
	700, 701, 702, 703, 688, 689, 690, 691, 674, 675,
	0, 0, 677, 0, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 103, 162, 156, 157, 158, 101, 102,
	99, 100, 136, 137, 171, 172, 173, 151, 96, 0,
	0, 154, 139, 60, 0, 65, 74, 69, 63, 73,
	166, 153, 127, 168, 105, 119, 176, 120, 121, 147,
	93, 135, 67, 117, 0, 108, 89, 114, 90, 106,
	129, 62, 132, 104, 155, 138, 174, 75, 142, 0,
	71, 66, 0, 0, 131, 160, 133, 152, 126, 148,
	98, 141, 169, 118, 145, 39, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 165, 116,
	146, 88, 143, 0, 91, 94, 175, 163, 111, 112,
	0, 0, 0, 0, 0, 0, 0, 130, 134, 149,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 140, 0, 0, 0, 95, 92, 128, 0, 0,
	0, 97, 0, 110, 150, 0, 161, 125, 177, 164,
	123, 122, 167, 170, 0, 159, 107, 115, 61, 113,
	70, 68, 72, 364, 0, 367, 0, 0, 64, 0,
	0, 381, 382, 383, 384, 385, 386, 387, 0, 365,
	366, 363, 369, 368, 378, 379, 371, 372, 373, 374,
	375, 376, 377, 370, 0, 0, 380, 0, 0, 0,
	0, 103, 162, 156, 157, 158, 101, 102, 99, 100,
	136, 137, 171, 172, 173, 151, 96, 0, 0, 154,
	139, 60, 0, 65, 74, 69, 63, 73, 166, 153,
	127, 168, 105, 119, 176, 120, 121, 147, 93, 135,
	67, 117, 0, 108, 89, 114, 90, 106, 129, 62,
	132, 104, 155, 138, 174, 75, 142, 0, 71, 66,
	0, 0, 131, 160, 133, 152, 126, 148, 98, 141,
	169, 118, 145, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 165, 116, 146, 88,
	143, 0, 91, 94, 175, 163, 111, 112, 0, 0,
	0, 0, 0, 0, 0, 130, 134, 149, 124, 0,
	0, 0, 0, 0, 0, 714, 0, 109, 0, 140,
	0, 0, 0, 95, 92, 128, 0, 0, 0, 97,
	0, 110, 150, 0, 161, 125, 177, 164, 123, 122,
	167, 170, 0, 159, 107, 115, 61, 113, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	162, 156, 157, 158, 101, 102, 99, 100, 136, 137,
	171, 172, 173, 151, 96, 0, 0, 154, 139, 60,
	0, 65, 74, 69, 63, 73, 166, 153, 127, 168,
	105, 119, 176, 120, 121, 147, 93, 135, 67, 117,
	0, 108, 89, 114, 90, 106, 129, 62, 132, 104,
	155, 138, 174, 75, 142, 0, 71, 66, 0, 0,
	131, 160, 133, 152, 126, 148, 98, 141, 169, 118,
	145, 480, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 165, 116, 146, 88, 143, 0,
	91, 94, 175, 163, 111, 112, 0, 0, 0, 0,
	0, 0, 0, 130, 134, 149, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 140, 0, 0,
	0, 95, 92, 128, 0, 0, 0, 97, 0, 110,
	150, 0, 161, 125, 177, 164, 123, 122, 167, 170,
	0, 159, 107, 115, 61, 113, 70, 68, 72, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 162, 156,
	157, 158, 101, 102, 99, 100, 136, 137, 171, 172,
	173, 151, 96, 0, 0, 154, 139, 60, 0, 65,
	74, 69, 63, 73, 166, 153, 127, 168, 105, 119,
	176, 120, 121, 147, 93, 135, 67, 117, 0, 108,
	89, 114, 90, 106, 129, 62, 132, 104, 155, 138,
	174, 75, 142, 0, 71, 66, 0, 0, 131, 160,
	133, 152, 126, 148, 98, 141, 169, 118, 145, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 165, 116, 146, 88, 143, 0, 91, 94,
	175, 163, 111, 112, 0, 0, 0, 0, 0, 0,
	0, 130, 134, 149, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 140, 0, 0, 0, 95,
	92, 128, 0, 0, 0, 97, 0, 110, 150, 0,
	161, 125, 177, 164, 123, 122, 167, 170, 0, 159,
	107, 115, 61, 113, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 162, 156, 157, 158,
	101, 102, 99, 100, 136, 137, 171, 172, 173, 151,
	96, 0, 0, 154, 139, 60, 0, 65, 74, 69,
	63, 73, 166, 153, 127, 168, 105, 119, 176, 120,
	121, 147, 93, 135, 67, 117, 0, 108, 89, 114,
	90, 106, 129, 62, 132, 104, 155, 138, 174, 75,
	142, 0, 71, 66, 0, 0, 131, 160, 133, 152,
	126, 148, 98, 141, 169, 118, 145, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	165, 116, 146, 88, 143, 0, 91, 94, 175, 163,
	111, 112, 0, 0, 0, 0, 0, 0, 0, 130,
	134, 149, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 140, 0, 0, 0, 95, 92, 128,
	0, 0, 0, 97, 0, 110, 150, 0, 161, 125,
	177, 164, 123, 122, 167, 170, 0, 159, 107, 115,
	61, 113, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 162, 156, 157, 158, 101, 102,
	99, 100, 136, 137, 171, 172, 173, 151, 96, 0,
	0, 154, 139, 60, 0, 65, 74, 69, 63, 73,
	166, 153, 127, 168, 105, 119, 176, 120, 121, 147,
	93, 135, 67, 117, 0, 108, 89, 114, 90, 106,
	129, 62, 132, 104, 155, 138, 174, 75, 142, 0,
	71, 66, 0, 0, 131, 160, 133, 152, 126, 148,
	98, 141, 169, 118, 145, 0, 0, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 165, 116,
	146, 88, 143, 0, 91, 94, 175, 163, 111, 112,
	0, 0, 0, 0, 0, 0, 0, 130, 134, 149,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 140, 0, 0, 0, 95, 92, 128, 0, 0,
	0, 97, 0, 110, 150, 0, 161, 125, 177, 164,
	123, 122, 167, 170, 0, 159, 107, 115, 61, 113,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 162, 156, 157, 158, 101, 102, 99, 100,
	136, 137, 171, 172, 173, 151, 96, 0, 0, 154,
	139, 60, 0, 65, 74, 69, 63, 73, 166, 153,
	127, 168, 105, 119, 176, 120, 121, 147, 93, 135,
	67, 117, 0, 108, 89, 114, 90, 106, 129, 62,
	132, 104, 155, 138, 174, 75, 142, 0, 71, 66,
	0, 0, 131, 160, 133, 152, 126, 148, 98, 141,
	169, 118, 145, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 165, 116, 146, 88,
	143, 0, 91, 94, 175, 163, 111, 112, 0, 0,
	0, 0, 0, 0, 0, 130, 134, 149, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 140,
	0, 0, 0, 95, 92, 128, 0, 0, 0, 97,
	0, 110, 150, 0, 161, 125, 177, 164, 123, 122,
	167, 170, 0, 159, 107, 115, 61, 113, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 305, 62, 0,
	0, 0, 0, 0, 75, 0, 0, 71, 66, 103,
	162, 156, 157, 158, 101, 102, 99, 100, 136, 137,
	171, 172, 173, 151, 96, 179, 0, 154, 139, 60,
	0, 65, 74, 69, 63, 73, 67, 0, 0, 0,
	0, 245, 0, 0, 0, 62, 0, 244, 0, 0,
	281, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	274, 275, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 219, 262, 261, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 0, 177, 242, 255, 0, 280,
	0, 0, 0, 0, 0, 61, 0, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 252,
	253, 543, 0, 0, 0, 292, 0, 254, 0, 0,
	251, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 60, 0,
	65, 74, 69, 63, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 291, 288, 289, 286, 287, 285, 284, 283, 293,
	276, 277, 279, 0, 278, 60, 0, 65, 74, 69,
	63, 73, 67, 0, 0, 0, 0, 245, 0, 0,
	0, 62, 0, 244, 0, 0, 281, 75, 0, 0,
	71, 66, 0, 0, 0, 0, 274, 275, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 236, 219, 262,
	261, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	0, 0, 242, 255, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 0, 0, 0,
	0, 292, 0, 254, 0, 0, 251, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 75, 0, 0, 71, 66, 282, 291, 288, 289,
	286, 287, 285, 284, 283, 293, 276, 277, 279, 18,
	278, 60, 179, 65, 74, 69, 63, 73, 0, 0,
	67, 0, 0, 0, 0, 245, 0, 0, 0, 62,
	0, 244, 0, 0, 281, 75, 0, 0, 71, 66,
	0, 0, 0, 0, 274, 275, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 219, 262, 261, 263,
	264, 265, 266, 0, 0, 267, 268, 269, 0, 0,
	242, 255, 177, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 252, 253, 0, 0, 0, 0, 292,
	0, 254, 0, 0, 251, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 65, 74, 69,
	63, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 291, 288, 289, 286, 287,
	285, 284, 283, 293, 276, 277, 279, 0, 278, 60,
	0, 65, 74, 69, 63, 73, 67, 0, 0, 0,
	0, 245, 0, 0, 0, 62, 0, 244, 0, 0,
	281, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	274, 275, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 219, 262, 261, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 0, 0, 242, 255, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 0, 0, 0, 0, 292, 0, 254, 0, 0,
	251, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 291, 288, 289, 286, 287, 285, 284, 283, 293,
	276, 277, 279, 67, 278, 60, 0, 65, 74, 69,
	63, 73, 62, 0, 0, 0, 0, 281, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 219,
	262, 261, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 0, 0, 0, 255, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 0, 0,
	0, 0, 292, 0, 254, 0, 0, 251, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 290, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 67, 0, 0, 0, 0, 64,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 75,
	0, 0, 71, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 282, 291, 288,
	289, 286, 287, 285, 284, 283, 293, 276, 277, 279,
	0, 278, 60, 0, 65, 74, 69, 63, 73, 0,
	0, 0, 0, 369, 368, 378, 379, 371, 372, 373,
	374, 375, 376, 377, 370, 0, 67, 380, 0, 0,
	326, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	177, 75, 0, 0, 71, 66, 0, 0, 67, 0,
	61, 0, 70, 68, 72, 0, 0, 62, 0, 67,
	64, 0, 179, 75, 328, 0, 71, 66, 62, 0,
	67, 0, 0, 0, 75, 0, 0, 71, 66, 62,
	0, 39, 0, 0, 179, 75, 0, 0, 71, 66,
	0, 0, 0, 0, 0, 58, 0, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 328, 0,
	0, 0, 0, 60, 0, 65, 74, 69, 63, 73,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 177, 70, 68, 72, 0,
	0, 0, 0, 0, 64, 61, 177, 70, 68, 72,
	0, 0, 67, 0, 0, 64, 61, 0, 70, 68,
	72, 62, 0, 0, 0, 0, 64, 75, 0, 0,
	71, 66, 0, 0, 0, 60, 0, 65, 74, 69,
	63, 73, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 0, 0, 60, 0,
	65, 74, 69, 63, 73, 0, 0, 0, 0, 60,
	0, 65, 74, 69, 63, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 177, 75,
	0, 0, 71, 66, 0, 0, 67, 0, 61, 0,
	70, 68, 72, 0, 0, 62, 0, 0, 64, 0,
	219, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 65, 74, 69, 63, 73, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 65, 74, 69, 63, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 65, 74, 69,
	63, 73,
}
var yyPact = [...]int{

	871, -1000, -144, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 621, 649, -1000, -1000,
	-1000, -1000, -1000, 902, -9, 33, 5, 31, 2893, 4209,
	-1000, -1000, -1000, -1000, -1000, -1000, 451, -1000, -1000, -1000,
	-1000, -1000, 605, 616, 473, 581, 513, -1000, -22, 3981,
	3379, 4187, -25, 27, 4209, -105, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -8, 4209, -1000, 4209,
	-26, 281, -26, 4209, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 296, 556, 3599,
	3599, 621, -1000, 451, -1000, -1000, -1000, 552, -1000, -1000,
	170, 3022, 424, 573, -1000, -1000, -1000, 575, 1385, 3959,
	68, 4209, 100, -1000, 374, -1000, 107, -1000, 60, -1000,
	-1000, 4209, 139, 278, 1765, -14, 4209, 1765, -16, 4209,
	570, 435, 4209, -1000, -1000, -1000, -1000, -1000, 643, 90,
	191, -1000, 3599, 1826, 422, 422, -1000, -1000, 41, -1000,
	-1000, 3766, 3766, 3766, 3766, 3766, 3766, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	422, 58, -1000, 3423, 422, 422, 422, 422, 422, 422,
	3599, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 409, -1000, 193, 605, 296, 513,
	1357, 448, -1000, -1000, 437, 4209, -1000, 4187, 3981, 3981,
	3981, 3981, -1000, 489, 476, -1000, 508, 500, 450, 4209,
	-1000, 366, 296, 1385, 54, -1000, 4003, -1000, -1000, 2705,
	633, 3981, 4209, -1000, -1000, 4187, 3599, 2517, 2141, 569,
	-32, -1000, -1000, -1000, -1000, -1000, 4209, 59, -1000, 4209,
	-1000, -1000, 4209, 1765, -1000, 534, 3599, 3599, 235, 3599,
	3599, 101, 3766, 244, 163, 3766, 3766, 3766, 3766, 3766,
	3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
	217, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 269,
	-1000, 451, 506, 506, 72, 72, 72, 72, 72, 3877,
	1274, 2517, 359, 189, 3423, 3069, 3069, 3599, 3599, 3069,
	589, 132, 189, 4105, -1000, 296, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3069, 3069, 3069, 3069, 3599, -1000, -1000,
	-1000, 556, -1000, 589, 615, -1000, 540, 539, 3069, -1000,
	433, 4187, 422, -1000, 1162, -1000, 391, 573, 425, 491,
	-1000, -1000, -1000, -1000, 464, -1000, 461, -1000, -1000, -1000,
	-1000, -1000, 296, -1000, 1, -1, -4, -1000, -1000, -1000,
	-1000, 621, 3599, 361, -1000, -1000, 189, -1000, 57, -1000,
	260, -1000, -1000, 412, 4105, 1765, -1000, 131, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, 101,
	91, -1000, -1000, 307, -1000, -1000, 189, 189, 914, -1000,
	-1000, -1000, -1000, 244, 3766, 3766, 3766, 99, 914, 820,
	644, 1065, 72, 417, 417, 65, 65, 65, 65, 65,
	760, 760, -1000, -1000, -1000, 296, -1000, -1000, -1000, 296,
	3069, 403, -1000, -1000, 88, 53, 422, 3599, -1000, 286,
	286, 56, 382, 286, 3069, 127, -1000, 3599, 296, -1000,
	286, 296, 286, 286, -1000, -1000, 4209, -1000, -1000, -1000,
	-1000, 411, -1000, 564, 310, 378, -1000, -1000, 3245, 296,
	355, 52, 621, 3599, 3599, -1000, -1000, -1000, 422, 422,
	422, 605, 189, -1000, 2329, 346, -1000, 1583, 4209, -1000,
	-1000, -1000, 4209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 99, 914, 195, -1000, 3766, 3766, -1000,
	-1000, 286, 3069, -1000, -1000, 3992, -1000, -1000, 1953, 3069,
	189, -1000, -1000, 379, 217, 379, -122, 377, 123, -1000,
	3599, 154, -1000, -1000, -1000, -1000, -1000, -1000, 633, 3981,
	562, -1000, 422, -1000, -1000, 402, 4105, 4105, 605, 189,
	189, 4105, 4105, 4105, -1000, -1000, 62, 1765, 241, -87,
	-1000, -1000, 426, -1000, 426, 426, 426, 426, -66, -66,
	-66, -66, -1000, -1000, -1000, -1000, -1000, -1000, 426, 426,
	426, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 431,
	431, 431, 427, 427, 1765, -1000, -1000, -1000, 3766, 914,
	914, -1000, -1000, -1000, -1000, 45, 296, 296, 426, 426,
	-1000, 426, 427, -1000, 426, -48, 426, -50, 296, 296,
	422, -112, -1000, 189, 3599, 628, 390, 640, -1000, 422,
	-1000, 451, 44, -1000, -1000, 277, -1000, 277, 277, -1000,
	-1000, 419, 560, 555, 254, -1000, 550, -1000, 162, -89,
	-1000, -1000, 212, -66, -66, -1000, -1000, 64, 548, 64,
	64, 64, -1000, -1000, -1000, -1000, 194, -1000, -1000, -1000,
	188, -1000, -1000, 914, 1577, -1000, -1000, -1000, 28, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3766, 296, 238,
	189, 624, 612, 4187, 378, 296, 4105, -1000, 4105, -1000,
	-1000, 4105, -1000, 247, -1000, -82, 339, -1000, -1000, -1000,
	306, 64, 64, -1000, 243, 106, -1000, -1000, -1000, 375,
	274, -1000, -1000, -1000, 40, -1000, -1000, -1000, 3599, 3599,
	374, -1000, -1000, -1000, 267, -1000, -1000, 61, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 181, -1000,
	179, 296, 17, -132, 189, 373, -1000, 4105, -1000, 554,
	-1000, 553, 292, 288, -1000, 521, -128, -137, -1000, -1000,
	-1000, -1000, -1000, -1000, 517, -1000, -130, -133, -139, -1000,
}
var yyPgo = [...]int{

	0, 844, 11, 504, 843, 837, 836, 835, 833, 832,
	831, 830, 829, 828, 824, 823, 821, 819, 74, 818,
	816, 815, 39, 814, 46, 810, 806, 20, 149, 19,
	22, 62, 805, 42, 53, 45, 804, 802, 801, 44,
	800, 874, 799, 796, 795, 15, 31, 794, 793, 790,
	787, 38, 10, 786, 784, 783, 782, 781, 777, 27,
	1, 2, 40, 6, 771, 184, 9, 770, 28, 769,
	768, 767, 766, 47, 765, 35, 764, 25, 33, 763,
	36, 7, 56, 762, 497, 758, 177, 756, 755, 750,
	749, 748, 747, 71, 0, 13, 3, 17, 746, 636,
	26, 41, 745, 743, 34, 21, 18, 16, 730, 729,
	728, 727, 717, 715, 713, 32, 711, 14, 4, 706,
	702, 23, 8, 701, 699, 697, 5, 683, 682, 674,
	673, 669, 661, 839, 43, 660, 656, 150,
}
var yyR1 = [...]int{

	0, 131, 132, 132, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 8, 135, 135, 37, 37, 9, 109, 109, 109,
	112, 112, 110, 110, 110, 110, 110, 110, 110, 111,
	111, 111, 111, 111, 113, 113, 113, 113, 113, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 115, 121, 121, 122, 122, 122, 119,
	119, 120, 120, 123, 123, 123, 116, 116, 116, 116,
	124, 124, 117, 117, 117, 118, 118, 125, 125, 125,
	125, 125, 126, 127, 129, 129, 129, 130, 130, 128,
	128, 128, 10, 10, 10, 10, 10, 11, 11, 11,
	11, 12, 13, 13, 13, 14, 108, 108, 108, 15,
	16, 17, 17, 17, 17, 17, 17, 136, 18, 19,
	19, 20, 20, 20, 24, 24, 24, 22, 22, 23,
	23, 29, 29, 28, 28, 30, 30, 30, 30, 98,
	98, 98, 97, 97, 32, 32, 33, 33, 34, 34,
	35, 35, 35, 43, 36, 36, 36, 36, 103, 103,
	102, 102, 102, 101, 101, 38, 38, 38, 38, 39,
	39, 39, 39, 40, 40, 42, 42, 41, 41, 44,
	44, 44, 44, 45, 45, 46, 46, 31, 31, 31,
	31, 31, 31, 31, 85, 85, 48, 48, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 58, 58,
	58, 58, 58, 58, 49, 49, 49, 49, 49, 49,
	49, 27, 27, 59, 59, 59, 65, 60, 60, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 56,
	56, 56, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 55, 55, 55, 55, 55, 55, 55, 55, 137,
	137, 57, 57, 57, 57, 25, 25, 25, 25, 25,
	106, 106, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 69, 69, 26, 26, 67,
	67, 68, 70, 70, 66, 66, 66, 51, 51, 51,
	51, 51, 51, 51, 53, 53, 53, 71, 71, 72,
	72, 73, 73, 74, 74, 75, 76, 76, 76, 77,
	77, 77, 77, 78, 78, 78, 50, 50, 50, 50,
	50, 50, 79, 79, 79, 79, 80, 80, 61, 61,
	63, 63, 62, 64, 81, 81, 82, 83, 83, 86,
	86, 87, 87, 84, 84, 88, 88, 88, 88, 88,
	88, 88, 89, 89, 89, 90, 90, 91, 91, 91,
	92, 92, 95, 95, 96, 96, 99, 99, 100, 100,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 133, 134, 104, 105,
	105, 105,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 6, 4, 2, 3, 2, 1, 3, 1,
	3, 3, 8, 5, 8, 4, 6, 6, 7, 7,
	4, 5, 4, 5, 5, 3, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 3, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -131, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 106, 107, 109, 108, 110, 120, 47,
	24, 121, 122, 125, 126, 127, -133, 7, 180, 50,
	-132, 193, -73, 14, -20, 5, -18, -136, -18, -18,
	-18, -18, 111, -91, 113, 65, 117, -95, 53, -94,
	186, 123, 26, 191, 133, 188, 36, 17, 126, 190,
	125, 35, 127, 192, 189, 32, -84, 113, 115, 111,
	111, 112, 113, 111, -108, 53, -93, -94, 66, 21,
	23, 69, 101, 15, 70, 100, 181, 106, 45, 173,
	174, 171, 172, 166, 28, 9, 24, 121, 20, 94,
	108, 73, 74, 124, 22, 122, 64, 18, 48, 10,
	12, 13, 116, 115, 85, 112, 43, 7, 102, 25,
	82, 39, 27, 41, 83, 16, 175, 176, 30, 185,
	96, 46, 33, 67, 62, 49, 65, 14, 44, 84,
	109, 180, 42, 6, 184, 29, 168, 169, 170, 120,
	40, 111, 167, 72, 114, 63, 5, 117, 8, 47,
	118, 177, 178, 179, 31, 71, 11, 113, -99, 53,
	-94, -104, -104, -104, -104, -104, -104, -2, -77, 16,
	15, -5, -3, -133, 6, 19, 20, -24, 37, 38,
	-19, -84, -33, -34, -35, -36, -43, -65, -133, -41,
	-99, 10, -37, -41, -81, -82, -66, -95, -99, 53,
	-94, -87, 116, 112, -41, 180, 111, -41, -41, -86,
	116, 53, -86, -41, -104, -134, 52, -78, 18, 30,
	-31, -47, 67, -52, 28, 22, -51, -48, -66, -64,
	-65, 101, 90, 91, 98, 68, 102, -56, -54, -55,
	-57, 55, 54, 56, 57, 58, 59, 62, 63, 64,
	-95, -99, -62, -133, 41, 42, 181, 182, 185, 183,
	70, 31, 171, 179, 178, 177, 175, 176, 173, 174,
	116, 172, 96, 180, -74, -75, -31, -73, -2, -18,
	33, -22, 20, 61, -42, 25, -41, 29, 51, -38,
	-39, -40, 39, 43, 45, 40, 41, 42, 46, -103,
	21, -33, -2, -133, -102, -101, 21, -99, 55, 103,
	-41, -135, 51, 10, 118, 51, 75, 103, -41, 67,
	53, -105, -133, -96, -95, -93, 113, -41, -105, 114,
	-41, 22, 49, -41, 8, 85, 66, 65, 82, 51,
	17, -31, -49, 85, 67, 83, 84, 69, 87, 86,
	97, 90, 91, 92, 93, 94, 95, 96, 88, 89,
	100, 75, 76, 77, 78, 79, 80, 81, -85, -133,
	-65, -133, 104, 105, -52, -52, -52, -52, -52, -52,
	-133, 103, -60, -31, -133, -133, -133, -133, -133, -133,
	-133, -69, -31, -133, -137, -133, -137, -137, -137, -137,
	-137, -137, -137, -133, -133, -133, -133, 51, -76, 23,
	24, -77, -134, -24, -53, -95, 56, 59, -23, 40,
	-50, 29, 31, -2, -133, -41, -81, -34, -35, -34,
	-35, 39, 39, 39, 44, 39, 44, 39, -39, -99,
	-134, -134, -2, -44, 47, 115, 48, -101, -100, -99,
	-93, -46, 11, -33, -41, -82, -31, -96, -100, -93,
	50, -105, 22, -92, 118, -41, -88, 109, 107, 28,
	108, 14, 181, 192, 53, -41, -41, -105, 35, -31,
	-31, -58, 62, 67, 63, 64, -31, -31, -52, -59,
	-62, -65, 60, 85, 83, 84, 69, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -106, 53, 55, 53, -51, -51, -95, -29,
	20, -28, -30, 92, -31, -99, -96, 51, -134, -28,
	-28, -31, -31, -28, -22, -67, -68, 71, -95, -134,
	-28, -29, -28, -28, -75, -78, -83, 18, 10, 31,
	31, -28, -80, 49, -81, -61, -63, -62, -133, -2,
	-79, -95, -46, 49, 49, 39, 39, -134, 112, 112,
	112, -73, -31, -46, 103, -128, -126, 53, 49, -95,
	-105, -104, -89, -90, 114, 21, 112, 27, 36, 62,
	63, 64, -59, -52, -52, -52, -27, 124, 66, -134,
	-134, -28, 51, -98, -97, 21, -95, 55, 103, -133,
	-31, -134, -134, 51, 118, 21, -134, -28, -70, -68,
	73, -31, -134, -134, -134, -134, -134, -41, -32, 10,
	26, -80, 51, -134, -134, -134, 51, 103, -73, -31,
	-31, -133, -133, -133, -77, -96, 51, 52, -109, -112,
	-114, -113, -110, -111, 145, 146, 101, 149, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 123, 141, 142,
	143, 144, 128, 129, 130, 131, 132, 133, 134, 136,
	137, 138, 139, 140, -41, -41, -104, -27, 66, -52,
	-52, -134, -30, -97, 92, -100, -29, -107, 101, 145,
	123, 143, 139, 159, 150, 163, 141, 164, -106, -107,
	186, -73, 74, -31, 72, -46, -33, 27, -63, 31,
	-2, -133, -95, -95, -77, -45, -95, -45, -45, -126,
	-127, -129, 119, 117, 27, -105, -123, 62, 67, -119,
	164, -115, 50, -115, -115, -115, -115, -117, 148, -117,
	-117, -117, -115, -115, -115, -121, 50, -121, -121, -122,
	50, -122, -105, -52, 103, -134, -134, -115, -115, -115,
	-122, -115, 133, -115, 133, -134, -134, -133, -26, 184,
	-31, -71, 12, 8, -61, -2, 103, -134, 51, -134,
	-134, 50, 27, 27, 53, -116, 28, 62, -120, 165,
	56, -117, -117, -118, 100, 29, -118, -118, -118, 56,
	56, 92, -117, 53, -52, -134, 55, -72, 13, 15,
	-81, -134, -95, -95, -130, -95, 53, -124, 161, 55,
	56, 57, 52, -118, -118, 53, 53, 101, 51, 52,
	51, -25, 85, 189, -31, -60, 52, 51, -125, 119,
	27, 117, 56, 56, -134, 187, 46, 190, -95, 27,
	27, 52, 52, 36, 188, 191, 36, 189, 190, 191,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 351, 0, 137, 137,
	137, 137, 137, 407, 393, 0, 0, 0, 0, 0,
	528, 528, 528, 528, 528, 528, 0, 27, 28, 526,
	1, 3, 359, 0, 0, 141, 144, 139, 393, 0,
	0, 0, 391, 0, 523, 0, 408, 409, 412, 413,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 524, 525, 0, 0, 394, 0,
	389, 0, 389, 0, 528, 126, 127, 128, 420, 421,
	422, 423, 424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 463, 464, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 493, 494, 495, 496, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 523, 130, 416,
	417, 131, 132, 133, 134, 135, 136, 21, 363, 0,
	0, 351, 23, 0, 137, 142, 143, 147, 145, 146,
	138, 0, 0, 166, 168, 169, 170, 178, 0, 180,
	197, 0, 0, 34, 36, 384, 0, 334, 0, -2,
	-2, 0, 0, 0, 529, 0, 0, 529, 0, 0,
	0, 0, 0, 125, 129, 22, 527, 17, 0, 0,
	360, 207, 0, 212, 214, 0, 249, 250, 251, 252,
	253, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	278, 337, 338, 339, 340, 341, 342, 343, 216, 217,
	334, 0, 383, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 299, 299, 299, 299, 299, 299, 299, 299,
	0, 0, 0, 0, 352, 353, 356, 359, 21, 144,
	0, 149, 148, 140, 0, 0, 196, 0, 0, 0,
	0, 0, 185, 0, 0, 188, 0, 0, 0, 0,
	179, 0, 21, 0, 199, 181, 0, 183, 184, 0,
	205, 0, 0, 32, 33, 0, 0, 0, 529, 0,
	410, 115, 530, 531, 414, 415, 0, 0, 120, 0,
	122, 390, 0, 529, 364, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 235, 236, 237, 238, 239, 240, 213, 0,
	227, 0, 0, 0, 269, 270, 271, 272, 273, 0,
	151, 0, 0, 247, 0, 0, 0, 0, 0, 0,
	147, 0, 326, 0, 291, 0, 292, 293, 294, 295,
	296, 297, 298, 0, 151, 0, 0, 0, 355, 357,
	358, 363, 24, 147, 0, 344, 0, 0, 0, 150,
	376, 0, 0, -2, 0, 195, 205, 167, 174, 0,
	177, 186, 187, 189, 0, 191, 0, 193, 194, 171,
	172, 246, 21, 173, 0, 0, 0, 182, 198, 418,
	419, 351, 0, 205, 35, 385, 386, 335, 0, -2,
	526, 113, 392, 0, 0, 529, 528, 402, 395, 396,
	397, 398, 399, 400, 401, 121, 123, 124, 0, 208,
	209, 211, 228, 0, 230, 232, 361, 362, 218, 219,
	243, 244, 245, 0, 0, 0, 0, 241, 223, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 268, 310, 311, 0, 266, 267, 274, 0,
	0, 152, 153, 155, 159, 0, 335, 0, 382, 0,
	0, 0, 0, 0, 0, 332, 329, 0, 0, 300,
	0, 0, 0, 0, 354, 18, 0, 387, 388, 345,
	346, 164, 25, 0, 376, 366, 378, 380, 0, 21,
	0, 372, 351, 0, 0, 190, 192, -2, 0, 0,
	0, 359, 206, 31, 0, 0, 109, 0, 0, 411,
	116, 117, 0, 528, 403, 404, 405, 406, 365, 229,
	231, 233, 220, 241, 224, 0, 221, 0, 0, 215,
	279, 0, 0, 156, 160, 0, 162, 163, 0, 151,
	248, 282, 283, 0, 0, 0, 0, 351, 0, 330,
	0, 0, 290, 301, 302, 303, 304, 19, 205, 0,
	0, 26, 0, 381, -2, 0, 0, 0, 359, 175,
	176, 0, 0, 0, 30, 336, 0, 529, 83, 79,
	38, 39, 72, 41, 72, 72, 72, 72, 92, 92,
	92, 92, 67, 68, 69, 70, 71, 54, 72, 72,
	72, 58, 42, 43, 44, 45, 46, 47, 48, 74,
	74, 74, 76, 76, 529, 118, 119, 222, 0, 242,
	225, 280, 154, 161, 157, 0, 0, 0, 72, 72,
	315, 72, 76, 318, 72, 320, 72, 323, 0, 0,
	0, 327, 289, 333, 0, 347, 165, 0, 379, 0,
	-2, 0, 374, 373, 29, 0, 203, 0, 0, 110,
	111, 0, 0, 0, 0, 112, 86, 84, 0, 81,
	80, 40, 0, 92, 92, 61, 62, 95, 0, 95,
	95, 95, 55, 56, 57, 49, 0, 50, 51, 52,
	0, 53, 114, 226, 0, 281, 284, 312, 92, 316,
	317, 319, 321, 322, 324, 286, 285, 0, 0, 0,
	331, 349, 0, 0, 369, 21, 0, 200, 0, 201,
	202, 0, 104, 0, 106, 90, 0, 85, 37, 82,
	0, 95, 95, 63, 0, 0, 64, 65, 66, 0,
	0, 158, 313, 314, 305, 288, 328, 20, 0, 0,
	377, -2, 375, 204, 0, 107, 105, 97, 91, 87,
	88, 89, 73, 59, 60, 96, 93, 94, 0, 77,
	0, 0, 0, 0, 350, 348, 103, 0, 102, 0,
	99, 101, 0, 0, 287, 0, 0, 0, 108, 98,
	100, 75, 78, 306, 0, 309, 307, 0, 0, 308,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 193,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:247
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:252
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:253
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:257
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:275
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:283
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:287
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:294
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:300
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:304
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:310
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:321
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:332
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:344
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:348
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:354
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:360
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:364
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:369
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:370
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:374
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:378
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:384
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:390
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:400
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:405
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:423
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:548
		{
			yyVAL.optVal = nil
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:552
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:557
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:561
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:569
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:573
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:579
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:587
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:591
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:596
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:600
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:606
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:619
		{
			yyVAL.optVal = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:623
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:627
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:631
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:636
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:640
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:645
		{
			yyVAL.str = ""
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:649
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:653
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:658
		{
			yyVAL.str = ""
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:662
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:667
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:671
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:675
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:679
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:683
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:689
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:699
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].columns}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:705
		{
			yyVAL.indexInfo = &IndexInfo{Primary: true}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:713
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:719
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.tableColumns = &TableColumns{}
			yyVAL.tableColumns.AddColumn(yyDollar[1].columnDefinition)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:734
		{
			yyVAL.tableColumns.AddColumn(yyDollar[3].columnDefinition)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:738
		{
			yyVAL.tableColumns.AddIndex(yyDollar[3].indexDefinition)
		}
	case 112:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:744
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName, Columns: yyDollar[6].tableColumns}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:748
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 114:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:752
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:757
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:761
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:767
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 118:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:771
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 119:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:776
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:781
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:787
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:793
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:801
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:806
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:816
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:841
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:847
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.statement = &OtherRead{}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:857
		{
			yyVAL.statement = &OtherRead{}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:861
		{
			yyVAL.statement = &OtherRead{}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:865
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:869
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:878
		{
			setAllowComments(yylex, true)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:888
		{
			yyVAL.bytes2 = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.str = UnionStr
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.str = UnionAllStr
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:906
		{
			yyVAL.str = UnionDistinctStr
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:911
		{
			yyVAL.str = ""
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:915
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:919
		{
			yyVAL.str = SQLCacheStr
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:924
		{
			yyVAL.str = ""
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:928
		{
			yyVAL.str = DistinctStr
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:933
		{
			yyVAL.str = ""
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.str = StraightJoinHint
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:942
		{
			yyVAL.selectExprs = nil
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:956
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:966
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:970
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:974
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:979
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:983
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:999
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.empty = struct{}{}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.empty = struct{}{}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.str = JoinStr
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.str = JoinStr
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.str = JoinStr
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.str = StraightJoinStr
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.str = LeftJoinStr
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = LeftJoinStr
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = RightJoinStr
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = RightJoinStr
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = NaturalJoinStr
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1133
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.indexHints = nil
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.expr = nil
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 226:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.str = IsNullStr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.str = IsNotNullStr
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.str = IsTrueStr
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.str = IsNotTrueStr
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.str = IsFalseStr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.str = IsNotFalseStr
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.str = EqualStr
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.str = LessThanStr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.str = GreaterThanStr
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = LessEqualStr
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.str = GreaterEqualStr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.str = NotEqualStr
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.expr = nil
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1470
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1478
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1500
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 285:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 287:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.str = BooleanModeStr
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 308:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.str = QueryExpansionStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = nil
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.str = string("")
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.expr = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.expr = &NullVal{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1817
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.exprs = nil
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.expr = nil
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.orderBy = nil
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.str = AscScr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = AscScr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.str = DescScr
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.limit = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.str = ForUpdateStr
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.str = ShareModeStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1937
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1950
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.updateExprs = nil
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2010
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.byt = 0
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.byt = 1
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.empty = struct{}{}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.empty = struct{}{}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.str = IgnoreStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.empty = struct{}{}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.empty = struct{}{}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.empty = struct{}{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.empty = struct{}{}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.empty = struct{}{}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.empty = struct{}{}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.empty = struct{}{}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.empty = struct{}{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.empty = struct{}{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.empty = struct{}{}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.empty = struct{}{}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.empty = struct{}{}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.empty = struct{}{}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.empty = struct{}{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.empty = struct{}{}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.empty = struct{}{}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.empty = struct{}{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2255
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			decNesting(yylex)
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2269
		{
			forceEOF(yylex)
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2274
		{
			forceEOF(yylex)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			forceEOF(yylex)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
