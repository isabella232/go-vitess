//line sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	insRows          InsertRows
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const DATABASES = 57449
const TABLES = 57450
const VITESS_SHARDS = 57451
const INTEGER = 57452
const CHARACTER = 57453
const CURRENT_TIMESTAMP = 57454
const DATABASE = 57455
const CURRENT_DATE = 57456
const CURRENT_TIME = 57457
const LOCALTIME = 57458
const LOCALTIMESTAMP = 57459
const UTC_DATE = 57460
const UTC_TIME = 57461
const UTC_TIMESTAMP = 57462
const REPLACE = 57463
const CONVERT = 57464
const CAST = 57465
const GROUP_CONCAT = 57466
const SEPARATOR = 57467
const MATCH = 57468
const AGAINST = 57469
const BOOLEAN = 57470
const LANGUAGE = 57471
const WITH = 57472
const QUERY = 57473
const EXPANSION = 57474
const UNUSED = 57475

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"DATABASES",
	"TABLES",
	"VITESS_SHARDS",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 175,
	103, 310,
	-2, 306,
	-1, 176,
	103, 311,
	-2, 307,
	-1, 303,
	103, 313,
	-2, 309,
}

const yyNprod = 420
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3210

var yyAct = [...]int{

	432, 440, 339, 533, 604, 278, 255, 170, 385, 603,
	483, 213, 571, 498, 513, 542, 279, 428, 257, 322,
	251, 245, 320, 511, 512, 211, 452, 419, 254, 302,
	527, 190, 425, 154, 216, 384, 3, 485, 171, 29,
	252, 166, 199, 174, 172, 695, 166, 688, 694, 166,
	681, 166, 693, 687, 607, 166, 680, 396, 648, 307,
	52, 155, 476, 38, 477, 40, 156, 148, 44, 41,
	185, 178, 43, 181, 44, 414, 143, 46, 47, 48,
	338, 221, 337, 336, 189, 150, 147, 670, 353, 352,
	362, 363, 355, 356, 357, 358, 359, 360, 361, 354,
	179, 214, 364, 217, 476, 49, 477, 165, 238, 240,
	478, 476, 45, 477, 683, 374, 375, 586, 583, 435,
	423, 313, 355, 356, 357, 358, 359, 360, 361, 354,
	409, 479, 364, 383, 207, 311, 353, 352, 362, 363,
	355, 356, 357, 358, 359, 360, 361, 354, 180, 671,
	364, 182, 478, 183, 364, 679, 203, 188, 344, 478,
	315, 354, 206, 152, 364, 343, 342, 343, 342, 166,
	610, 201, 142, 479, 612, 166, 239, 145, 640, 643,
	479, 499, 344, 166, 344, 209, 676, 166, 193, 677,
	166, 342, 214, 166, 141, 658, 146, 153, 149, 144,
	151, 166, 455, 174, 172, 236, 201, 344, 220, 243,
	662, 174, 172, 243, 310, 312, 309, 210, 499, 301,
	559, 551, 31, 446, 448, 449, 248, 166, 447, 186,
	166, 434, 323, 242, 304, 343, 342, 417, 244, 174,
	172, 332, 303, 241, 247, 357, 358, 359, 360, 361,
	354, 318, 344, 364, 535, 536, 537, 314, 335, 277,
	459, 340, 595, 596, 319, 426, 341, 205, 331, 434,
	345, 196, 372, 214, 457, 458, 456, 204, 416, 376,
	377, 378, 379, 380, 381, 208, 667, 434, 552, 219,
	653, 592, 222, 569, 434, 225, 205, 173, 416, 553,
	386, 416, 434, 235, 343, 342, 246, 394, 353, 352,
	362, 363, 355, 356, 357, 358, 359, 360, 361, 354,
	488, 344, 364, 588, 434, 591, 555, 434, 593, 316,
	166, 569, 317, 488, 434, 433, 434, 416, 436, 343,
	342, 522, 412, 343, 342, 543, 205, 429, 398, 399,
	400, 401, 402, 403, 404, 426, 344, 410, 224, 184,
	344, 227, 443, 444, 453, 431, 454, 451, 656, 475,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 487, 489, 450, 323, 243,
	655, 624, 622, 323, 323, 486, 625, 623, 501, 233,
	621, 620, 692, 480, 481, 160, 161, 691, 187, 492,
	493, 323, 323, 323, 323, 686, 166, 503, 303, 166,
	214, 506, 323, 166, 496, 490, 491, 280, 515, 243,
	689, 523, 424, 328, 192, 486, 516, 509, 526, 510,
	215, 42, 215, 502, 673, 504, 505, 191, 518, 15,
	386, 229, 626, 520, 577, 578, 674, 173, 303, 327,
	684, 531, 534, 659, 164, 173, 197, 215, 215, 529,
	530, 584, 521, 453, 330, 454, 163, 305, 539, 540,
	541, 223, 581, 538, 545, 215, 157, 158, 192, 326,
	323, 549, 550, 173, 334, 554, 441, 325, 615, 442,
	340, 561, 323, 562, 563, 564, 565, 32, 548, 614,
	568, 558, 271, 270, 272, 273, 274, 275, 507, 560,
	276, 508, 546, 166, 34, 35, 36, 37, 587, 246,
	589, 590, 169, 566, 556, 682, 516, 631, 15, 429,
	585, 582, 573, 576, 577, 578, 574, 601, 575, 579,
	31, 33, 654, 323, 28, 597, 1, 50, 602, 609,
	580, 198, 605, 606, 599, 600, 418, 411, 306, 39,
	413, 308, 177, 324, 232, 166, 166, 166, 166, 611,
	333, 494, 421, 629, 672, 617, 628, 619, 516, 516,
	516, 516, 627, 594, 616, 506, 618, 636, 532, 613,
	567, 557, 393, 638, 639, 497, 644, 645, 212, 642,
	212, 634, 635, 534, 256, 427, 650, 445, 267, 637,
	264, 266, 234, 265, 652, 228, 329, 346, 249, 237,
	194, 572, 649, 570, 651, 386, 212, 174, 172, 657,
	514, 482, 415, 215, 647, 669, 176, 159, 661, 226,
	30, 495, 663, 212, 162, 500, 14, 13, 12, 666,
	11, 10, 9, 8, 668, 7, 6, 660, 5, 215,
	678, 675, 53, 664, 665, 4, 2, 0, 685, 0,
	421, 373, 168, 215, 0, 0, 0, 168, 0, 690,
	168, 0, 168, 524, 0, 525, 168, 528, 528, 528,
	573, 576, 577, 578, 574, 382, 575, 579, 0, 387,
	388, 389, 390, 391, 392, 0, 395, 397, 397, 397,
	397, 397, 397, 397, 397, 405, 406, 407, 408, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 420, 0,
	0, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 147, 0, 0, 0, 0, 430, 0,
	0, 0, 0, 0, 437, 438, 439, 215, 0, 0,
	217, 0, 422, 0, 0, 0, 0, 0, 15, 0,
	0, 0, 343, 342, 0, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 344,
	148, 0, 0, 0, 0, 0, 0, 150, 147, 143,
	168, 0, 168, 0, 0, 608, 168, 0, 150, 147,
	0, 0, 214, 0, 168, 167, 0, 218, 168, 218,
	152, 168, 0, 214, 168, 0, 167, 0, 218, 142,
	0, 0, 168, 215, 145, 517, 632, 168, 633, 0,
	168, 148, 0, 0, 0, 218, 0, 0, 0, 0,
	143, 141, 0, 146, 153, 149, 144, 151, 168, 150,
	147, 168, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 152, 0, 217, 0, 0,
	230, 173, 0, 231, 142, 0, 152, 0, 0, 145,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	145, 0, 0, 0, 547, 0, 141, 0, 146, 153,
	149, 144, 151, 0, 0, 0, 0, 141, 0, 146,
	153, 149, 144, 151, 0, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 517, 0, 152, 0, 0,
	430, 0, 0, 0, 218, 0, 142, 0, 0, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 168, 0, 0, 0, 0, 0, 0, 141, 0,
	146, 153, 149, 144, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 517, 517, 517,
	517, 352, 362, 363, 355, 356, 357, 358, 359, 360,
	361, 354, 148, 0, 364, 0, 200, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 218, 0,
	150, 147, 641, 0, 0, 646, 0, 0, 218, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 167, 0,
	202, 0, 0, 0, 0, 0, 218, 168, 0, 0,
	168, 0, 0, 0, 168, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 484, 0, 253,
	218, 0, 218, 143, 218, 218, 218, 0, 288, 0,
	0, 0, 150, 147, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 0, 0, 0, 214, 152, 0,
	175, 271, 270, 272, 273, 274, 275, 142, 0, 276,
	268, 269, 145, 0, 250, 262, 0, 287, 362, 363,
	355, 356, 357, 358, 359, 360, 361, 354, 0, 141,
	364, 146, 153, 149, 144, 151, 0, 259, 260, 321,
	0, 0, 0, 299, 218, 261, 0, 0, 258, 263,
	0, 0, 0, 0, 168, 0, 0, 0, 0, 0,
	152, 0, 0, 297, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 145, 0, 289, 298, 295, 296,
	293, 294, 292, 291, 290, 300, 283, 284, 286, 0,
	285, 141, 218, 146, 153, 149, 144, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 168, 168, 168,
	0, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	218, 0, 0, 218, 0, 218, 130, 119, 93, 132,
	71, 85, 140, 86, 87, 113, 59, 101, 148, 83,
	0, 74, 55, 80, 56, 72, 95, 143, 98, 70,
	121, 104, 138, 0, 108, 0, 150, 147, 0, 0,
	97, 124, 99, 118, 92, 114, 64, 107, 133, 84,
	111, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 129, 82, 112, 54, 109, 0,
	57, 60, 139, 127, 77, 78, 0, 0, 0, 0,
	0, 0, 0, 96, 100, 115, 90, 0, 0, 0,
	0, 0, 0, 630, 0, 75, 0, 106, 0, 0,
	0, 61, 58, 94, 0, 0, 0, 63, 0, 76,
	116, 0, 125, 91, 152, 128, 89, 88, 131, 134,
	123, 73, 81, 142, 79, 69, 126, 122, 145, 0,
	67, 68, 65, 66, 102, 103, 135, 136, 137, 117,
	62, 0, 0, 120, 105, 141, 0, 146, 153, 149,
	144, 151, 130, 119, 93, 132, 71, 85, 140, 86,
	87, 113, 59, 101, 148, 83, 0, 74, 55, 80,
	56, 72, 95, 143, 98, 70, 121, 104, 138, 0,
	108, 0, 150, 147, 0, 0, 97, 124, 99, 118,
	92, 114, 64, 107, 133, 84, 111, 214, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	129, 82, 112, 54, 109, 0, 57, 60, 139, 127,
	77, 78, 0, 0, 0, 0, 0, 0, 0, 96,
	100, 115, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 106, 0, 0, 0, 61, 58, 94,
	0, 0, 0, 63, 0, 76, 116, 0, 125, 91,
	152, 128, 89, 88, 131, 134, 123, 73, 81, 142,
	79, 69, 126, 122, 145, 0, 67, 68, 65, 66,
	102, 103, 135, 136, 137, 117, 62, 0, 0, 120,
	105, 141, 0, 146, 153, 149, 144, 151, 130, 119,
	93, 132, 71, 85, 140, 86, 87, 113, 59, 101,
	148, 83, 0, 74, 55, 80, 56, 72, 95, 143,
	98, 70, 121, 104, 138, 0, 108, 0, 150, 147,
	0, 0, 97, 124, 99, 118, 92, 114, 64, 107,
	133, 84, 111, 0, 0, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 129, 82, 112, 54,
	109, 0, 57, 60, 139, 127, 77, 78, 0, 0,
	0, 0, 0, 0, 0, 96, 100, 115, 90, 0,
	0, 0, 0, 0, 0, 519, 0, 75, 0, 106,
	0, 0, 0, 61, 58, 94, 0, 0, 0, 63,
	0, 76, 116, 0, 125, 91, 152, 128, 89, 88,
	131, 134, 123, 73, 81, 142, 79, 69, 126, 122,
	145, 0, 67, 68, 65, 66, 102, 103, 135, 136,
	137, 117, 62, 0, 0, 120, 105, 141, 0, 146,
	153, 149, 144, 151, 130, 119, 93, 132, 71, 85,
	140, 86, 87, 113, 59, 101, 148, 83, 0, 74,
	55, 80, 56, 72, 95, 143, 98, 70, 121, 104,
	138, 0, 108, 0, 150, 147, 0, 0, 97, 124,
	99, 118, 92, 114, 64, 107, 133, 84, 111, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 129, 82, 112, 54, 109, 0, 57, 60,
	139, 127, 77, 78, 0, 0, 0, 0, 0, 0,
	0, 96, 100, 115, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 106, 0, 0, 0, 61,
	58, 94, 0, 0, 0, 63, 0, 76, 116, 0,
	125, 91, 152, 128, 89, 88, 131, 134, 123, 73,
	81, 142, 79, 69, 126, 122, 145, 0, 67, 68,
	65, 66, 102, 103, 135, 136, 137, 117, 62, 0,
	0, 120, 105, 141, 0, 146, 153, 149, 144, 151,
	130, 119, 93, 132, 71, 85, 140, 86, 87, 113,
	59, 101, 148, 83, 0, 74, 55, 80, 56, 72,
	95, 143, 98, 70, 121, 104, 138, 0, 108, 0,
	150, 147, 0, 0, 97, 124, 99, 118, 92, 114,
	64, 107, 133, 84, 111, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 129, 82,
	112, 54, 109, 0, 57, 60, 139, 127, 77, 78,
	0, 0, 0, 0, 0, 0, 0, 96, 100, 115,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 106, 0, 0, 0, 61, 58, 94, 0, 0,
	0, 63, 0, 76, 116, 0, 125, 91, 152, 128,
	89, 88, 131, 134, 123, 73, 81, 142, 79, 69,
	126, 122, 145, 0, 67, 68, 65, 66, 102, 103,
	135, 136, 137, 117, 62, 0, 0, 120, 105, 141,
	0, 146, 153, 149, 144, 151, 130, 119, 93, 132,
	71, 85, 140, 86, 87, 113, 59, 101, 148, 83,
	0, 74, 55, 80, 56, 72, 95, 143, 98, 70,
	121, 104, 138, 0, 108, 0, 150, 147, 0, 0,
	97, 124, 99, 118, 92, 114, 64, 107, 133, 84,
	111, 0, 0, 0, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 129, 82, 112, 54, 109, 0,
	57, 60, 139, 127, 77, 78, 0, 0, 0, 0,
	0, 0, 0, 96, 100, 115, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 106, 0, 0,
	0, 61, 58, 94, 0, 0, 0, 63, 0, 76,
	116, 0, 125, 91, 152, 128, 89, 88, 131, 134,
	123, 73, 81, 142, 79, 69, 126, 122, 145, 0,
	67, 68, 65, 66, 102, 103, 135, 136, 137, 117,
	62, 0, 0, 120, 105, 141, 0, 146, 153, 149,
	144, 151, 130, 119, 93, 132, 71, 85, 140, 86,
	87, 113, 59, 101, 148, 83, 0, 74, 55, 80,
	56, 72, 95, 143, 98, 70, 121, 104, 138, 0,
	108, 0, 150, 147, 0, 0, 97, 124, 99, 118,
	92, 114, 64, 107, 133, 84, 111, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	129, 82, 112, 54, 109, 0, 57, 60, 139, 127,
	77, 78, 0, 0, 0, 0, 0, 0, 0, 96,
	100, 115, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 106, 0, 0, 0, 61, 58, 94,
	0, 0, 0, 63, 0, 76, 116, 0, 125, 91,
	152, 128, 89, 88, 131, 134, 123, 73, 81, 142,
	79, 69, 126, 122, 145, 0, 67, 68, 65, 66,
	102, 103, 135, 136, 137, 117, 62, 0, 0, 120,
	105, 141, 0, 146, 153, 149, 144, 151, 148, 0,
	0, 0, 0, 253, 0, 0, 0, 143, 0, 0,
	0, 0, 288, 0, 0, 0, 150, 147, 0, 0,
	0, 0, 281, 282, 0, 0, 0, 0, 0, 0,
	0, 214, 598, 0, 175, 271, 270, 272, 273, 274,
	275, 0, 0, 276, 268, 269, 0, 0, 250, 262,
	0, 287, 353, 352, 362, 363, 355, 356, 357, 358,
	359, 360, 361, 354, 0, 0, 364, 0, 0, 0,
	0, 259, 260, 321, 0, 0, 0, 299, 0, 261,
	0, 0, 258, 263, 0, 0, 15, 16, 17, 18,
	0, 0, 0, 0, 152, 0, 0, 297, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 145, 19,
	289, 298, 295, 296, 293, 294, 292, 291, 290, 300,
	283, 284, 286, 0, 285, 141, 0, 146, 153, 149,
	144, 151, 148, 0, 0, 0, 0, 253, 0, 0,
	0, 143, 0, 0, 0, 0, 288, 0, 0, 0,
	150, 147, 0, 0, 0, 0, 281, 282, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 434, 175, 271,
	270, 272, 273, 274, 275, 0, 0, 276, 268, 269,
	0, 0, 250, 262, 0, 287, 20, 21, 23, 22,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 25,
	26, 27, 0, 0, 0, 259, 260, 0, 0, 0,
	0, 299, 0, 261, 0, 0, 258, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 297, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 145, 0, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 283, 284, 286, 15, 285, 141,
	0, 146, 153, 149, 144, 151, 0, 0, 148, 0,
	0, 0, 0, 253, 0, 0, 0, 143, 0, 0,
	0, 0, 288, 0, 0, 0, 150, 147, 0, 0,
	0, 0, 281, 282, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 175, 271, 270, 272, 273, 274,
	275, 0, 0, 276, 268, 269, 0, 0, 250, 262,
	0, 287, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 259, 260, 0, 0, 150, 147, 299, 0, 261,
	0, 0, 258, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 152, 422, 0, 297, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 145, 0,
	289, 298, 295, 296, 293, 294, 292, 291, 290, 300,
	283, 284, 286, 0, 285, 141, 0, 146, 153, 149,
	144, 151, 148, 0, 0, 0, 0, 253, 0, 0,
	0, 143, 0, 0, 0, 0, 288, 0, 0, 0,
	150, 147, 0, 152, 0, 0, 281, 282, 0, 0,
	0, 0, 142, 0, 0, 214, 0, 145, 175, 271,
	270, 272, 273, 274, 275, 0, 0, 276, 268, 269,
	0, 0, 250, 262, 141, 287, 146, 153, 149, 144,
	151, 0, 0, 353, 352, 362, 363, 355, 356, 357,
	358, 359, 360, 361, 354, 259, 260, 364, 0, 0,
	0, 299, 0, 261, 0, 0, 258, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 297, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 145, 0, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 283, 284, 286, 148, 285, 141,
	0, 146, 153, 149, 144, 151, 143, 0, 0, 0,
	0, 288, 0, 0, 0, 150, 147, 0, 0, 0,
	0, 281, 282, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 175, 271, 270, 272, 273, 274, 275,
	0, 0, 276, 268, 269, 0, 0, 148, 262, 0,
	287, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 147, 0, 0, 0,
	259, 260, 0, 0, 0, 0, 299, 0, 261, 0,
	0, 258, 263, 167, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 297, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 145, 0, 289,
	298, 295, 296, 293, 294, 292, 291, 290, 300, 283,
	284, 286, 148, 285, 141, 0, 146, 153, 149, 144,
	151, 143, 0, 0, 0, 0, 288, 0, 0, 0,
	150, 147, 0, 152, 0, 0, 281, 282, 0, 0,
	0, 0, 142, 0, 0, 214, 0, 145, 175, 271,
	270, 272, 273, 274, 275, 0, 0, 276, 0, 0,
	0, 0, 0, 262, 141, 287, 146, 153, 149, 144,
	151, 148, 0, 0, 0, 0, 0, 0, 0, 195,
	143, 0, 0, 148, 0, 259, 260, 0, 0, 150,
	147, 299, 143, 261, 0, 0, 258, 263, 0, 0,
	0, 150, 147, 0, 0, 0, 0, 167, 152, 0,
	0, 297, 0, 0, 0, 0, 0, 142, 0, 175,
	0, 0, 145, 0, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 283, 284, 286, 148, 285, 141,
	0, 146, 153, 149, 144, 151, 143, 0, 0, 0,
	148, 0, 0, 0, 0, 150, 147, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 152, 150, 147,
	0, 0, 0, 217, 0, 0, 142, 0, 0, 152,
	0, 145, 0, 0, 0, 0, 167, 0, 142, 0,
	0, 0, 0, 145, 0, 0, 0, 544, 141, 0,
	146, 153, 149, 144, 151, 0, 0, 0, 0, 0,
	141, 0, 146, 153, 149, 144, 151, 353, 352, 362,
	363, 355, 356, 357, 358, 359, 360, 361, 354, 0,
	0, 364, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 152, 145, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	145, 0, 0, 0, 141, 0, 146, 153, 149, 144,
	151, 0, 0, 0, 0, 0, 348, 141, 351, 146,
	153, 149, 144, 151, 365, 366, 367, 368, 369, 370,
	371, 0, 349, 350, 347, 353, 352, 362, 363, 355,
	356, 357, 358, 359, 360, 361, 354, 0, 0, 364,
}
var yyPact = [...]int{

	2340, -1000, -112, 545, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-48, -41, 1, -34, -6, 2107, -1000, -1000, -1000, -1000,
	532, 467, 368, -1000, -47, 3033, 522, 2966, -45, -12,
	3033, -1000, -38, 3033, -1000, 3033, -46, 176, -46, 3033,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 414,
	-1000, -1000, 127, 2954, 437, 995, 53, -1000, -1000, 3033,
	245, -1000, 87, -1000, 31, -1000, -1000, 3033, 118, 164,
	1377, 3033, 1377, -33, 3033, 459, 309, 3033, -1000, -1000,
	321, 834, -1000, -1000, 370, 3033, -1000, 2966, 61, -1000,
	2820, -1000, -1000, 1961, 518, 2966, 2645, 1815, 1377, 455,
	-59, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 107,
	-1000, 3033, -1000, -1000, 3033, 1377, 2241, -1000, 479, -1000,
	428, 402, 443, 2966, 3020, -1000, 295, -1000, -29, -30,
	-32, -1000, -1000, -1000, -1000, 486, 2645, -1000, 100, -1000,
	2645, 3109, -1000, 223, -1000, 11, -1000, -1000, 2895, 2895,
	2895, 2895, 2895, 2895, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 223, 30, -1000,
	2511, 223, 223, 223, 223, 223, 223, 2645, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, -1000, 27, -1000, -1000, -1000, 308, 3020, -1000, -39,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 227,
	-1000, -1000, 717, 17, 3033, -1000, -1000, -1000, -1000, 306,
	223, 545, 216, 284, 16, 486, 223, 223, 223, 480,
	484, 100, 2645, 2645, 161, 76, 2770, 142, 191, 2895,
	2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895,
	2895, 2895, 2895, 2895, 9, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 532, 458, 458, 54, 54, 54, 54,
	54, 50, 1057, 1815, 217, 282, 100, 2241, 2241, 2645,
	2645, 3020, 468, 110, 100, 3020, -1000, 179, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2241, 2241, 2241, 2241, 1669,
	3033, -1000, -1000, 3033, -1000, 518, 2241, 783, -1000, -1000,
	2570, -1000, -1000, 1523, -1000, -1000, 446, 290, -1000, -1000,
	2375, -1000, -1000, 3020, -1000, 3020, 480, 3020, 3020, 3020,
	-1000, 2645, 2645, 76, 125, -1000, -1000, 192, -1000, -1000,
	-1000, 2637, -1000, -1000, -1000, -1000, 142, 2895, 2895, 2895,
	222, 2637, 3031, 1040, 914, 54, 153, 153, 64, 64,
	64, 64, 64, 32, 32, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 179, 2241, 286, 223, -1000, 2645, -1000,
	250, 250, 170, 278, 275, -1000, 2241, 147, -1000, 2645,
	179, -1000, 250, 179, 250, 250, -1000, 1377, -1000, 498,
	-1000, 280, 661, -1000, -1000, -1000, 461, 772, -1000, -1000,
	15, 444, 223, -1000, 14, -1000, -1000, 272, -1000, 272,
	272, 274, 277, -1000, 239, -1000, -1000, -1000, -1000, 222,
	2637, 2226, -1000, 2895, 2895, -1000, 250, 2241, 100, -1000,
	-1000, 9, 9, 9, -90, 3020, 247, 96, -1000, 2645,
	102, -1000, -1000, -1000, -1000, -1000, -1000, 496, 483, 783,
	783, 783, 783, -1000, 362, 361, -1000, 353, 352, 413,
	3033, -1000, 242, 1231, 529, -1000, 3020, -1000, 3020, -1000,
	-1000, 2645, 2645, 2645, -1000, -1000, -1000, -1000, 2895, 2637,
	2637, -1000, 179, 179, 51, 179, 179, 223, -1000, -84,
	-1000, 100, 2645, 486, 2645, 2645, 661, 241, 503, -1000,
	-1000, -1000, -1000, 351, -1000, 329, -1000, -1000, -1000, -1000,
	-1000, 2966, -1000, -1000, 100, 100, -1000, 2637, -1000, -1000,
	-1000, 139, -1000, 434, -1000, -1000, 2895, 179, 155, 100,
	480, 100, 269, 2645, 2645, -1000, -1000, 245, 235, 9,
	2, -1000, -1000, 426, 100, 100, 58, 133, -1000, 179,
	10, -98, -1000, 527, 29, -1000, 431, 179, -1000, 379,
	-93, -102, -1000, 395, 9, -1000, -1000, 371, -1000, 366,
	-1000, -95, -1000, -100, -104, -1000,
}
var yyPgo = [...]int{

	0, 676, 35, 675, 668, 666, 665, 663, 662, 661,
	660, 658, 657, 656, 507, 654, 650, 31, 649, 647,
	645, 644, 15, 37, 10, 22, 19, 642, 23, 24,
	14, 640, 633, 12, 631, 107, 630, 428, 629, 30,
	21, 628, 40, 627, 626, 28, 20, 625, 623, 621,
	620, 618, 617, 26, 8, 615, 16, 17, 614, 18,
	6, 605, 13, 602, 601, 600, 599, 2, 598, 3,
	593, 1, 584, 581, 580, 574, 32, 7, 38, 573,
	441, 359, 572, 571, 570, 569, 568, 34, 646, 259,
	11, 27, 566, 5, 29, 42, 561, 560, 33, 25,
	4, 9, 557, 556, 554, 551, 427, 0, 57,
}
var yyR1 = [...]int{

	0, 103, 104, 104, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	3, 4, 5, 6, 7, 7, 7, 8, 8, 8,
	9, 10, 10, 10, 11, 102, 102, 102, 12, 13,
	13, 105, 14, 15, 15, 16, 16, 16, 19, 19,
	19, 17, 17, 18, 18, 24, 24, 23, 23, 25,
	25, 25, 25, 92, 92, 92, 91, 91, 27, 27,
	28, 28, 29, 29, 30, 30, 30, 37, 31, 31,
	31, 31, 97, 97, 96, 96, 96, 95, 95, 32,
	32, 32, 32, 33, 33, 33, 33, 34, 34, 36,
	36, 35, 35, 38, 38, 38, 38, 39, 39, 40,
	40, 26, 26, 26, 26, 26, 26, 42, 42, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 52, 52, 52, 52, 52, 52, 43, 43, 43,
	43, 43, 43, 43, 22, 22, 53, 53, 53, 59,
	54, 54, 100, 100, 100, 100, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 50, 50, 50, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 49, 49, 49,
	49, 49, 49, 49, 49, 108, 108, 51, 51, 51,
	51, 20, 20, 20, 20, 20, 101, 101, 101, 101,
	101, 101, 101, 101, 63, 63, 21, 21, 61, 61,
	62, 64, 64, 60, 60, 60, 45, 45, 45, 45,
	45, 45, 45, 47, 47, 47, 65, 65, 66, 66,
	67, 67, 68, 68, 69, 70, 70, 70, 71, 71,
	71, 71, 72, 72, 72, 73, 73, 75, 75, 74,
	74, 74, 74, 76, 76, 44, 44, 55, 55, 57,
	57, 56, 58, 77, 77, 78, 79, 79, 81, 81,
	82, 82, 80, 80, 83, 83, 83, 83, 83, 83,
	84, 84, 85, 85, 86, 86, 89, 89, 90, 90,
	93, 93, 94, 94, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 106, 107, 98, 99, 99, 99,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 13, 7, 3, 7,
	7, 8, 7, 3, 5, 8, 4, 6, 7, 4,
	5, 4, 5, 5, 3, 1, 1, 1, 3, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 1, 1, 1,
	3, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 2, 4, 5,
	7, 2, 4, 6, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 1, 3, 0, 3, 1,
	3, 3, 5, 0, 5, 2, 1, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -103, -1, -2, -3, -4, -5, -6, -7, -8,
	-9, -10, -11, -12, -13, 6, 7, 8, 9, 29,
	106, 107, 109, 108, 110, 119, 120, 121, -104, 151,
	-16, 5, -14, -105, -14, -14, -14, -14, 111, -85,
	113, 117, -80, 113, 115, 111, 111, 112, 113, 111,
	-102, 53, -87, -88, 66, 21, 23, 69, 101, 15,
	70, 100, 139, 106, 45, 131, 132, 129, 130, 124,
	28, 9, 24, 120, 20, 94, 108, 73, 74, 123,
	22, 121, 64, 18, 48, 10, 12, 13, 116, 115,
	85, 112, 43, 7, 102, 25, 82, 39, 27, 41,
	83, 16, 133, 134, 30, 143, 96, 46, 33, 67,
	62, 49, 65, 14, 44, 84, 109, 138, 42, 6,
	142, 29, 126, 119, 40, 111, 125, 72, 114, 63,
	5, 117, 8, 47, 118, 135, 136, 137, 31, 71,
	11, 144, 122, 26, 149, 127, 146, 36, 17, 148,
	35, 150, 113, 147, -98, -98, -2, 19, 20, -19,
	37, 38, -15, -80, -37, -35, -93, 53, -88, 10,
	-77, -78, -60, -89, -93, 53, -88, -82, 116, 112,
	-35, 111, -35, -35, -81, 116, 53, -81, -35, -98,
	-17, 33, 20, 61, -36, 25, -35, 29, -96, -95,
	21, -93, 55, 103, -35, 51, 75, 103, -35, 67,
	53, -99, -106, -90, 50, -89, -87, 53, -88, -35,
	-99, 114, -35, 22, 49, -35, -18, 40, -47, -89,
	56, 59, -75, 29, -106, -35, -77, -38, 47, 115,
	48, -95, -94, -93, -87, -40, 11, -78, -26, -41,
	67, -46, -42, 22, -45, -60, -58, -59, 101, 90,
	91, 98, 68, 102, -50, -48, -49, -51, 63, 64,
	55, 54, 56, 57, 58, 59, 62, -89, -93, -56,
	-106, 41, 42, 139, 140, 143, 141, 70, 31, 129,
	137, 136, 135, 133, 134, 131, 132, 116, 130, 96,
	138, -90, -94, -87, -99, 22, -86, 118, -83, 109,
	107, 28, 108, 14, 150, 53, -35, -35, -99, -23,
	-25, 92, -26, -93, -79, 18, 10, 31, 31, -44,
	31, -2, -77, -74, -89, -40, 112, 112, 112, -67,
	14, -26, 66, 65, 82, -26, -43, 85, 67, 83,
	84, 69, 87, 86, 97, 90, 91, 92, 93, 94,
	95, 96, 88, 89, 100, 75, 76, 77, 78, 79,
	80, 81, -59, -106, 104, 105, -46, -46, -46, -46,
	-46, -46, -106, 103, -2, -54, -26, -106, -106, -106,
	-106, -106, -106, -63, -26, -106, -108, -106, -108, -108,
	-108, -108, -108, -108, -108, -106, -106, -106, -106, 103,
	49, -89, -98, -84, 114, -27, 51, 10, -92, -91,
	21, -89, 55, 103, -35, -76, 49, -55, -57, -56,
	-106, -76, -107, 51, 52, 103, -67, -106, -106, -106,
	-71, 16, 15, -26, -26, -52, 62, 67, 63, 64,
	-42, -46, -53, -56, -59, 60, 85, 83, 84, 69,
	-46, -46, -46, -46, -46, -46, -46, -46, -46, -46,
	-46, -46, -46, -46, -46, -100, 53, 55, 101, 122,
	-45, -45, -89, -24, 20, -23, -90, -107, 51, -107,
	-23, -23, -26, -26, -73, -89, -17, -61, -62, 71,
	-89, -107, -23, -24, -23, -23, -90, -35, -35, -40,
	-25, -28, -29, -30, -31, -37, -59, -106, -91, 92,
	-94, 26, 51, -107, -89, -89, -71, -39, -89, -39,
	-39, -26, -68, -69, -26, 62, 63, 64, -53, -46,
	-46, -46, -22, 123, 66, -107, -23, -106, -26, -107,
	-107, 51, 118, 21, -107, 51, -23, -64, -62, 73,
	-26, -107, -107, -107, -107, -107, -99, -65, 12, 51,
	-32, -33, -34, 39, 43, 45, 40, 41, 42, 46,
	-97, 21, -28, 103, 27, -57, 103, -107, 51, -107,
	-107, 51, 17, 51, -70, 23, 24, -22, 66, -46,
	-46, -107, -24, -101, -100, -101, -101, 144, -89, -67,
	74, -26, 72, -66, 13, 15, -29, -30, -29, -30,
	39, 39, 39, 44, 39, 44, 39, -33, -93, -107,
	92, 8, -89, -89, -26, -26, -69, -46, -107, -107,
	127, -106, -100, 128, -107, -107, -106, -21, 142, -26,
	-67, -26, -54, 49, 49, 39, 39, -77, 56, 29,
	-46, -107, 55, -71, -26, -26, -107, 51, -100, -20,
	85, 147, -72, 18, 30, -100, 128, 56, -107, 145,
	46, 148, 8, 85, 29, -107, 36, 146, 149, 35,
	-100, 36, 36, 147, 148, 149,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 41, 41, 41, 41, 41,
	302, 292, 0, 0, 0, 0, 416, 416, 1, 3,
	0, 45, 48, 43, 292, 0, 0, 0, 290, 0,
	0, 303, 0, 0, 293, 0, 288, 0, 288, 0,
	416, 35, 36, 37, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 412, 413, 39, 40, 18, 46, 47, 51,
	49, 50, 42, 0, 0, 84, 101, 310, 311, 0,
	23, 283, 0, 233, 0, -2, -2, 0, 0, 0,
	417, 0, 417, 0, 0, 0, 0, 0, 34, 38,
	53, 0, 52, 44, 267, 0, 100, 0, 103, 85,
	0, 87, 88, 0, 109, 0, 0, 0, 417, 0,
	304, 26, 418, 419, 414, 308, 309, 306, 307, 0,
	29, 0, 31, 289, 0, 417, 0, 54, 0, 243,
	0, 0, 0, 0, 0, 99, 109, 77, 0, 0,
	0, 86, 102, 312, 313, 250, 0, 284, 285, 111,
	0, 116, 119, 0, 156, 157, 158, 159, 0, 0,
	0, 0, 0, 0, 181, 182, 183, 184, 117, 118,
	236, 237, 238, 239, 240, 241, 242, 233, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 205,
	205, 205, 205, 205, 205, 205, 205, 0, 0, 0,
	0, 234, 0, -2, 24, 291, 0, 0, 416, 300,
	294, 295, 296, 297, 298, 299, 30, 32, 33, 68,
	57, 59, 63, 0, 0, 286, 287, 244, 245, 273,
	0, 276, 273, 0, 269, 250, 0, 0, 0, 258,
	0, 110, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 138, 139, 140, 141,
	142, 143, 130, 0, 0, 0, 175, 176, 177, 178,
	179, 0, 55, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 51, 0, 225, 0, 197, 0, 198, 199,
	200, 201, 202, 203, 204, 0, 55, 0, 0, 0,
	0, 305, 27, 0, 301, 109, 0, 0, 60, 64,
	0, 66, 67, 0, 17, 19, 0, 275, 277, 279,
	0, 20, 268, 0, 415, 0, 258, 0, 0, 0,
	22, 0, 0, 112, 113, 115, 131, 0, 133, 135,
	120, 121, 122, 146, 147, 148, 0, 0, 0, 0,
	144, 126, 0, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 174, 152, 153, 154, 155,
	172, 173, 180, 0, 0, 56, 234, 149, 0, 281,
	0, 0, 0, 0, 0, 265, 0, 231, 228, 0,
	0, 206, 0, 0, 0, 0, 235, 417, 28, 246,
	58, 69, 70, 72, 73, 74, 82, 0, 65, 61,
	0, 0, 0, 280, 271, 270, 21, 0, 107, 0,
	0, 259, 251, 252, 255, 132, 134, 136, 123, 144,
	127, 0, 124, 0, 0, 185, 0, 55, 151, 188,
	189, 0, 0, 0, 0, 0, 250, 0, 229, 0,
	0, 196, 207, 208, 209, 210, 25, 248, 0, 0,
	0, 0, 0, 89, 0, 0, 92, 0, 0, 0,
	0, 83, 0, 0, 0, 278, 0, 104, 0, 105,
	106, 0, 0, 0, 254, 256, 257, 125, 0, 145,
	128, 186, 0, 0, 216, 0, 0, 0, 266, 226,
	195, 232, 0, 250, 0, 0, 71, 78, 0, 81,
	90, 91, 93, 0, 95, 0, 97, 98, 75, 76,
	62, 0, 272, 108, 260, 261, 253, 129, 187, 190,
	217, 0, 221, 0, 191, 192, 0, 0, 0, 230,
	258, 249, 247, 0, 0, 94, 96, 274, 0, 0,
	211, 194, 227, 262, 79, 80, 218, 0, 222, 0,
	0, 0, 16, 0, 0, 219, 0, 0, 193, 0,
	0, 0, 263, 0, 0, 223, 212, 0, 215, 0,
	220, 213, 264, 0, 0, 214,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 151,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:202
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:207
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:208
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:212
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 16:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line sql.y:229
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), OrderBy: yyDollar[11].orderBy, Limit: yyDollar[12].limit, Lock: yyDollar[13].str}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:233
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:237
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:243
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:247
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:259
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:265
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:271
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:277
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:281
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:286
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:296
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:301
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:307
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:313
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:321
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:326
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:342
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:346
		{
			if string(yyDollar[1].bytes) == "databases" {
				yyVAL.str = ShowDatabasesStr
			} else if string(yyDollar[1].bytes) == "tables" {
				yyVAL.str = ShowTablesStr
			} else if string(yyDollar[1].bytes) == "vitess_shards" {
				yyVAL.str = ShowShardsStr
			} else {
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:358
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:364
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:370
		{
			yyVAL.statement = &Other{}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:374
		{
			yyVAL.statement = &Other{}
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:379
		{
			setAllowComments(yylex, true)
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:383
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:389
		{
			yyVAL.bytes2 = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:393
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
			yyVAL.str = UnionStr
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:403
		{
			yyVAL.str = UnionAllStr
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:407
		{
			yyVAL.str = UnionDistinctStr
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:412
		{
			yyVAL.str = ""
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:416
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:420
		{
			yyVAL.str = SQLCacheStr
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:425
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:429
		{
			yyVAL.str = DistinctStr
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:434
		{
			yyVAL.str = ""
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
			yyVAL.str = StraightJoinHint
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:443
		{
			yyVAL.selectExprs = nil
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:447
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:453
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:457
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:463
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:467
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:471
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:475
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:480
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:484
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:488
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:495
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:500
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:504
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:510
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:514
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:528
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:532
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:538
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:551
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:555
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:559
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:563
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:568
		{
			yyVAL.empty = struct{}{}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:570
		{
			yyVAL.empty = struct{}{}
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:573
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:577
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:581
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:588
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:594
		{
			yyVAL.str = JoinStr
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:598
		{
			yyVAL.str = JoinStr
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:602
		{
			yyVAL.str = JoinStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:606
		{
			yyVAL.str = StraightJoinStr
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:612
		{
			yyVAL.str = LeftJoinStr
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:616
		{
			yyVAL.str = LeftJoinStr
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:620
		{
			yyVAL.str = RightJoinStr
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:624
		{
			yyVAL.str = RightJoinStr
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:630
		{
			yyVAL.str = NaturalJoinStr
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:634
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:644
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:648
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:654
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:658
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:663
		{
			yyVAL.indexHints = nil
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:667
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:671
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:675
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:681
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:685
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:690
		{
			yyVAL.expr = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:694
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:704
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:708
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:712
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:716
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:720
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:726
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:730
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:740
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:744
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:748
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:752
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:756
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:760
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:764
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:768
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:772
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:776
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:780
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:786
		{
			yyVAL.str = IsNullStr
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:790
		{
			yyVAL.str = IsNotNullStr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:794
		{
			yyVAL.str = IsTrueStr
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:798
		{
			yyVAL.str = IsNotTrueStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.str = IsFalseStr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:806
		{
			yyVAL.str = IsNotFalseStr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:812
		{
			yyVAL.str = EqualStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:816
		{
			yyVAL.str = LessThanStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.str = GreaterThanStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.str = LessEqualStr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.str = GreaterEqualStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:832
		{
			yyVAL.str = NotEqualStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:836
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:841
		{
			yyVAL.expr = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:851
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:865
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:871
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:875
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:881
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:899
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:907
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:911
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:971
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:979
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1009
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 193:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 194:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.str = BooleanModeStr
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.str = QueryExpansionStr
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.expr = nil
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.str = string("")
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.expr = nil
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.expr = &NullVal{}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1295
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.exprs = nil
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.expr = nil
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.orderBy = nil
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.str = AscScr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.str = AscScr
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.str = DescScr
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.limit = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.str = ForUpdateStr
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.str = ShareModeStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.columns = nil
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.updateExprs = nil
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1482
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.byt = 0
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.byt = 1
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.empty = struct{}{}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.empty = struct{}{}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.str = IgnoreStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.empty = struct{}{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.empty = struct{}{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.empty = struct{}{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.empty = struct{}{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.empty = struct{}{}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.empty = struct{}{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.empty = struct{}{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1709
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1718
		{
			decNesting(yylex)
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1723
		{
			forceEOF(yylex)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1728
		{
			forceEOF(yylex)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1732
		{
			forceEOF(yylex)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
