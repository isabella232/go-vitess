//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	columnDefinitions []*ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const PRIMARY = 57444
const SHOW = 57445
const DESCRIBE = 57446
const EXPLAIN = 57447
const DATE = 57448
const ESCAPE = 57449
const REPAIR = 57450
const OPTIMIZE = 57451
const TRUNCATE = 57452
const BIT = 57453
const TINYINT = 57454
const SMALLINT = 57455
const MEDIUMINT = 57456
const INT = 57457
const INTEGER = 57458
const BIGINT = 57459
const INTNUM = 57460
const REAL = 57461
const DOUBLE = 57462
const FLOAT_TYPE = 57463
const DECIMAL = 57464
const NUMERIC = 57465
const TIME = 57466
const TIMESTAMP = 57467
const DATETIME = 57468
const YEAR = 57469
const CHAR = 57470
const VARCHAR = 57471
const BOOL = 57472
const CHARACTER = 57473
const VARBINARY = 57474
const NCHAR = 57475
const TEXT = 57476
const TINYTEXT = 57477
const MEDIUMTEXT = 57478
const LONGTEXT = 57479
const BLOB = 57480
const TINYBLOB = 57481
const MEDIUMBLOB = 57482
const LONGBLOB = 57483
const JSON = 57484
const NULLX = 57485
const AUTO_INCREMENT = 57486
const APPROXNUM = 57487
const SIGNED = 57488
const UNSIGNED = 57489
const ZEROFILL = 57490
const DATABASES = 57491
const TABLES = 57492
const VITESS_KEYSPACES = 57493
const VITESS_SHARDS = 57494
const VSCHEMA_TABLES = 57495
const CURRENT_TIMESTAMP = 57496
const DATABASE = 57497
const CURRENT_DATE = 57498
const CURRENT_TIME = 57499
const LOCALTIME = 57500
const LOCALTIMESTAMP = 57501
const UTC_DATE = 57502
const UTC_TIME = 57503
const UTC_TIMESTAMP = 57504
const REPLACE = 57505
const CONVERT = 57506
const CAST = 57507
const GROUP_CONCAT = 57508
const SEPARATOR = 57509
const MATCH = 57510
const AGAINST = 57511
const BOOLEAN = 57512
const LANGUAGE = 57513
const WITH = 57514
const QUERY = 57515
const EXPANSION = 57516
const UNUSED = 57517

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 221,
	103, 427,
	-2, 423,
	-1, 222,
	103, 428,
	-2, 424,
	-1, 445,
	5, 21,
	-2, 378,
	-1, 481,
	103, 430,
	-2, 426,
	-1, 590,
	5, 22,
	-2, 257,
	-1, 657,
	5, 22,
	-2, 379,
	-1, 743,
	5, 21,
	-2, 381,
	-1, 852,
	5, 22,
	-2, 382,
}

const yyPrivate = 57344

const yyLast = 4823

var yyAct = [...]int{

	222, 404, 754, 547, 578, 775, 753, 834, 787, 250,
	245, 599, 783, 272, 535, 216, 579, 345, 748, 720,
	343, 627, 542, 619, 59, 575, 512, 480, 545, 87,
	182, 239, 297, 190, 473, 559, 183, 57, 324, 3,
	323, 303, 248, 237, 327, 41, 206, 903, 199, 312,
	182, 182, 899, 42, 274, 182, 217, 902, 891, 901,
	898, 218, 733, 807, 347, 219, 46, 890, 184, 185,
	186, 187, 188, 227, 830, 189, 768, 494, 182, 861,
	182, 844, 205, 776, 182, 802, 48, 49, 50, 51,
	204, 492, 800, 86, 335, 876, 371, 370, 380, 381,
	373, 374, 375, 376, 377, 378, 379, 372, 763, 67,
	382, 487, 466, 468, 232, 224, 497, 636, 62, 78,
	721, 236, 351, 593, 75, 348, 592, 71, 66, 252,
	884, 359, 358, 228, 600, 334, 416, 77, 591, 78,
	608, 225, 723, 83, 79, 58, 610, 544, 360, 80,
	81, 82, 394, 395, 814, 792, 660, 55, 725, 631,
	729, 597, 724, 403, 722, 339, 231, 331, 870, 727,
	491, 493, 490, 835, 372, 382, 776, 382, 726, 209,
	467, 357, 728, 730, 637, 380, 381, 373, 374, 375,
	376, 377, 378, 379, 372, 242, 298, 382, 762, 877,
	761, 338, 336, 52, 182, 54, 360, 735, 889, 56,
	769, 182, 182, 638, 182, 61, 871, 70, 68, 72,
	885, 560, 883, 519, 182, 64, 358, 59, 341, 182,
	59, 609, 182, 607, 300, 182, 765, 517, 518, 516,
	346, 766, 360, 346, 495, 359, 358, 299, 363, 234,
	350, 828, 737, 359, 358, 496, 305, 359, 358, 612,
	613, 614, 360, 301, 396, 397, 398, 399, 400, 401,
	360, 560, 362, 643, 360, 39, 887, 886, 60, 405,
	65, 74, 69, 63, 73, 515, 414, 841, 840, 831,
	371, 370, 380, 381, 373, 374, 375, 376, 377, 378,
	379, 372, 847, 59, 382, 536, 361, 537, 182, 881,
	880, 182, 182, 182, 182, 869, 437, 874, 873, 218,
	359, 358, 182, 219, 859, 448, 182, 825, 620, 182,
	816, 238, 182, 433, 182, 182, 600, 360, 625, 238,
	209, 59, 478, 538, 434, 445, 342, 218, 233, 182,
	435, 219, 182, 346, 346, 182, 59, 479, 450, 470,
	452, 483, 502, 503, 464, 509, 510, 462, 463, 346,
	460, 670, 669, 469, 475, 511, 500, 392, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 449, 477, 451, 472, 896, 505, 507,
	508, 895, 59, 506, 481, 862, 863, 864, 431, 432,
	405, 238, 865, 554, 555, 541, 59, 346, 659, 238,
	513, 549, 418, 419, 420, 421, 422, 423, 424, 561,
	866, 550, 238, 298, 310, 238, 822, 539, 540, 550,
	209, 209, 209, 209, 43, 464, 652, 59, 551, 564,
	359, 358, 18, 218, 557, 209, 576, 219, 337, 577,
	584, 562, 567, 209, 474, 568, 474, 360, 481, 373,
	374, 375, 376, 377, 378, 379, 372, 742, 595, 382,
	18, 625, 337, 585, 872, 582, 655, 625, 59, 59,
	819, 711, 310, 625, 429, 514, 39, 39, 770, 580,
	788, 602, 346, 443, 310, 444, 337, 18, 590, 603,
	596, 371, 370, 380, 381, 373, 374, 375, 376, 377,
	378, 379, 372, 196, 39, 382, 604, 594, 616, 617,
	618, 371, 370, 380, 381, 373, 374, 375, 376, 377,
	378, 379, 372, 615, 309, 382, 784, 601, 59, 586,
	76, 39, 576, 354, 633, 552, 553, 457, 455, 556,
	441, 629, 458, 456, 644, 589, 310, 39, 16, 588,
	182, 513, 454, 563, 453, 565, 566, 314, 317, 318,
	319, 315, 622, 316, 320, 405, 623, 587, 574, 900,
	662, 663, 200, 201, 642, 897, 634, 635, 59, 203,
	639, 611, 182, 654, 501, 645, 182, 646, 647, 648,
	649, 346, 573, 194, 572, 668, 375, 376, 377, 378,
	379, 372, 836, 827, 382, 656, 657, 658, 667, 59,
	894, 712, 713, 264, 263, 265, 266, 267, 268, 661,
	710, 269, 629, 709, 304, 346, 514, 736, 893, 549,
	716, 273, 731, 182, 715, 719, 824, 302, 732, 718,
	59, 59, 823, 240, 740, 59, 59, 59, 714, 653,
	59, 485, 741, 745, 746, 241, 353, 322, 749, 749,
	749, 180, 758, 346, 750, 751, 738, 755, 777, 778,
	779, 624, 304, 739, 734, 747, 481, 743, 197, 198,
	191, 212, 212, 220, 850, 640, 212, 192, 59, 459,
	580, 318, 319, 43, 849, 789, 785, 786, 571, 810,
	474, 346, 791, 811, 356, 45, 570, 47, 790, 212,
	333, 212, 40, 1, 798, 212, 314, 317, 318, 319,
	315, 808, 316, 320, 857, 760, 752, 812, 598, 482,
	759, 882, 860, 764, 59, 829, 820, 767, 826, 673,
	674, 672, 676, 793, 794, 675, 671, 346, 84, 321,
	326, 755, 626, 486, 53, 803, 804, 832, 833, 606,
	605, 489, 209, 813, 223, 837, 838, 839, 390, 569,
	583, 430, 815, 59, 817, 818, 296, 580, 848, 809,
	641, 413, 843, 558, 251, 504, 346, 262, 259, 261,
	668, 260, 436, 442, 364, 59, 845, 59, 249, 243,
	59, 218, 59, 59, 856, 219, 855, 851, 853, 465,
	854, 208, 306, 346, 313, 346, 858, 755, 311, 755,
	867, 868, 275, 36, 214, 207, 651, 806, 875, 440,
	846, 19, 879, 878, 405, 212, 59, 852, 820, 44,
	202, 15, 212, 329, 14, 212, 13, 211, 12, 346,
	11, 10, 9, 755, 8, 212, 7, 6, 5, 36,
	212, 4, 59, 212, 193, 17, 212, 195, 771, 772,
	773, 774, 210, 2, 0, 892, 0, 0, 0, 0,
	0, 0, 780, 781, 782, 0, 0, 0, 0, 0,
	0, 0, 0, 18, 37, 20, 21, 0, 215, 888,
	0, 0, 226, 18, 0, 0, 0, 0, 0, 0,
	0, 30, 795, 796, 67, 797, 22, 0, 799, 0,
	801, 0, 0, 62, 0, 229, 0, 230, 0, 75,
	0, 235, 71, 66, 29, 0, 0, 39, 0, 212,
	0, 220, 212, 212, 212, 212, 0, 39, 0, 0,
	58, 0, 0, 461, 0, 0, 0, 212, 0, 0,
	329, 0, 0, 471, 0, 212, 212, 0, 0, 220,
	0, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 212, 0, 0, 212, 0, 0, 0,
	0, 0, 0, 23, 24, 26, 25, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 28, 31, 32,
	179, 0, 33, 34, 35, 0, 0, 0, 36, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 0, 325, 548, 471, 0, 0, 0, 548,
	548, 0, 0, 548, 0, 0, 0, 0, 0, 344,
	0, 308, 344, 0, 0, 0, 0, 548, 548, 548,
	548, 332, 0, 0, 0, 0, 0, 38, 0, 391,
	393, 340, 548, 0, 0, 220, 349, 0, 0, 352,
	0, 0, 355, 60, 0, 65, 74, 69, 63, 73,
	0, 0, 0, 0, 0, 402, 0, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 415, 417, 417, 417,
	417, 417, 417, 417, 417, 425, 426, 427, 428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 446,
	0, 0, 0, 210, 210, 210, 210, 370, 380, 381,
	373, 374, 375, 376, 377, 378, 379, 372, 325, 0,
	382, 0, 0, 0, 0, 447, 210, 0, 0, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 0, 0, 344, 0,
	18, 0, 476, 0, 0, 0, 0, 0, 0, 548,
	0, 67, 0, 0, 0, 0, 488, 0, 0, 498,
	62, 212, 499, 0, 0, 0, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 181, 0, 406,
	0, 0, 0, 212, 0, 67, 0, 212, 543, 0,
	247, 0, 0, 0, 62, 0, 246, 0, 0, 283,
	75, 0, 0, 71, 66, 0, 0, 548, 0, 276,
	277, 0, 0, 471, 548, 0, 0, 581, 39, 36,
	0, 221, 264, 263, 265, 266, 267, 268, 0, 0,
	269, 270, 271, 0, 212, 244, 257, 179, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 254, 255,
	546, 344, 0, 0, 294, 0, 256, 0, 0, 253,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 292, 0, 0, 0, 0, 0,
	0, 61, 0, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 621, 0, 0, 0, 0, 0, 0,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 0,
	0, 0, 632, 371, 370, 380, 381, 373, 374, 375,
	376, 377, 378, 379, 372, 0, 0, 382, 0, 284,
	293, 290, 291, 288, 289, 287, 286, 285, 295, 278,
	279, 281, 0, 280, 60, 0, 65, 74, 69, 63,
	73, 366, 0, 369, 664, 665, 666, 650, 0, 383,
	384, 385, 386, 387, 388, 389, 0, 367, 368, 365,
	371, 370, 380, 381, 373, 374, 375, 376, 377, 378,
	379, 372, 0, 220, 382, 0, 0, 0, 0, 707,
	0, 0, 0, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 581, 0,
	0, 744, 0, 168, 155, 129, 170, 107, 121, 178,
	122, 123, 149, 94, 137, 67, 119, 0, 110, 89,
	116, 90, 108, 131, 62, 134, 106, 157, 140, 176,
	75, 144, 0, 71, 66, 0, 0, 133, 162, 135,
	154, 128, 150, 100, 143, 171, 120, 147, 0, 0,
	344, 58, 0, 756, 757, 0, 0, 0, 0, 0,
	146, 167, 118, 148, 88, 145, 0, 92, 95, 177,
	165, 113, 114, 821, 0, 0, 805, 0, 0, 0,
	132, 136, 151, 126, 0, 581, 0, 36, 0, 0,
	0, 0, 111, 0, 142, 0, 0, 0, 97, 93,
	130, 0, 0, 0, 99, 0, 112, 152, 0, 163,
	127, 179, 166, 125, 124, 169, 172, 0, 161, 109,
	117, 61, 115, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 105, 164, 158, 159, 160, 103,
	104, 101, 102, 138, 139, 173, 174, 175, 153, 98,
	0, 0, 156, 141, 60, 0, 65, 74, 69, 63,
	73, 168, 155, 129, 170, 107, 121, 178, 122, 123,
	149, 94, 137, 67, 119, 0, 110, 89, 116, 90,
	108, 131, 62, 134, 106, 157, 140, 176, 75, 144,
	0, 71, 66, 0, 0, 133, 162, 135, 154, 128,
	150, 100, 143, 171, 120, 147, 0, 0, 0, 58,
	0, 756, 757, 0, 0, 0, 0, 0, 146, 167,
	118, 148, 88, 145, 0, 92, 95, 177, 165, 113,
	114, 0, 0, 0, 0, 0, 0, 0, 132, 136,
	151, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 142, 0, 0, 0, 97, 93, 130, 0,
	0, 0, 99, 0, 112, 152, 0, 163, 127, 179,
	166, 125, 124, 169, 172, 0, 161, 109, 117, 61,
	115, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 105, 164, 158, 159, 160, 103, 104, 101,
	102, 138, 139, 173, 174, 175, 153, 98, 0, 0,
	156, 141, 60, 0, 65, 74, 69, 63, 73, 168,
	155, 129, 170, 107, 121, 178, 122, 123, 149, 94,
	137, 67, 119, 0, 110, 89, 116, 90, 108, 131,
	62, 134, 106, 157, 140, 176, 75, 144, 0, 71,
	66, 0, 0, 133, 162, 135, 154, 128, 150, 100,
	143, 171, 120, 147, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 167, 118, 148,
	88, 145, 0, 92, 95, 177, 165, 113, 114, 0,
	0, 0, 0, 0, 0, 0, 132, 136, 151, 126,
	0, 0, 0, 0, 0, 0, 842, 0, 111, 0,
	142, 0, 0, 0, 97, 93, 130, 0, 0, 0,
	99, 0, 112, 152, 0, 163, 127, 179, 166, 125,
	124, 169, 172, 0, 161, 109, 117, 61, 115, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	105, 164, 158, 159, 160, 103, 104, 101, 102, 138,
	139, 173, 174, 175, 153, 98, 0, 0, 156, 141,
	60, 0, 65, 74, 69, 63, 73, 168, 155, 129,
	170, 107, 121, 178, 122, 123, 149, 94, 137, 67,
	119, 0, 110, 89, 116, 90, 108, 131, 62, 134,
	106, 157, 140, 176, 75, 144, 0, 71, 66, 0,
	0, 133, 162, 135, 154, 128, 150, 100, 143, 171,
	120, 147, 39, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 167, 118, 148, 88, 145,
	0, 92, 95, 177, 165, 113, 114, 0, 0, 0,
	0, 0, 0, 0, 132, 136, 151, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 142, 0,
	0, 0, 97, 93, 130, 0, 0, 0, 99, 0,
	112, 152, 0, 163, 127, 179, 166, 125, 124, 169,
	172, 0, 161, 109, 117, 61, 115, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 105, 164,
	158, 159, 160, 103, 104, 101, 102, 138, 139, 173,
	174, 175, 153, 98, 0, 0, 156, 141, 60, 0,
	65, 74, 69, 63, 73, 168, 155, 129, 170, 107,
	121, 178, 122, 123, 149, 94, 137, 67, 119, 0,
	110, 89, 116, 90, 108, 131, 62, 134, 106, 157,
	140, 176, 75, 144, 0, 71, 66, 0, 0, 133,
	162, 135, 154, 128, 150, 100, 143, 171, 120, 147,
	0, 0, 0, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 167, 118, 148, 88, 145, 0, 92,
	95, 177, 165, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 132, 136, 151, 126, 0, 0, 0, 0,
	0, 0, 717, 0, 111, 0, 142, 0, 0, 0,
	97, 93, 130, 0, 0, 0, 99, 0, 112, 152,
	0, 163, 127, 179, 166, 125, 124, 169, 172, 0,
	161, 109, 117, 61, 115, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 105, 164, 158, 159,
	160, 103, 104, 101, 102, 138, 139, 173, 174, 175,
	153, 98, 0, 0, 156, 141, 60, 0, 65, 74,
	69, 63, 73, 168, 155, 129, 170, 107, 121, 178,
	122, 123, 149, 94, 137, 67, 119, 0, 110, 89,
	116, 90, 108, 131, 62, 134, 106, 157, 140, 176,
	75, 144, 0, 71, 66, 0, 0, 133, 162, 135,
	154, 128, 150, 100, 143, 171, 120, 147, 484, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 167, 118, 148, 88, 145, 0, 92, 95, 177,
	165, 113, 114, 0, 0, 0, 0, 0, 0, 0,
	132, 136, 151, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 142, 0, 0, 0, 97, 93,
	130, 0, 0, 0, 99, 0, 112, 152, 0, 163,
	127, 179, 166, 125, 124, 169, 172, 0, 161, 109,
	117, 61, 115, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 105, 164, 158, 159, 160, 103,
	104, 101, 102, 138, 139, 173, 174, 175, 153, 98,
	0, 0, 156, 141, 60, 0, 65, 74, 69, 63,
	73, 168, 155, 129, 170, 107, 121, 178, 122, 123,
	149, 94, 137, 67, 119, 0, 110, 89, 116, 90,
	108, 131, 62, 134, 106, 157, 140, 176, 75, 144,
	0, 71, 66, 0, 0, 133, 162, 135, 154, 128,
	150, 100, 143, 171, 120, 147, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 167,
	118, 148, 88, 145, 0, 92, 95, 177, 165, 113,
	114, 0, 0, 0, 0, 0, 0, 0, 132, 136,
	151, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 142, 0, 0, 0, 97, 93, 130, 0,
	0, 0, 99, 0, 112, 152, 0, 163, 127, 179,
	166, 125, 124, 169, 172, 0, 161, 109, 117, 61,
	115, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 105, 164, 158, 159, 160, 103, 104, 101,
	102, 138, 139, 173, 174, 175, 153, 98, 0, 0,
	156, 141, 60, 0, 65, 74, 69, 63, 73, 168,
	155, 129, 170, 107, 121, 178, 122, 123, 149, 94,
	137, 67, 119, 0, 110, 89, 116, 90, 108, 131,
	62, 134, 106, 157, 140, 176, 75, 144, 0, 71,
	66, 0, 0, 133, 162, 135, 154, 128, 150, 100,
	143, 171, 120, 147, 0, 0, 0, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 167, 118, 148,
	88, 145, 0, 92, 95, 177, 165, 113, 114, 0,
	0, 0, 0, 0, 0, 0, 132, 136, 151, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	142, 0, 0, 0, 97, 93, 130, 0, 0, 0,
	99, 0, 112, 152, 0, 163, 127, 179, 166, 125,
	124, 169, 172, 0, 161, 109, 117, 61, 115, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	105, 164, 158, 159, 160, 103, 104, 101, 102, 138,
	139, 173, 174, 175, 153, 98, 0, 0, 156, 141,
	60, 0, 65, 74, 69, 63, 73, 168, 155, 129,
	170, 107, 121, 178, 122, 123, 149, 94, 137, 67,
	119, 0, 110, 89, 116, 90, 108, 131, 62, 134,
	106, 157, 140, 176, 75, 144, 0, 71, 66, 0,
	0, 133, 162, 135, 154, 128, 150, 100, 143, 171,
	120, 147, 0, 0, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 167, 118, 148, 88, 145,
	0, 92, 95, 177, 165, 113, 114, 0, 0, 0,
	0, 0, 0, 0, 132, 136, 151, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 142, 0,
	0, 0, 97, 93, 130, 0, 0, 0, 99, 0,
	112, 152, 0, 163, 127, 179, 166, 125, 124, 169,
	172, 0, 161, 109, 117, 61, 115, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 105, 164,
	158, 159, 160, 103, 104, 101, 102, 138, 139, 173,
	174, 175, 153, 98, 0, 0, 156, 141, 60, 0,
	65, 74, 69, 63, 73, 168, 155, 129, 170, 107,
	121, 178, 122, 123, 149, 94, 137, 67, 119, 0,
	110, 89, 116, 90, 108, 131, 62, 134, 106, 157,
	140, 176, 75, 144, 0, 71, 66, 0, 0, 133,
	162, 135, 154, 128, 150, 100, 143, 171, 120, 147,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 167, 118, 148, 88, 145, 0, 92,
	95, 177, 165, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 132, 136, 151, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 142, 0, 0, 0,
	97, 93, 130, 0, 0, 0, 99, 0, 112, 152,
	0, 163, 127, 179, 166, 125, 124, 169, 172, 0,
	161, 109, 117, 61, 115, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 105, 164, 158, 159,
	160, 103, 104, 101, 102, 138, 139, 173, 174, 175,
	153, 98, 0, 0, 156, 141, 60, 0, 65, 74,
	69, 63, 73, 67, 0, 0, 0, 0, 247, 0,
	0, 0, 62, 0, 246, 0, 0, 283, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 276, 277, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 221,
	264, 263, 265, 266, 267, 268, 0, 0, 269, 270,
	271, 0, 0, 244, 257, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 546, 0,
	0, 0, 294, 0, 256, 0, 0, 253, 258, 0,
	0, 0, 0, 679, 0, 0, 0, 0, 0, 179,
	0, 0, 292, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 690, 0, 0, 0, 64,
	695, 696, 697, 698, 699, 700, 701, 0, 702, 703,
	704, 705, 706, 691, 692, 693, 694, 677, 678, 0,
	0, 680, 0, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 0, 0, 0, 0, 0, 284, 293, 290,
	291, 288, 289, 287, 286, 285, 295, 278, 279, 281,
	0, 280, 60, 0, 65, 74, 69, 63, 73, 67,
	0, 0, 0, 0, 247, 0, 0, 0, 62, 0,
	246, 0, 0, 283, 75, 0, 0, 71, 66, 0,
	0, 0, 0, 276, 277, 0, 0, 0, 0, 0,
	0, 0, 39, 0, 238, 221, 264, 263, 265, 266,
	267, 268, 0, 0, 269, 270, 271, 0, 0, 244,
	257, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 0, 0, 0, 0, 294, 0,
	256, 0, 0, 253, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 292, 0,
	0, 0, 0, 0, 0, 61, 0, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 307, 62, 0, 0, 0, 0, 0, 75, 0,
	0, 71, 66, 284, 293, 290, 291, 288, 289, 287,
	286, 285, 295, 278, 279, 281, 18, 280, 60, 181,
	65, 74, 69, 63, 73, 0, 0, 67, 0, 0,
	0, 0, 247, 0, 0, 0, 62, 0, 246, 0,
	0, 283, 75, 0, 0, 71, 66, 0, 0, 0,
	0, 276, 277, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 221, 264, 263, 265, 266, 267, 268,
	0, 0, 269, 270, 271, 0, 0, 244, 257, 179,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	254, 255, 0, 0, 0, 0, 294, 0, 256, 0,
	0, 253, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 292, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 65, 74, 69, 63, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 293, 290, 291, 288, 289, 287, 286, 285,
	295, 278, 279, 281, 0, 280, 60, 0, 65, 74,
	69, 63, 73, 67, 0, 0, 0, 0, 247, 0,
	0, 0, 62, 0, 246, 0, 0, 283, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 276, 277, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 221,
	264, 263, 265, 266, 267, 268, 0, 0, 269, 270,
	271, 0, 0, 244, 257, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 0, 0,
	0, 0, 294, 0, 256, 0, 0, 253, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 292, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 293, 290,
	291, 288, 289, 287, 286, 285, 295, 278, 279, 281,
	67, 280, 60, 0, 65, 74, 69, 63, 73, 62,
	0, 0, 0, 0, 283, 75, 0, 0, 71, 66,
	0, 0, 0, 0, 276, 277, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 221, 264, 263, 265,
	266, 267, 268, 0, 0, 269, 270, 271, 0, 0,
	0, 257, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 255, 0, 0, 0, 0, 294,
	0, 256, 0, 0, 253, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 292,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 67, 0, 0, 0, 0, 64, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 284, 293, 290, 291, 288, 289,
	287, 286, 285, 295, 278, 279, 281, 0, 280, 60,
	0, 65, 74, 69, 63, 73, 0, 0, 0, 0,
	371, 370, 380, 381, 373, 374, 375, 376, 377, 378,
	379, 372, 0, 67, 382, 0, 0, 628, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 179, 75, 0,
	0, 71, 66, 0, 0, 67, 0, 61, 0, 70,
	68, 72, 0, 0, 62, 0, 0, 64, 0, 58,
	75, 630, 0, 71, 66, 0, 0, 0, 0, 0,
	0, 359, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 438, 0, 0, 439, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 179, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 61, 328, 70, 68, 72, 0, 62, 0, 0,
	0, 64, 0, 75, 0, 0, 71, 66, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 181, 75, 330, 0, 71, 66,
	0, 0, 60, 67, 65, 74, 69, 63, 73, 0,
	0, 0, 62, 39, 0, 0, 181, 0, 75, 0,
	0, 71, 66, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 630, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 70, 68, 72, 0,
	0, 0, 0, 0, 64, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 61, 0, 70, 68,
	72, 0, 0, 0, 62, 0, 64, 0, 0, 179,
	75, 0, 0, 71, 66, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 213, 64,
	0, 181, 0, 330, 0, 67, 0, 60, 0, 65,
	74, 69, 63, 73, 62, 0, 0, 0, 0, 0,
	75, 0, 0, 71, 66, 0, 0, 0, 0, 60,
	0, 65, 74, 69, 63, 73, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 60, 0, 65, 74, 69, 63, 73, 62,
	0, 179, 0, 0, 0, 75, 0, 0, 71, 66,
	0, 61, 0, 70, 68, 72, 67, 0, 0, 0,
	0, 64, 0, 0, 0, 62, 58, 67, 0, 0,
	0, 75, 0, 0, 71, 66, 62, 0, 0, 0,
	0, 179, 75, 0, 0, 71, 66, 0, 0, 0,
	0, 61, 221, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 179, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 61, 179, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 65, 74, 69, 63, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 65, 74, 69,
	63, 73, 0, 0, 0, 0, 60, 0, 65, 74,
	69, 63, 73,
}
var yyPact = [...]int{

	907, -1000, -148, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 699, 720, -1000, -1000,
	-1000, -1000, -1000, 92, 24, 33, 38, 32, 3190, 4630,
	-1000, -1000, -1000, -1000, -1000, -1000, 501, -1000, -1000, -1000,
	-1000, -1000, 684, 692, 517, 679, 555, -1000, 4, 4403,
	4548, 4619, -1, 29, 4630, -107, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 22, 4630, -1000, 4630,
	-2, 295, -2, 4630, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 359,
	645, 3896, 3896, 699, -1000, 501, -1000, -1000, -1000, 624,
	-1000, -1000, 195, 3676, 515, 697, -1000, -1000, -1000, 656,
	1194, 4381, 64, 4630, 84, -1000, 431, -1000, 126, -1000,
	62, -1000, -1000, 4630, 161, 293, 2062, 12, 4630, 2062,
	8, 4630, 654, 504, 4630, -1000, -1000, -1000, -1000, -1000,
	716, 96, 255, -1000, 3896, 1364, 447, 447, -1000, -1000,
	48, -1000, -1000, 4063, 4063, 4063, 4063, 4063, 4063, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 447, 60, -1000, 3720, 447, 447, 447, 447,
	447, 447, 3896, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 443, -1000, 385, 684,
	359, 555, 4278, 520, -1000, -1000, 474, 4630, -1000, 4619,
	4403, 4403, 4403, 4403, -1000, 535, 533, -1000, 519, 518,
	670, 4630, -1000, 383, 359, 1194, 65, -1000, 4508, -1000,
	-1000, 3002, 709, 4403, 4630, -1000, -1000, 4619, 3896, 2814,
	2438, 649, -7, -1000, -1000, -1000, -1000, -1000, 4630, 63,
	-1000, 4630, -1000, -1000, 4630, 2062, -1000, 569, 3896, 3896,
	336, 3896, 3896, 124, 4063, 225, 154, 4063, 4063, 4063,
	4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063,
	4063, 4063, 252, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 290, -1000, 501, 579, 579, 75, 75, 75, 75,
	75, 4174, 1238, 2814, 380, 188, 3720, 3366, 3366, 3896,
	3896, 3366, 672, 150, 188, 4593, -1000, 359, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3366, 3366, 3366, 3366, 3896,
	-1000, -1000, -1000, 645, -1000, 672, 708, -1000, 583, 581,
	3366, -1000, 503, 4619, 447, -1000, 917, -1000, 455, 697,
	500, 538, -1000, -1000, -1000, -1000, 530, -1000, 526, -1000,
	-1000, -1000, -1000, -1000, 359, -1000, 26, 14, 11, -1000,
	-1000, -1000, -1000, 699, 3896, 453, -1000, -1000, 188, -1000,
	58, -1000, -1000, -1000, 283, -1000, 498, 4593, 2062, -1000,
	119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 565, 124, 160, -1000, -1000, 197, -1000, -1000, 188,
	188, 445, -1000, -1000, -1000, -1000, 225, 4063, 4063, 4063,
	204, 445, 1307, 97, 1070, 75, 524, 524, 77, 77,
	77, 77, 77, 379, 379, -1000, -1000, -1000, 359, -1000,
	-1000, -1000, 359, 3366, 442, -1000, -1000, 4256, 56, 447,
	3896, -1000, 287, 287, 66, 192, 287, 3366, 200, -1000,
	3896, 359, -1000, 287, 359, 287, 287, -1000, -1000, 4630,
	-1000, -1000, -1000, -1000, 436, -1000, 643, 407, 435, -1000,
	-1000, 3542, 359, 367, 53, 699, 3896, 3896, -1000, -1000,
	-1000, 447, 447, 447, 684, 188, -1000, 2626, 320, -1000,
	3372, 4630, -1000, -1000, -1000, 4630, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 204, 445, 425, -1000,
	4063, 4063, -1000, -1000, 287, 3366, -1000, -1000, 4426, -1000,
	-1000, 2250, 3366, 188, -1000, -1000, 19, 252, 19, -124,
	430, 133, -1000, 3896, 180, -1000, -1000, -1000, -1000, -1000,
	-1000, 709, 4403, 637, -1000, 447, -1000, -1000, 446, 4593,
	4593, 684, 188, 188, 4593, 4593, 4593, -1000, -1000, 1686,
	81, 174, -88, -1000, -1000, 448, -1000, 448, 448, 448,
	448, -65, -65, -65, -65, -1000, -1000, -1000, -1000, -1000,
	-1000, 448, 448, 448, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 496, 496, 496, 450, 450, 2062, -1000, -1000,
	-1000, 4063, 445, 445, -1000, -1000, -1000, -1000, 52, 359,
	359, 448, 448, -1000, 448, 450, -1000, 448, -41, 448,
	-48, 359, 359, 447, -121, -1000, 188, 3896, 707, 441,
	715, -1000, 447, -1000, 501, 51, -1000, -1000, 279, -1000,
	279, 279, 439, 1498, -1000, -1000, -1000, -1000, -1000, -1000,
	386, 635, 629, 274, 595, -1000, 189, -91, -1000, -1000,
	233, -65, -65, -1000, -1000, 73, 593, 73, 73, 73,
	-1000, -1000, -1000, -1000, 232, -1000, -1000, -1000, 231, -1000,
	-1000, 445, 1874, -1000, -1000, -1000, 28, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4063, 359, 247, 188, 701,
	689, 4619, 435, 359, 4593, -1000, 4593, -1000, -1000, 1686,
	-1000, 1686, 4593, -1000, 271, -1000, -82, 350, -1000, -1000,
	-1000, 378, 73, 73, -1000, 262, 115, -1000, -1000, -1000,
	433, 266, -1000, -1000, -1000, 10, -1000, -1000, -1000, 3896,
	3896, 431, -1000, -1000, -1000, 1498, -1000, 258, -1000, -1000,
	103, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 221, -1000, 220, 359, 21, -132, 188, 388,
	-1000, 4593, -1000, 621, -1000, 603, 349, 345, -1000, 559,
	-128, -139, -1000, -1000, -1000, -1000, -1000, -1000, 553, -1000,
	-130, -133, -144, -1000,
}
var yyPgo = [...]int{

	0, 893, 38, 568, 885, 884, 881, 878, 877, 876,
	874, 872, 871, 870, 868, 866, 864, 861, 66, 860,
	859, 851, 41, 849, 48, 848, 847, 23, 147, 22,
	28, 3, 846, 40, 82, 46, 845, 844, 838, 49,
	834, 867, 832, 831, 829, 18, 34, 819, 818, 814,
	813, 42, 10, 812, 811, 809, 808, 807, 805, 26,
	1, 4, 54, 16, 804, 129, 9, 803, 35, 801,
	800, 799, 798, 53, 796, 32, 791, 33, 31, 790,
	25, 15, 56, 789, 550, 788, 166, 784, 781, 780,
	779, 774, 773, 64, 0, 13, 17, 21, 772, 651,
	27, 44, 770, 769, 36, 20, 14, 19, 768, 766,
	765, 762, 761, 760, 759, 210, 758, 5, 7, 757,
	755, 12, 8, 753, 752, 751, 11, 750, 749, 748,
	746, 6, 2, 745, 744, 733, 732, 842, 43, 730,
	727, 136,
}
var yyR1 = [...]int{

	0, 135, 136, 136, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 8, 139, 139, 37, 37, 9, 109, 109, 109,
	112, 112, 110, 110, 110, 110, 110, 110, 110, 111,
	111, 111, 111, 111, 113, 113, 113, 113, 113, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 115, 121, 121, 122, 122, 122, 119,
	119, 120, 120, 123, 123, 123, 116, 116, 116, 116,
	116, 124, 124, 117, 117, 117, 118, 118, 125, 125,
	125, 125, 125, 126, 127, 133, 133, 133, 134, 134,
	128, 129, 129, 129, 130, 130, 130, 131, 131, 131,
	132, 132, 132, 10, 10, 10, 10, 10, 11, 11,
	11, 11, 12, 13, 13, 13, 14, 108, 108, 108,
	15, 16, 17, 17, 17, 17, 17, 17, 140, 18,
	19, 19, 20, 20, 20, 24, 24, 24, 22, 22,
	23, 23, 29, 29, 28, 28, 30, 30, 30, 30,
	98, 98, 98, 97, 97, 32, 32, 33, 33, 34,
	34, 35, 35, 35, 43, 36, 36, 36, 36, 103,
	103, 102, 102, 102, 101, 101, 38, 38, 38, 38,
	39, 39, 39, 39, 40, 40, 42, 42, 41, 41,
	44, 44, 44, 44, 45, 45, 46, 46, 31, 31,
	31, 31, 31, 31, 31, 85, 85, 48, 48, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 58,
	58, 58, 58, 58, 58, 49, 49, 49, 49, 49,
	49, 49, 27, 27, 59, 59, 59, 65, 60, 60,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	56, 56, 56, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 55, 55, 55, 55, 55, 55, 55, 55,
	141, 141, 57, 57, 57, 57, 25, 25, 25, 25,
	25, 106, 106, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 69, 69, 26, 26,
	67, 67, 68, 70, 70, 66, 66, 66, 51, 51,
	51, 51, 51, 51, 51, 53, 53, 53, 71, 71,
	72, 72, 73, 73, 74, 74, 75, 76, 76, 76,
	77, 77, 77, 77, 78, 78, 78, 50, 50, 50,
	50, 50, 50, 79, 79, 79, 79, 80, 80, 61,
	61, 63, 63, 62, 64, 81, 81, 82, 83, 83,
	86, 86, 87, 87, 84, 84, 88, 88, 88, 88,
	88, 88, 88, 89, 89, 89, 90, 90, 91, 91,
	91, 92, 92, 95, 95, 96, 96, 99, 99, 100,
	100, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 137,
	138, 104, 105, 105, 105,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 6, 4, 2, 3, 2, 1, 3,
	4, 1, 3, 3, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 5, 5, 8, 4, 6, 6, 7,
	7, 4, 5, 4, 5, 5, 3, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 5, 5, 3, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 1, 3, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -135, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 106, 107, 109, 108, 110, 120, 47,
	24, 121, 122, 125, 126, 127, -137, 7, 180, 50,
	-136, 193, -73, 14, -20, 5, -18, -140, -18, -18,
	-18, -18, 111, -91, 113, 65, 117, -95, 53, -94,
	186, 123, 26, 191, 133, 188, 36, 17, 126, 190,
	125, 35, 127, 192, 189, 32, -84, 113, 115, 111,
	111, 112, 113, 111, -108, 53, -93, -94, 66, 21,
	23, 161, 69, 101, 15, 70, 148, 100, 181, 106,
	45, 173, 174, 171, 172, 166, 28, 9, 24, 121,
	20, 94, 108, 73, 74, 124, 22, 122, 64, 18,
	48, 10, 12, 13, 116, 115, 85, 112, 43, 7,
	102, 25, 82, 39, 27, 41, 83, 16, 175, 176,
	30, 185, 96, 46, 33, 67, 62, 49, 65, 14,
	44, 84, 109, 180, 42, 6, 184, 29, 168, 169,
	170, 120, 40, 111, 167, 72, 114, 63, 5, 117,
	8, 47, 118, 177, 178, 179, 31, 71, 11, 113,
	-99, 53, -94, -104, -104, -104, -104, -104, -104, -2,
	-77, 16, 15, -5, -3, -137, 6, 19, 20, -24,
	37, 38, -19, -84, -33, -34, -35, -36, -43, -65,
	-137, -41, -99, 10, -37, -41, -81, -82, -66, -95,
	-99, 53, -94, -87, 116, 112, -41, 180, 111, -41,
	-41, -86, 116, 53, -86, -41, -104, -138, 52, -78,
	18, 30, -31, -47, 67, -52, 28, 22, -51, -48,
	-66, -64, -65, 101, 90, 91, 98, 68, 102, -56,
	-54, -55, -57, 55, 54, 56, 57, 58, 59, 62,
	63, 64, -95, -99, -62, -137, 41, 42, 181, 182,
	185, 183, 70, 31, 171, 179, 178, 177, 175, 176,
	173, 174, 116, 172, 96, 180, -74, -75, -31, -73,
	-2, -18, 33, -22, 20, 61, -42, 25, -41, 29,
	51, -38, -39, -40, 39, 43, 45, 40, 41, 42,
	46, -103, 21, -33, -2, -137, -102, -101, 21, -99,
	55, 103, -41, -139, 51, 10, 118, 51, 75, 103,
	-41, 67, 53, -105, -137, -96, -95, -93, 113, -41,
	-105, 114, -41, 22, 49, -41, 8, 85, 66, 65,
	82, 51, 17, -31, -49, 85, 67, 83, 84, 69,
	87, 86, 97, 90, 91, 92, 93, 94, 95, 96,
	88, 89, 100, 75, 76, 77, 78, 79, 80, 81,
	-85, -137, -65, -137, 104, 105, -52, -52, -52, -52,
	-52, -52, -137, 103, -60, -31, -137, -137, -137, -137,
	-137, -137, -137, -69, -31, -137, -141, -137, -141, -141,
	-141, -141, -141, -141, -141, -137, -137, -137, -137, 51,
	-76, 23, 24, -77, -138, -24, -53, -95, 56, 59,
	-23, 40, -50, 29, 31, -2, -137, -41, -81, -34,
	-35, -34, -35, 39, 39, 39, 44, 39, 44, 39,
	-39, -99, -138, -138, -2, -44, 47, 115, 48, -101,
	-100, -99, -93, -46, 11, -33, -41, -82, -31, -96,
	-100, -93, -128, -105, 50, 22, -92, 118, -41, -88,
	109, 107, 28, 108, 14, 181, 192, 53, -41, -41,
	-105, 35, -31, -31, -58, 62, 67, 63, 64, -31,
	-31, -52, -59, -62, -65, 60, 85, 83, 84, 69,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -106, 53, 55, 53, -51,
	-51, -95, -29, 20, -28, -30, 92, -31, -99, -96,
	51, -138, -28, -28, -31, -31, -28, -22, -67, -68,
	71, -95, -138, -28, -29, -28, -28, -75, -78, -83,
	18, 10, 31, 31, -28, -80, 49, -81, -61, -63,
	-62, -137, -2, -79, -95, -46, 49, 49, 39, 39,
	-138, 112, 112, 112, -73, -31, -46, 103, -129, -126,
	53, 49, -95, -105, -104, -89, -90, 114, 21, 112,
	27, 36, 62, 63, 64, -59, -52, -52, -52, -27,
	124, 66, -138, -138, -28, 51, -98, -97, 21, -95,
	55, 103, -137, -31, -138, -138, 51, 118, 21, -138,
	-28, -70, -68, 73, -31, -138, -138, -138, -138, -138,
	-41, -32, 10, 26, -80, 51, -138, -138, -138, 51,
	103, -73, -31, -31, -137, -137, -137, -77, -96, 52,
	51, -109, -112, -114, -113, -110, -111, 145, 146, 101,
	149, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	123, 141, 142, 143, 144, 128, 129, 130, 131, 132,
	133, 134, 136, 137, 138, 139, 140, -41, -41, -104,
	-27, 66, -52, -52, -138, -30, -97, 92, -100, -29,
	-107, 101, 145, 123, 143, 139, 159, 150, 163, 141,
	164, -106, -107, 186, -73, 74, -31, 72, -46, -33,
	27, -63, 31, -2, -137, -95, -95, -77, -45, -95,
	-45, -45, -130, -131, -132, -96, 55, 56, -126, -127,
	-133, 119, 117, 27, -123, 62, 67, -119, 164, -115,
	50, -115, -115, -115, -115, -117, 148, -117, -117, -117,
	-115, -115, -115, -121, 50, -121, -121, -122, 50, -122,
	-105, -52, 103, -138, -138, -115, -115, -115, -122, -115,
	133, -115, 133, -138, -138, -137, -26, 184, -31, -71,
	12, 8, -61, -2, 103, -138, 51, -138, -138, 51,
	-132, 75, 50, 27, 27, 53, -116, 28, 62, -120,
	165, 56, -117, -117, -118, 100, 29, -118, -118, -118,
	56, 56, 92, -117, 53, -52, -138, 55, -72, 13,
	15, -81, -138, -95, -95, -131, -132, -134, -95, 53,
	-124, 161, 55, 56, 57, 62, 52, -118, -118, 53,
	53, 101, 51, 52, 51, -25, 85, 189, -31, -60,
	52, 51, -125, 119, 27, 117, 56, 56, -138, 187,
	46, 190, -95, 27, 27, 52, 52, 36, 188, 191,
	36, 189, 190, 191,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 362, 0, 148, 148,
	148, 148, 148, 418, 404, 0, 0, 0, 0, 0,
	541, 541, 541, 541, 541, 541, 0, 27, 28, 539,
	1, 3, 370, 0, 0, 152, 155, 150, 404, 0,
	0, 0, 402, 0, 536, 0, 419, 420, 423, 424,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 537, 538, 0, 0, 405, 0,
	400, 0, 400, 0, 541, 137, 138, 139, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 459, 460, 461, 462,
	463, 464, 465, 466, 467, 468, 469, 470, 471, 472,
	473, 474, 475, 476, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 536,
	141, 427, 428, 142, 143, 144, 145, 146, 147, 21,
	374, 0, 0, 362, 23, 0, 148, 153, 154, 158,
	156, 157, 149, 0, 0, 177, 179, 180, 181, 189,
	0, 191, 208, 0, 0, 34, 36, 395, 0, 345,
	0, -2, -2, 0, 0, 0, 542, 0, 0, 542,
	0, 0, 0, 0, 0, 136, 140, 22, 540, 17,
	0, 0, 371, 218, 0, 223, 225, 0, 260, 261,
	262, 263, 264, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 289, 348, 349, 350, 351, 352, 353, 354,
	227, 228, 345, 0, 394, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 310, 310, 310, 310, 310, 310,
	310, 310, 0, 0, 0, 0, 363, 364, 367, 370,
	21, 155, 0, 160, 159, 151, 0, 0, 207, 0,
	0, 0, 0, 0, 196, 0, 0, 199, 0, 0,
	0, 0, 190, 0, 21, 0, 210, 192, 0, 194,
	195, 0, 216, 0, 0, 32, 33, 0, 0, 0,
	542, 0, 421, 126, 543, 544, 425, 426, 0, 0,
	131, 0, 133, 401, 0, 542, 375, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	224, 0, 238, 0, 0, 0, 280, 281, 282, 283,
	284, 0, 162, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 158, 0, 337, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 162, 0, 0, 0,
	366, 368, 369, 374, 24, 158, 0, 355, 0, 0,
	0, 161, 387, 0, 0, -2, 0, 206, 216, 178,
	185, 0, 188, 197, 198, 200, 0, 202, 0, 204,
	205, 182, 183, 257, 21, 184, 0, 0, 0, 193,
	209, 429, 430, 362, 0, 216, 35, 396, 397, 346,
	0, -2, 123, 124, 539, 403, 0, 0, 542, 541,
	413, 406, 407, 408, 409, 410, 411, 412, 132, 134,
	135, 0, 219, 220, 222, 239, 0, 241, 243, 372,
	373, 229, 230, 254, 255, 256, 0, 0, 0, 0,
	252, 234, 0, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 279, 321, 322, 0, 277,
	278, 285, 0, 0, 163, 164, 166, 170, 0, 346,
	0, 393, 0, 0, 0, 0, 0, 0, 343, 340,
	0, 0, 311, 0, 0, 0, 0, 365, 18, 0,
	398, 399, 356, 357, 175, 25, 0, 387, 377, 389,
	391, 0, 21, 0, 383, 362, 0, 0, 201, 203,
	-2, 0, 0, 0, 370, 217, 31, 0, 0, 111,
	0, 0, 422, 127, 128, 0, 541, 414, 415, 416,
	417, 376, 240, 242, 244, 231, 252, 235, 0, 232,
	0, 0, 226, 290, 0, 0, 167, 171, 0, 173,
	174, 0, 162, 259, 293, 294, 0, 0, 0, 0,
	362, 0, 341, 0, 0, 301, 312, 313, 314, 315,
	19, 216, 0, 0, 26, 0, 392, -2, 0, 0,
	0, 370, 186, 187, 0, 0, 0, 30, 347, 114,
	0, 83, 79, 38, 39, 72, 41, 72, 72, 72,
	72, 93, 93, 93, 93, 67, 68, 69, 70, 71,
	54, 72, 72, 72, 58, 42, 43, 44, 45, 46,
	47, 48, 74, 74, 74, 76, 76, 542, 129, 130,
	233, 0, 253, 236, 291, 165, 172, 168, 0, 0,
	0, 72, 72, 326, 72, 76, 329, 72, 331, 72,
	334, 0, 0, 0, 338, 300, 344, 0, 358, 176,
	0, 390, 0, -2, 0, 385, 384, 29, 0, 214,
	0, 0, 110, 115, 117, 120, 121, 122, 112, 113,
	0, 0, 0, 0, 86, 84, 0, 81, 80, 40,
	0, 93, 93, 61, 62, 96, 0, 96, 96, 96,
	55, 56, 57, 49, 0, 50, 51, 52, 0, 53,
	125, 237, 0, 292, 295, 323, 93, 327, 328, 330,
	332, 333, 335, 297, 296, 0, 0, 0, 342, 360,
	0, 0, 380, 21, 0, 211, 0, 212, 213, 0,
	118, 0, 0, 105, 0, 107, 91, 0, 85, 37,
	82, 0, 96, 96, 63, 0, 0, 64, 65, 66,
	0, 0, 169, 324, 325, 316, 299, 339, 20, 0,
	0, 388, -2, 386, 215, 116, 119, 0, 108, 106,
	98, 92, 87, 88, 89, 90, 73, 59, 60, 97,
	94, 95, 0, 77, 0, 0, 0, 0, 361, 359,
	104, 0, 103, 0, 100, 102, 0, 0, 298, 0,
	0, 0, 109, 99, 101, 75, 78, 317, 0, 320,
	318, 0, 0, 319,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 193,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:248
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:253
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:254
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:258
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:276
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:284
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:288
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:295
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:301
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:305
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:311
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:315
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:322
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:333
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:345
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:349
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:355
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:361
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:365
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:370
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:371
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:375
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:379
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:385
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:391
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:401
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:412
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:416
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:420
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:424
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:428
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:432
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:504
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:508
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:549
		{
			yyVAL.optVal = nil
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:553
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:558
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:562
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:570
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:574
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:580
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:588
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:607
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:611
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:620
		{
			yyVAL.optVal = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:624
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:628
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:632
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:636
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:641
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:650
		{
			yyVAL.str = ""
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:654
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:658
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:663
		{
			yyVAL.str = ""
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:667
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:672
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:676
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:684
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:694
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:704
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].columns}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:710
		{
			yyVAL.indexInfo = &IndexInfo{Primary: true}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:714
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:718
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:724
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:734
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:741
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:746
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:750
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:755
		{
			yyVAL.str = ""
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:759
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:763
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.str = yyDollar[1].str
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:779
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:785
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:789
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:799
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName, TableSpec: yyDollar[5].TableSpec}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:803
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:807
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:812
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:816
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:822
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 129:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:826
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 130:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:831
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:836
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:842
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:848
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:856
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:861
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:871
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:877
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:881
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:896
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:908
		{
			yyVAL.statement = &OtherRead{}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:912
		{
			yyVAL.statement = &OtherRead{}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:916
		{
			yyVAL.statement = &OtherRead{}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:920
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:924
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:928
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:933
		{
			setAllowComments(yylex, true)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:937
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:943
		{
			yyVAL.bytes2 = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:947
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:953
		{
			yyVAL.str = UnionStr
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:957
		{
			yyVAL.str = UnionAllStr
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:961
		{
			yyVAL.str = UnionDistinctStr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:966
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:970
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.str = SQLCacheStr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:979
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:983
		{
			yyVAL.str = DistinctStr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:988
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:992
		{
			yyVAL.str = StraightJoinHint
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:997
		{
			yyVAL.selectExprs = nil
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.empty = struct{}{}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.empty = struct{}{}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = JoinStr
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = JoinStr
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = JoinStr
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.str = StraightJoinStr
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.str = LeftJoinStr
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.str = LeftJoinStr
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.str = RightJoinStr
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.str = RightJoinStr
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.str = NaturalJoinStr
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1188
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.indexHints = nil
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.expr = nil
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.str = ""
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.str = IsNullStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.str = IsNotNullStr
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.str = IsTrueStr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.str = IsNotTrueStr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.str = IsFalseStr
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.str = IsNotFalseStr
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.str = EqualStr
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.str = LessThanStr
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.str = GreaterThanStr
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.str = LessEqualStr
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.str = GreaterEqualStr
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.str = NotEqualStr
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.expr = nil
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1525
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1533
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1555
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 298:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 299:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.str = BooleanModeStr
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.str = QueryExpansionStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.expr = nil
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.str = string("")
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = nil
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.expr = &NullVal{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.exprs = nil
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = nil
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.orderBy = nil
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.str = AscScr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.str = AscScr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.str = DescScr
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.limit = nil
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.str = ""
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.str = ForUpdateStr
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.str = ShareModeStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1992
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2005
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.updateExprs = nil
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.byt = 0
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.byt = 1
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.empty = struct{}{}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.empty = struct{}{}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.str = IgnoreStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.empty = struct{}{}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.empty = struct{}{}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.empty = struct{}{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.empty = struct{}{}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.empty = struct{}{}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.empty = struct{}{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.empty = struct{}{}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.empty = struct{}{}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.empty = struct{}{}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.empty = struct{}{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.empty = struct{}{}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.empty = struct{}{}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.empty = struct{}{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.empty = struct{}{}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2321
		{
			decNesting(yylex)
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2326
		{
			forceEOF(yylex)
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2331
		{
			forceEOF(yylex)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2335
		{
			forceEOF(yylex)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
