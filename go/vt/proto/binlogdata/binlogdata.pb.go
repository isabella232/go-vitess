// Code generated by protoc-gen-go.
// source: binlogdata.proto
// DO NOT EDIT!

/*
Package binlogdata is a generated protocol buffer package.

It is generated from these files:
	binlogdata.proto

It has these top-level messages:
	Charset
	BinlogTransaction
	StreamUpdateRequest
	StreamUpdateResponse
	StreamKeyRangeRequest
	StreamKeyRangeResponse
	StreamTablesRequest
	StreamTablesResponse
*/
package binlogdata

import proto "github.com/golang/protobuf/proto"
import topodata "github.com/youtube/vitess/go/vt/proto/topodata"
import replicationdata "github.com/youtube/vitess/go/vt/proto/replicationdata"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type BinlogTransaction_Statement_Category int32

const (
	BinlogTransaction_Statement_BL_UNRECOGNIZED BinlogTransaction_Statement_Category = 0
	BinlogTransaction_Statement_BL_BEGIN        BinlogTransaction_Statement_Category = 1
	BinlogTransaction_Statement_BL_COMMIT       BinlogTransaction_Statement_Category = 2
	BinlogTransaction_Statement_BL_ROLLBACK     BinlogTransaction_Statement_Category = 3
	BinlogTransaction_Statement_BL_DML          BinlogTransaction_Statement_Category = 4
	BinlogTransaction_Statement_BL_DDL          BinlogTransaction_Statement_Category = 5
	BinlogTransaction_Statement_BL_SET          BinlogTransaction_Statement_Category = 6
)

var BinlogTransaction_Statement_Category_name = map[int32]string{
	0: "BL_UNRECOGNIZED",
	1: "BL_BEGIN",
	2: "BL_COMMIT",
	3: "BL_ROLLBACK",
	4: "BL_DML",
	5: "BL_DDL",
	6: "BL_SET",
}
var BinlogTransaction_Statement_Category_value = map[string]int32{
	"BL_UNRECOGNIZED": 0,
	"BL_BEGIN":        1,
	"BL_COMMIT":       2,
	"BL_ROLLBACK":     3,
	"BL_DML":          4,
	"BL_DDL":          5,
	"BL_SET":          6,
}

func (x BinlogTransaction_Statement_Category) String() string {
	return proto.EnumName(BinlogTransaction_Statement_Category_name, int32(x))
}

// Charset is the per-statement charset info from a QUERY_EVENT binlog entry.
type Charset struct {
	// @@session.character_set_client
	Client int32 `protobuf:"varint,1,opt,name=client" json:"client,omitempty"`
	// @@session.collation_connection
	Conn int32 `protobuf:"varint,2,opt,name=conn" json:"conn,omitempty"`
	// @@session.collation_server
	Server int32 `protobuf:"varint,3,opt,name=server" json:"server,omitempty"`
}

func (m *Charset) Reset()         { *m = Charset{} }
func (m *Charset) String() string { return proto.CompactTextString(m) }
func (*Charset) ProtoMessage()    {}

// BinlogTransaction describes a transaction inside the binlogs.
type BinlogTransaction struct {
	// the statements in this transaction
	Statements []*BinlogTransaction_Statement `protobuf:"bytes,1,rep,name=statements" json:"statements,omitempty"`
	// the timestamp of the statements
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// the Global Transaction ID after the statements have been applied
	Gtid string `protobuf:"bytes,3,opt,name=gtid" json:"gtid,omitempty"`
}

func (m *BinlogTransaction) Reset()         { *m = BinlogTransaction{} }
func (m *BinlogTransaction) String() string { return proto.CompactTextString(m) }
func (*BinlogTransaction) ProtoMessage()    {}

func (m *BinlogTransaction) GetStatements() []*BinlogTransaction_Statement {
	if m != nil {
		return m.Statements
	}
	return nil
}

type BinlogTransaction_Statement struct {
	// what type of statement is this?
	Category BinlogTransaction_Statement_Category `protobuf:"varint,1,opt,name=category,enum=binlogdata.BinlogTransaction_Statement_Category" json:"category,omitempty"`
	// charset of this statement, if different from pre-negotiated default.
	Charset *Charset `protobuf:"bytes,3,opt,name=charset" json:"charset,omitempty"`
	// the sql
	Sql []byte `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (m *BinlogTransaction_Statement) Reset()         { *m = BinlogTransaction_Statement{} }
func (m *BinlogTransaction_Statement) String() string { return proto.CompactTextString(m) }
func (*BinlogTransaction_Statement) ProtoMessage()    {}

func (m *BinlogTransaction_Statement) GetCharset() *Charset {
	if m != nil {
		return m.Charset
	}
	return nil
}

// StreamUpdateRequest is the payload to StreamUpdate
type StreamUpdateRequest struct {
	// where to start
	Position *replicationdata.Position `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
}

func (m *StreamUpdateRequest) Reset()         { *m = StreamUpdateRequest{} }
func (m *StreamUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*StreamUpdateRequest) ProtoMessage()    {}

func (m *StreamUpdateRequest) GetPosition() *replicationdata.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

// StreamUpdateResponse is the response from StreamUpdate
type StreamUpdateResponse struct {
}

func (m *StreamUpdateResponse) Reset()         { *m = StreamUpdateResponse{} }
func (m *StreamUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*StreamUpdateResponse) ProtoMessage()    {}

// StreamKeyRangeRequest is the payload to StreamKeyRange
type StreamKeyRangeRequest struct {
	// where to start
	Position *replicationdata.Position `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	// type to get
	KeyspaceIdType topodata.KeyspaceIdType `protobuf:"varint,2,opt,name=keyspace_id_type,enum=topodata.KeyspaceIdType" json:"keyspace_id_type,omitempty"`
	// what to get
	KeyRange *topodata.KeyRange `protobuf:"bytes,3,opt,name=key_range" json:"key_range,omitempty"`
	// default charset on the player side
	Charset *Charset `protobuf:"bytes,4,opt,name=charset" json:"charset,omitempty"`
}

func (m *StreamKeyRangeRequest) Reset()         { *m = StreamKeyRangeRequest{} }
func (m *StreamKeyRangeRequest) String() string { return proto.CompactTextString(m) }
func (*StreamKeyRangeRequest) ProtoMessage()    {}

func (m *StreamKeyRangeRequest) GetPosition() *replicationdata.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *StreamKeyRangeRequest) GetKeyRange() *topodata.KeyRange {
	if m != nil {
		return m.KeyRange
	}
	return nil
}

func (m *StreamKeyRangeRequest) GetCharset() *Charset {
	if m != nil {
		return m.Charset
	}
	return nil
}

// StreamKeyRangeResponse is the response from StreamKeyRange
type StreamKeyRangeResponse struct {
	BinlogTransaction *BinlogTransaction `protobuf:"bytes,1,opt,name=binlog_transaction" json:"binlog_transaction,omitempty"`
}

func (m *StreamKeyRangeResponse) Reset()         { *m = StreamKeyRangeResponse{} }
func (m *StreamKeyRangeResponse) String() string { return proto.CompactTextString(m) }
func (*StreamKeyRangeResponse) ProtoMessage()    {}

func (m *StreamKeyRangeResponse) GetBinlogTransaction() *BinlogTransaction {
	if m != nil {
		return m.BinlogTransaction
	}
	return nil
}

// StreamTablesRequest is the payload to StreamTables
type StreamTablesRequest struct {
	// where to start
	Position *replicationdata.Position `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	// what to get
	Tables []string `protobuf:"bytes,2,rep,name=tables" json:"tables,omitempty"`
	// default charset on the player side
	Charset *Charset `protobuf:"bytes,3,opt,name=charset" json:"charset,omitempty"`
}

func (m *StreamTablesRequest) Reset()         { *m = StreamTablesRequest{} }
func (m *StreamTablesRequest) String() string { return proto.CompactTextString(m) }
func (*StreamTablesRequest) ProtoMessage()    {}

func (m *StreamTablesRequest) GetPosition() *replicationdata.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *StreamTablesRequest) GetCharset() *Charset {
	if m != nil {
		return m.Charset
	}
	return nil
}

// StreamTablesResponse is the response from StreamTables
type StreamTablesResponse struct {
	BinlogTransaction *BinlogTransaction `protobuf:"bytes,1,opt,name=binlog_transaction" json:"binlog_transaction,omitempty"`
}

func (m *StreamTablesResponse) Reset()         { *m = StreamTablesResponse{} }
func (m *StreamTablesResponse) String() string { return proto.CompactTextString(m) }
func (*StreamTablesResponse) ProtoMessage()    {}

func (m *StreamTablesResponse) GetBinlogTransaction() *BinlogTransaction {
	if m != nil {
		return m.BinlogTransaction
	}
	return nil
}

func init() {
	proto.RegisterEnum("binlogdata.BinlogTransaction_Statement_Category", BinlogTransaction_Statement_Category_name, BinlogTransaction_Statement_Category_value)
}
