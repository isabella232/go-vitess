// Code generated by protoc-gen-go.
// source: vtrpc.proto
// DO NOT EDIT!

/*
Package vtrpc is a generated protocol buffer package.

It is generated from these files:
	vtrpc.proto

It has these top-level messages:
	CallerID
	RPCError
*/
package vtrpc

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// ErrorCode is the enum values for Errors
type ErrorCode int32

const (
	// NoError means there was no error, and the message should be ignored.
	ErrorCode_NoError ErrorCode = 0
	// TabletError is the base VtTablet error. All VtTablet errors
	// should be 4 digits, starting with 1.
	ErrorCode_TabletError ErrorCode = 1000
	// UnknownTabletError is the code for an unknown error that came
	// from VtTablet.
	ErrorCode_UnknownTabletError ErrorCode = 1999
	// VtgateError is the base VTGate error code. All VTGate errors
	// should be 4 digits, starting with 2.
	ErrorCode_VtgateError ErrorCode = 2000
	// UnknownVtgateError is the code for an unknown error that came from VTGate.
	ErrorCode_UnknownVtgateError ErrorCode = 2999
)

var ErrorCode_name = map[int32]string{
	0:    "NoError",
	1000: "TabletError",
	1999: "UnknownTabletError",
	2000: "VtgateError",
	2999: "UnknownVtgateError",
}
var ErrorCode_value = map[string]int32{
	"NoError":            0,
	"TabletError":        1000,
	"UnknownTabletError": 1999,
	"VtgateError":        2000,
	"UnknownVtgateError": 2999,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

// CallerID is passed along RPCs to identify the originating client
// for a request. It is not meant to be secure, but only
// informational.  The client can put whatever info they want in these
// fields, and they will be trusted by the servers. The fields will
// just be used for logging purposes, and to easily find a client.
// VtGate propagates it to VtTablet, and VtTablet may use this
// information for monitoring purposes, to display on dashboards, or
// for blacklisting purposes.
type CallerID struct {
	// principal is the effective user identifier. It is usually filled in
	// with whoever made the request to the appserver, if the request
	// came from an automated job or another system component.
	// If the request comes directly from the Internet, or if the Vitess client
	// takes action on its own accord, it is okay for this field to be absent.
	Principal string `protobuf:"bytes,1,opt,name=principal" json:"principal,omitempty"`
	// component describes the running process of the effective caller.
	// It can for instance be the hostname:port of the servlet initiating the
	// database call, or the container engine ID used by the servlet.
	Component string `protobuf:"bytes,2,opt,name=component" json:"component,omitempty"`
	// subcomponent describes a component inisde the immediate caller which
	// is responsible for generating is request. Suggested values are a
	// servlet name or an API endpoint name.
	Subcomponent string `protobuf:"bytes,3,opt,name=subcomponent" json:"subcomponent,omitempty"`
}

func (m *CallerID) Reset()         { *m = CallerID{} }
func (m *CallerID) String() string { return proto.CompactTextString(m) }
func (*CallerID) ProtoMessage()    {}

// RPCError is an application-level error structure returned by
// VtTablet (and passed along by VtGate if appropriate).
// We use this so the clients don't have to parse the error messages,
// but instead can depend on the value of the code.
type RPCError struct {
	Code    ErrorCode `protobuf:"varint,1,opt,name=code,enum=vtrpc.ErrorCode" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RPCError) Reset()         { *m = RPCError{} }
func (m *RPCError) String() string { return proto.CompactTextString(m) }
func (*RPCError) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("vtrpc.ErrorCode", ErrorCode_name, ErrorCode_value)
}
