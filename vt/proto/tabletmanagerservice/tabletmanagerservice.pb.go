// Code generated by protoc-gen-go.
// source: tabletmanagerservice.proto
// DO NOT EDIT!

/*
Package tabletmanagerservice is a generated protocol buffer package.

It is generated from these files:
	tabletmanagerservice.proto

It has these top-level messages:
*/
package tabletmanagerservice

import proto "github.com/golang/protobuf/proto"
import tabletmanager "github.com/youtube/vitess/go/vt/proto/tabletmanager"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

func init() {
}

// Client API for TabletManager service

type TabletManagerClient interface {
	// Ping returns the input payload
	Ping(ctx context.Context, in *tabletmanager.PingRequest, opts ...grpc.CallOption) (*tabletmanager.PingResponse, error)
	// Sleep sleeps for the provided duration
	Sleep(ctx context.Context, in *tabletmanager.SleepRequest, opts ...grpc.CallOption) (*tabletmanager.SleepResponse, error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(ctx context.Context, in *tabletmanager.ExecuteHookRequest, opts ...grpc.CallOption) (*tabletmanager.ExecuteHookResponse, error)
	// GetSchema asks the tablet for its schema
	GetSchema(ctx context.Context, in *tabletmanager.GetSchemaRequest, opts ...grpc.CallOption) (*tabletmanager.GetSchemaResponse, error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(ctx context.Context, in *tabletmanager.GetPermissionsRequest, opts ...grpc.CallOption) (*tabletmanager.GetPermissionsResponse, error)
	SetReadOnly(ctx context.Context, in *tabletmanager.SetReadOnlyRequest, opts ...grpc.CallOption) (*tabletmanager.SetReadOnlyResponse, error)
	SetReadWrite(ctx context.Context, in *tabletmanager.SetReadWriteRequest, opts ...grpc.CallOption) (*tabletmanager.SetReadWriteResponse, error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(ctx context.Context, in *tabletmanager.ChangeTypeRequest, opts ...grpc.CallOption) (*tabletmanager.ChangeTypeResponse, error)
	Scrap(ctx context.Context, in *tabletmanager.ScrapRequest, opts ...grpc.CallOption) (*tabletmanager.ScrapResponse, error)
	RefreshState(ctx context.Context, in *tabletmanager.RefreshStateRequest, opts ...grpc.CallOption) (*tabletmanager.RefreshStateResponse, error)
	RunHealthCheck(ctx context.Context, in *tabletmanager.RunHealthCheckRequest, opts ...grpc.CallOption) (*tabletmanager.RunHealthCheckResponse, error)
	StreamHealth(ctx context.Context, in *tabletmanager.StreamHealthRequest, opts ...grpc.CallOption) (TabletManager_StreamHealthClient, error)
	ReloadSchema(ctx context.Context, in *tabletmanager.ReloadSchemaRequest, opts ...grpc.CallOption) (*tabletmanager.ReloadSchemaResponse, error)
	PreflightSchema(ctx context.Context, in *tabletmanager.PreflightSchemaRequest, opts ...grpc.CallOption) (*tabletmanager.PreflightSchemaResponse, error)
	ApplySchema(ctx context.Context, in *tabletmanager.ApplySchemaRequest, opts ...grpc.CallOption) (*tabletmanager.ApplySchemaResponse, error)
	ExecuteFetchAsDba(ctx context.Context, in *tabletmanager.ExecuteFetchAsDbaRequest, opts ...grpc.CallOption) (*tabletmanager.ExecuteFetchAsDbaResponse, error)
	ExecuteFetchAsApp(ctx context.Context, in *tabletmanager.ExecuteFetchAsAppRequest, opts ...grpc.CallOption) (*tabletmanager.ExecuteFetchAsAppResponse, error)
	// SlaveStatus returns the current slave status.
	SlaveStatus(ctx context.Context, in *tabletmanager.SlaveStatusRequest, opts ...grpc.CallOption) (*tabletmanager.SlaveStatusResponse, error)
	// MasterPosition returns the current master position
	MasterPosition(ctx context.Context, in *tabletmanager.MasterPositionRequest, opts ...grpc.CallOption) (*tabletmanager.MasterPositionResponse, error)
	// StopSlave makes mysql stop its replication
	StopSlave(ctx context.Context, in *tabletmanager.StopSlaveRequest, opts ...grpc.CallOption) (*tabletmanager.StopSlaveResponse, error)
	// StopSlaveMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopSlaveMinimum(ctx context.Context, in *tabletmanager.StopSlaveMinimumRequest, opts ...grpc.CallOption) (*tabletmanager.StopSlaveMinimumResponse, error)
	// StartSlave starts the mysql replication
	StartSlave(ctx context.Context, in *tabletmanager.StartSlaveRequest, opts ...grpc.CallOption) (*tabletmanager.StartSlaveResponse, error)
	// TabletExternallyReparented tells a tablet that its underlying MySQL is
	// currently the master. It is only used in environments (tabletmanager.such as Vitess+MoB)
	// in which MySQL is reparented by some agent external to Vitess, and then
	// that agent simply notifies Vitess.
	//
	// This call is idempotent with respect to a single target tablet.
	// However, the tablet assumes there is a cooling-off period following the
	// initial external reparent from A to B, before this call is repeated on any
	// tablet other than B. This assumption is configurable with the vttablet flag
	// "finalize_external_reparent_timeout".
	//
	// For more information, see the design doc at go/vt-fast-failover.
	TabletExternallyReparented(ctx context.Context, in *tabletmanager.TabletExternallyReparentedRequest, opts ...grpc.CallOption) (*tabletmanager.TabletExternallyReparentedResponse, error)
	// TabletExternallyElected is an notification that may be sent in
	// anticipation of potentially later sending TabletExternallyReparented.
	// The tablet can use this extra lead time to prepare to react quickly if
	// TabletExternallyReparented does follow.
	//
	// This call is effectively a no-op if it is not followed by a call to
	// TabletExternallyReparented, so the external agent doing the reparent can
	// still change its mind.
	//
	// The agent does not need to wait for this call or cancel it before calling
	// TabletExternallyReparented if the external reparent operation finishes
	// before TabletExternallyElected returns.
	TabletExternallyElected(ctx context.Context, in *tabletmanager.TabletExternallyElectedRequest, opts ...grpc.CallOption) (*tabletmanager.TabletExternallyElectedResponse, error)
	// GetSlaves asks for the list of mysql slaves
	GetSlaves(ctx context.Context, in *tabletmanager.GetSlavesRequest, opts ...grpc.CallOption) (*tabletmanager.GetSlavesResponse, error)
	// WaitBlpPosition tells the remote tablet to wait until it reaches
	// the specified binolg player position
	WaitBlpPosition(ctx context.Context, in *tabletmanager.WaitBlpPositionRequest, opts ...grpc.CallOption) (*tabletmanager.WaitBlpPositionResponse, error)
	// StopBlp asks the tablet to stop all its binlog players,
	// and returns the current position for all of them
	StopBlp(ctx context.Context, in *tabletmanager.StopBlpRequest, opts ...grpc.CallOption) (*tabletmanager.StopBlpResponse, error)
	// StartBlp asks the tablet to restart its binlog players
	StartBlp(ctx context.Context, in *tabletmanager.StartBlpRequest, opts ...grpc.CallOption) (*tabletmanager.StartBlpResponse, error)
	// RunBlpUntil asks the tablet to restart its binlog players
	RunBlpUntil(ctx context.Context, in *tabletmanager.RunBlpUntilRequest, opts ...grpc.CallOption) (*tabletmanager.RunBlpUntilResponse, error)
	// ResetReplication makes the target not replicating
	ResetReplication(ctx context.Context, in *tabletmanager.ResetReplicationRequest, opts ...grpc.CallOption) (*tabletmanager.ResetReplicationResponse, error)
	// InitMaster initializes the tablet as a master
	InitMaster(ctx context.Context, in *tabletmanager.InitMasterRequest, opts ...grpc.CallOption) (*tabletmanager.InitMasterResponse, error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(ctx context.Context, in *tabletmanager.PopulateReparentJournalRequest, opts ...grpc.CallOption) (*tabletmanager.PopulateReparentJournalResponse, error)
	// InitSlave tells the tablet to reparent to the master unconditionnally
	InitSlave(ctx context.Context, in *tabletmanager.InitSlaveRequest, opts ...grpc.CallOption) (*tabletmanager.InitSlaveResponse, error)
	// DemoteMaster tells the soon-to-be-former master it's gonna change
	DemoteMaster(ctx context.Context, in *tabletmanager.DemoteMasterRequest, opts ...grpc.CallOption) (*tabletmanager.DemoteMasterResponse, error)
	// PromoteSlaveWhenCaughtUp tells the remote tablet to catch up,
	// and then be the master
	PromoteSlaveWhenCaughtUp(ctx context.Context, in *tabletmanager.PromoteSlaveWhenCaughtUpRequest, opts ...grpc.CallOption) (*tabletmanager.PromoteSlaveWhenCaughtUpResponse, error)
	// SlaveWasPromoted tells the remote tablet it is now the master
	SlaveWasPromoted(ctx context.Context, in *tabletmanager.SlaveWasPromotedRequest, opts ...grpc.CallOption) (*tabletmanager.SlaveWasPromotedResponse, error)
	// SetMaster tells the slave to reparent
	SetMaster(ctx context.Context, in *tabletmanager.SetMasterRequest, opts ...grpc.CallOption) (*tabletmanager.SetMasterResponse, error)
	// SlaveWasRestarted tells the remote tablet its master has changed
	SlaveWasRestarted(ctx context.Context, in *tabletmanager.SlaveWasRestartedRequest, opts ...grpc.CallOption) (*tabletmanager.SlaveWasRestartedResponse, error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(ctx context.Context, in *tabletmanager.StopReplicationAndGetStatusRequest, opts ...grpc.CallOption) (*tabletmanager.StopReplicationAndGetStatusResponse, error)
	// PromoteSlave makes the slave the new master
	PromoteSlave(ctx context.Context, in *tabletmanager.PromoteSlaveRequest, opts ...grpc.CallOption) (*tabletmanager.PromoteSlaveResponse, error)
	Backup(ctx context.Context, in *tabletmanager.BackupRequest, opts ...grpc.CallOption) (TabletManager_BackupClient, error)
}

type tabletManagerClient struct {
	cc *grpc.ClientConn
}

func NewTabletManagerClient(cc *grpc.ClientConn) TabletManagerClient {
	return &tabletManagerClient{cc}
}

func (c *tabletManagerClient) Ping(ctx context.Context, in *tabletmanager.PingRequest, opts ...grpc.CallOption) (*tabletmanager.PingResponse, error) {
	out := new(tabletmanager.PingResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) Sleep(ctx context.Context, in *tabletmanager.SleepRequest, opts ...grpc.CallOption) (*tabletmanager.SleepResponse, error) {
	out := new(tabletmanager.SleepResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Sleep", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteHook(ctx context.Context, in *tabletmanager.ExecuteHookRequest, opts ...grpc.CallOption) (*tabletmanager.ExecuteHookResponse, error) {
	out := new(tabletmanager.ExecuteHookResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteHook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetSchema(ctx context.Context, in *tabletmanager.GetSchemaRequest, opts ...grpc.CallOption) (*tabletmanager.GetSchemaResponse, error) {
	out := new(tabletmanager.GetSchemaResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetPermissions(ctx context.Context, in *tabletmanager.GetPermissionsRequest, opts ...grpc.CallOption) (*tabletmanager.GetPermissionsResponse, error) {
	out := new(tabletmanager.GetPermissionsResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetReadOnly(ctx context.Context, in *tabletmanager.SetReadOnlyRequest, opts ...grpc.CallOption) (*tabletmanager.SetReadOnlyResponse, error) {
	out := new(tabletmanager.SetReadOnlyResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetReadOnly", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetReadWrite(ctx context.Context, in *tabletmanager.SetReadWriteRequest, opts ...grpc.CallOption) (*tabletmanager.SetReadWriteResponse, error) {
	out := new(tabletmanager.SetReadWriteResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetReadWrite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ChangeType(ctx context.Context, in *tabletmanager.ChangeTypeRequest, opts ...grpc.CallOption) (*tabletmanager.ChangeTypeResponse, error) {
	out := new(tabletmanager.ChangeTypeResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ChangeType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) Scrap(ctx context.Context, in *tabletmanager.ScrapRequest, opts ...grpc.CallOption) (*tabletmanager.ScrapResponse, error) {
	out := new(tabletmanager.ScrapResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Scrap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) RefreshState(ctx context.Context, in *tabletmanager.RefreshStateRequest, opts ...grpc.CallOption) (*tabletmanager.RefreshStateResponse, error) {
	out := new(tabletmanager.RefreshStateResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RefreshState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) RunHealthCheck(ctx context.Context, in *tabletmanager.RunHealthCheckRequest, opts ...grpc.CallOption) (*tabletmanager.RunHealthCheckResponse, error) {
	out := new(tabletmanager.RunHealthCheckResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RunHealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StreamHealth(ctx context.Context, in *tabletmanager.StreamHealthRequest, opts ...grpc.CallOption) (TabletManager_StreamHealthClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TabletManager_serviceDesc.Streams[0], c.cc, "/tabletmanagerservice.TabletManager/StreamHealth", opts...)
	if err != nil {
		return nil, err
	}
	x := &tabletManagerStreamHealthClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TabletManager_StreamHealthClient interface {
	Recv() (*tabletmanager.StreamHealthResponse, error)
	grpc.ClientStream
}

type tabletManagerStreamHealthClient struct {
	grpc.ClientStream
}

func (x *tabletManagerStreamHealthClient) Recv() (*tabletmanager.StreamHealthResponse, error) {
	m := new(tabletmanager.StreamHealthResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tabletManagerClient) ReloadSchema(ctx context.Context, in *tabletmanager.ReloadSchemaRequest, opts ...grpc.CallOption) (*tabletmanager.ReloadSchemaResponse, error) {
	out := new(tabletmanager.ReloadSchemaResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReloadSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PreflightSchema(ctx context.Context, in *tabletmanager.PreflightSchemaRequest, opts ...grpc.CallOption) (*tabletmanager.PreflightSchemaResponse, error) {
	out := new(tabletmanager.PreflightSchemaResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PreflightSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ApplySchema(ctx context.Context, in *tabletmanager.ApplySchemaRequest, opts ...grpc.CallOption) (*tabletmanager.ApplySchemaResponse, error) {
	out := new(tabletmanager.ApplySchemaResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ApplySchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteFetchAsDba(ctx context.Context, in *tabletmanager.ExecuteFetchAsDbaRequest, opts ...grpc.CallOption) (*tabletmanager.ExecuteFetchAsDbaResponse, error) {
	out := new(tabletmanager.ExecuteFetchAsDbaResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteFetchAsApp(ctx context.Context, in *tabletmanager.ExecuteFetchAsAppRequest, opts ...grpc.CallOption) (*tabletmanager.ExecuteFetchAsAppResponse, error) {
	out := new(tabletmanager.ExecuteFetchAsAppResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SlaveStatus(ctx context.Context, in *tabletmanager.SlaveStatusRequest, opts ...grpc.CallOption) (*tabletmanager.SlaveStatusResponse, error) {
	out := new(tabletmanager.SlaveStatusResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SlaveStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) MasterPosition(ctx context.Context, in *tabletmanager.MasterPositionRequest, opts ...grpc.CallOption) (*tabletmanager.MasterPositionResponse, error) {
	out := new(tabletmanager.MasterPositionResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/MasterPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopSlave(ctx context.Context, in *tabletmanager.StopSlaveRequest, opts ...grpc.CallOption) (*tabletmanager.StopSlaveResponse, error) {
	out := new(tabletmanager.StopSlaveResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopSlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopSlaveMinimum(ctx context.Context, in *tabletmanager.StopSlaveMinimumRequest, opts ...grpc.CallOption) (*tabletmanager.StopSlaveMinimumResponse, error) {
	out := new(tabletmanager.StopSlaveMinimumResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopSlaveMinimum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StartSlave(ctx context.Context, in *tabletmanager.StartSlaveRequest, opts ...grpc.CallOption) (*tabletmanager.StartSlaveResponse, error) {
	out := new(tabletmanager.StartSlaveResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartSlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) TabletExternallyReparented(ctx context.Context, in *tabletmanager.TabletExternallyReparentedRequest, opts ...grpc.CallOption) (*tabletmanager.TabletExternallyReparentedResponse, error) {
	out := new(tabletmanager.TabletExternallyReparentedResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/TabletExternallyReparented", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) TabletExternallyElected(ctx context.Context, in *tabletmanager.TabletExternallyElectedRequest, opts ...grpc.CallOption) (*tabletmanager.TabletExternallyElectedResponse, error) {
	out := new(tabletmanager.TabletExternallyElectedResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/TabletExternallyElected", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetSlaves(ctx context.Context, in *tabletmanager.GetSlavesRequest, opts ...grpc.CallOption) (*tabletmanager.GetSlavesResponse, error) {
	out := new(tabletmanager.GetSlavesResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetSlaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) WaitBlpPosition(ctx context.Context, in *tabletmanager.WaitBlpPositionRequest, opts ...grpc.CallOption) (*tabletmanager.WaitBlpPositionResponse, error) {
	out := new(tabletmanager.WaitBlpPositionResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/WaitBlpPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopBlp(ctx context.Context, in *tabletmanager.StopBlpRequest, opts ...grpc.CallOption) (*tabletmanager.StopBlpResponse, error) {
	out := new(tabletmanager.StopBlpResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopBlp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StartBlp(ctx context.Context, in *tabletmanager.StartBlpRequest, opts ...grpc.CallOption) (*tabletmanager.StartBlpResponse, error) {
	out := new(tabletmanager.StartBlpResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartBlp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) RunBlpUntil(ctx context.Context, in *tabletmanager.RunBlpUntilRequest, opts ...grpc.CallOption) (*tabletmanager.RunBlpUntilResponse, error) {
	out := new(tabletmanager.RunBlpUntilResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RunBlpUntil", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ResetReplication(ctx context.Context, in *tabletmanager.ResetReplicationRequest, opts ...grpc.CallOption) (*tabletmanager.ResetReplicationResponse, error) {
	out := new(tabletmanager.ResetReplicationResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ResetReplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) InitMaster(ctx context.Context, in *tabletmanager.InitMasterRequest, opts ...grpc.CallOption) (*tabletmanager.InitMasterResponse, error) {
	out := new(tabletmanager.InitMasterResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitMaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PopulateReparentJournal(ctx context.Context, in *tabletmanager.PopulateReparentJournalRequest, opts ...grpc.CallOption) (*tabletmanager.PopulateReparentJournalResponse, error) {
	out := new(tabletmanager.PopulateReparentJournalResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PopulateReparentJournal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) InitSlave(ctx context.Context, in *tabletmanager.InitSlaveRequest, opts ...grpc.CallOption) (*tabletmanager.InitSlaveResponse, error) {
	out := new(tabletmanager.InitSlaveResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitSlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) DemoteMaster(ctx context.Context, in *tabletmanager.DemoteMasterRequest, opts ...grpc.CallOption) (*tabletmanager.DemoteMasterResponse, error) {
	out := new(tabletmanager.DemoteMasterResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/DemoteMaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PromoteSlaveWhenCaughtUp(ctx context.Context, in *tabletmanager.PromoteSlaveWhenCaughtUpRequest, opts ...grpc.CallOption) (*tabletmanager.PromoteSlaveWhenCaughtUpResponse, error) {
	out := new(tabletmanager.PromoteSlaveWhenCaughtUpResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PromoteSlaveWhenCaughtUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SlaveWasPromoted(ctx context.Context, in *tabletmanager.SlaveWasPromotedRequest, opts ...grpc.CallOption) (*tabletmanager.SlaveWasPromotedResponse, error) {
	out := new(tabletmanager.SlaveWasPromotedResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SlaveWasPromoted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetMaster(ctx context.Context, in *tabletmanager.SetMasterRequest, opts ...grpc.CallOption) (*tabletmanager.SetMasterResponse, error) {
	out := new(tabletmanager.SetMasterResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetMaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SlaveWasRestarted(ctx context.Context, in *tabletmanager.SlaveWasRestartedRequest, opts ...grpc.CallOption) (*tabletmanager.SlaveWasRestartedResponse, error) {
	out := new(tabletmanager.SlaveWasRestartedResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SlaveWasRestarted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopReplicationAndGetStatus(ctx context.Context, in *tabletmanager.StopReplicationAndGetStatusRequest, opts ...grpc.CallOption) (*tabletmanager.StopReplicationAndGetStatusResponse, error) {
	out := new(tabletmanager.StopReplicationAndGetStatusResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PromoteSlave(ctx context.Context, in *tabletmanager.PromoteSlaveRequest, opts ...grpc.CallOption) (*tabletmanager.PromoteSlaveResponse, error) {
	out := new(tabletmanager.PromoteSlaveResponse)
	err := grpc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PromoteSlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) Backup(ctx context.Context, in *tabletmanager.BackupRequest, opts ...grpc.CallOption) (TabletManager_BackupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TabletManager_serviceDesc.Streams[1], c.cc, "/tabletmanagerservice.TabletManager/Backup", opts...)
	if err != nil {
		return nil, err
	}
	x := &tabletManagerBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TabletManager_BackupClient interface {
	Recv() (*tabletmanager.BackupResponse, error)
	grpc.ClientStream
}

type tabletManagerBackupClient struct {
	grpc.ClientStream
}

func (x *tabletManagerBackupClient) Recv() (*tabletmanager.BackupResponse, error) {
	m := new(tabletmanager.BackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TabletManager service

type TabletManagerServer interface {
	// Ping returns the input payload
	Ping(context.Context, *tabletmanager.PingRequest) (*tabletmanager.PingResponse, error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *tabletmanager.SleepRequest) (*tabletmanager.SleepResponse, error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *tabletmanager.ExecuteHookRequest) (*tabletmanager.ExecuteHookResponse, error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *tabletmanager.GetSchemaRequest) (*tabletmanager.GetSchemaResponse, error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *tabletmanager.GetPermissionsRequest) (*tabletmanager.GetPermissionsResponse, error)
	SetReadOnly(context.Context, *tabletmanager.SetReadOnlyRequest) (*tabletmanager.SetReadOnlyResponse, error)
	SetReadWrite(context.Context, *tabletmanager.SetReadWriteRequest) (*tabletmanager.SetReadWriteResponse, error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *tabletmanager.ChangeTypeRequest) (*tabletmanager.ChangeTypeResponse, error)
	Scrap(context.Context, *tabletmanager.ScrapRequest) (*tabletmanager.ScrapResponse, error)
	RefreshState(context.Context, *tabletmanager.RefreshStateRequest) (*tabletmanager.RefreshStateResponse, error)
	RunHealthCheck(context.Context, *tabletmanager.RunHealthCheckRequest) (*tabletmanager.RunHealthCheckResponse, error)
	StreamHealth(*tabletmanager.StreamHealthRequest, TabletManager_StreamHealthServer) error
	ReloadSchema(context.Context, *tabletmanager.ReloadSchemaRequest) (*tabletmanager.ReloadSchemaResponse, error)
	PreflightSchema(context.Context, *tabletmanager.PreflightSchemaRequest) (*tabletmanager.PreflightSchemaResponse, error)
	ApplySchema(context.Context, *tabletmanager.ApplySchemaRequest) (*tabletmanager.ApplySchemaResponse, error)
	ExecuteFetchAsDba(context.Context, *tabletmanager.ExecuteFetchAsDbaRequest) (*tabletmanager.ExecuteFetchAsDbaResponse, error)
	ExecuteFetchAsApp(context.Context, *tabletmanager.ExecuteFetchAsAppRequest) (*tabletmanager.ExecuteFetchAsAppResponse, error)
	// SlaveStatus returns the current slave status.
	SlaveStatus(context.Context, *tabletmanager.SlaveStatusRequest) (*tabletmanager.SlaveStatusResponse, error)
	// MasterPosition returns the current master position
	MasterPosition(context.Context, *tabletmanager.MasterPositionRequest) (*tabletmanager.MasterPositionResponse, error)
	// StopSlave makes mysql stop its replication
	StopSlave(context.Context, *tabletmanager.StopSlaveRequest) (*tabletmanager.StopSlaveResponse, error)
	// StopSlaveMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopSlaveMinimum(context.Context, *tabletmanager.StopSlaveMinimumRequest) (*tabletmanager.StopSlaveMinimumResponse, error)
	// StartSlave starts the mysql replication
	StartSlave(context.Context, *tabletmanager.StartSlaveRequest) (*tabletmanager.StartSlaveResponse, error)
	// TabletExternallyReparented tells a tablet that its underlying MySQL is
	// currently the master. It is only used in environments (tabletmanager.such as Vitess+MoB)
	// in which MySQL is reparented by some agent external to Vitess, and then
	// that agent simply notifies Vitess.
	//
	// This call is idempotent with respect to a single target tablet.
	// However, the tablet assumes there is a cooling-off period following the
	// initial external reparent from A to B, before this call is repeated on any
	// tablet other than B. This assumption is configurable with the vttablet flag
	// "finalize_external_reparent_timeout".
	//
	// For more information, see the design doc at go/vt-fast-failover.
	TabletExternallyReparented(context.Context, *tabletmanager.TabletExternallyReparentedRequest) (*tabletmanager.TabletExternallyReparentedResponse, error)
	// TabletExternallyElected is an notification that may be sent in
	// anticipation of potentially later sending TabletExternallyReparented.
	// The tablet can use this extra lead time to prepare to react quickly if
	// TabletExternallyReparented does follow.
	//
	// This call is effectively a no-op if it is not followed by a call to
	// TabletExternallyReparented, so the external agent doing the reparent can
	// still change its mind.
	//
	// The agent does not need to wait for this call or cancel it before calling
	// TabletExternallyReparented if the external reparent operation finishes
	// before TabletExternallyElected returns.
	TabletExternallyElected(context.Context, *tabletmanager.TabletExternallyElectedRequest) (*tabletmanager.TabletExternallyElectedResponse, error)
	// GetSlaves asks for the list of mysql slaves
	GetSlaves(context.Context, *tabletmanager.GetSlavesRequest) (*tabletmanager.GetSlavesResponse, error)
	// WaitBlpPosition tells the remote tablet to wait until it reaches
	// the specified binolg player position
	WaitBlpPosition(context.Context, *tabletmanager.WaitBlpPositionRequest) (*tabletmanager.WaitBlpPositionResponse, error)
	// StopBlp asks the tablet to stop all its binlog players,
	// and returns the current position for all of them
	StopBlp(context.Context, *tabletmanager.StopBlpRequest) (*tabletmanager.StopBlpResponse, error)
	// StartBlp asks the tablet to restart its binlog players
	StartBlp(context.Context, *tabletmanager.StartBlpRequest) (*tabletmanager.StartBlpResponse, error)
	// RunBlpUntil asks the tablet to restart its binlog players
	RunBlpUntil(context.Context, *tabletmanager.RunBlpUntilRequest) (*tabletmanager.RunBlpUntilResponse, error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *tabletmanager.ResetReplicationRequest) (*tabletmanager.ResetReplicationResponse, error)
	// InitMaster initializes the tablet as a master
	InitMaster(context.Context, *tabletmanager.InitMasterRequest) (*tabletmanager.InitMasterResponse, error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *tabletmanager.PopulateReparentJournalRequest) (*tabletmanager.PopulateReparentJournalResponse, error)
	// InitSlave tells the tablet to reparent to the master unconditionnally
	InitSlave(context.Context, *tabletmanager.InitSlaveRequest) (*tabletmanager.InitSlaveResponse, error)
	// DemoteMaster tells the soon-to-be-former master it's gonna change
	DemoteMaster(context.Context, *tabletmanager.DemoteMasterRequest) (*tabletmanager.DemoteMasterResponse, error)
	// PromoteSlaveWhenCaughtUp tells the remote tablet to catch up,
	// and then be the master
	PromoteSlaveWhenCaughtUp(context.Context, *tabletmanager.PromoteSlaveWhenCaughtUpRequest) (*tabletmanager.PromoteSlaveWhenCaughtUpResponse, error)
	// SlaveWasPromoted tells the remote tablet it is now the master
	SlaveWasPromoted(context.Context, *tabletmanager.SlaveWasPromotedRequest) (*tabletmanager.SlaveWasPromotedResponse, error)
	// SetMaster tells the slave to reparent
	SetMaster(context.Context, *tabletmanager.SetMasterRequest) (*tabletmanager.SetMasterResponse, error)
	// SlaveWasRestarted tells the remote tablet its master has changed
	SlaveWasRestarted(context.Context, *tabletmanager.SlaveWasRestartedRequest) (*tabletmanager.SlaveWasRestartedResponse, error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *tabletmanager.StopReplicationAndGetStatusRequest) (*tabletmanager.StopReplicationAndGetStatusResponse, error)
	// PromoteSlave makes the slave the new master
	PromoteSlave(context.Context, *tabletmanager.PromoteSlaveRequest) (*tabletmanager.PromoteSlaveResponse, error)
	Backup(*tabletmanager.BackupRequest, TabletManager_BackupServer) error
}

func RegisterTabletManagerServer(s *grpc.Server, srv TabletManagerServer) {
	s.RegisterService(&_TabletManager_serviceDesc, srv)
}

func _TabletManager_Ping_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.PingRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_Sleep_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.SleepRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).Sleep(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_ExecuteHook_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.ExecuteHookRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).ExecuteHook(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_GetSchema_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.GetSchemaRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).GetSchema(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_GetPermissions_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.GetPermissionsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).GetPermissions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_SetReadOnly_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.SetReadOnlyRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).SetReadOnly(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_SetReadWrite_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.SetReadWriteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).SetReadWrite(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_ChangeType_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.ChangeTypeRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).ChangeType(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_Scrap_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.ScrapRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).Scrap(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_RefreshState_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.RefreshStateRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).RefreshState(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_RunHealthCheck_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.RunHealthCheckRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).RunHealthCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_StreamHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tabletmanager.StreamHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TabletManagerServer).StreamHealth(m, &tabletManagerStreamHealthServer{stream})
}

type TabletManager_StreamHealthServer interface {
	Send(*tabletmanager.StreamHealthResponse) error
	grpc.ServerStream
}

type tabletManagerStreamHealthServer struct {
	grpc.ServerStream
}

func (x *tabletManagerStreamHealthServer) Send(m *tabletmanager.StreamHealthResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TabletManager_ReloadSchema_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.ReloadSchemaRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).ReloadSchema(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_PreflightSchema_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.PreflightSchemaRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).PreflightSchema(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_ApplySchema_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.ApplySchemaRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).ApplySchema(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_ExecuteFetchAsDba_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.ExecuteFetchAsDbaRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).ExecuteFetchAsDba(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_ExecuteFetchAsApp_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.ExecuteFetchAsAppRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).ExecuteFetchAsApp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_SlaveStatus_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.SlaveStatusRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).SlaveStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_MasterPosition_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.MasterPositionRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).MasterPosition(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_StopSlave_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.StopSlaveRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).StopSlave(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_StopSlaveMinimum_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.StopSlaveMinimumRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).StopSlaveMinimum(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_StartSlave_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.StartSlaveRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).StartSlave(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_TabletExternallyReparented_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.TabletExternallyReparentedRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).TabletExternallyReparented(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_TabletExternallyElected_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.TabletExternallyElectedRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).TabletExternallyElected(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_GetSlaves_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.GetSlavesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).GetSlaves(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_WaitBlpPosition_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.WaitBlpPositionRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).WaitBlpPosition(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_StopBlp_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.StopBlpRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).StopBlp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_StartBlp_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.StartBlpRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).StartBlp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_RunBlpUntil_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.RunBlpUntilRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).RunBlpUntil(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_ResetReplication_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.ResetReplicationRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).ResetReplication(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_InitMaster_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.InitMasterRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).InitMaster(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_PopulateReparentJournal_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.PopulateReparentJournalRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).PopulateReparentJournal(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_InitSlave_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.InitSlaveRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).InitSlave(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_DemoteMaster_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.DemoteMasterRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).DemoteMaster(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_PromoteSlaveWhenCaughtUp_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.PromoteSlaveWhenCaughtUpRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).PromoteSlaveWhenCaughtUp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_SlaveWasPromoted_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.SlaveWasPromotedRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).SlaveWasPromoted(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_SetMaster_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.SetMasterRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).SetMaster(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_SlaveWasRestarted_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.SlaveWasRestartedRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).SlaveWasRestarted(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_StopReplicationAndGetStatus_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.StopReplicationAndGetStatusRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).StopReplicationAndGetStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_PromoteSlave_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(tabletmanager.PromoteSlaveRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TabletManagerServer).PromoteSlave(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TabletManager_Backup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tabletmanager.BackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TabletManagerServer).Backup(m, &tabletManagerBackupServer{stream})
}

type TabletManager_BackupServer interface {
	Send(*tabletmanager.BackupResponse) error
	grpc.ServerStream
}

type tabletManagerBackupServer struct {
	grpc.ServerStream
}

func (x *tabletManagerBackupServer) Send(m *tabletmanager.BackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TabletManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabletmanagerservice.TabletManager",
	HandlerType: (*TabletManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TabletManager_Ping_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _TabletManager_Sleep_Handler,
		},
		{
			MethodName: "ExecuteHook",
			Handler:    _TabletManager_ExecuteHook_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _TabletManager_GetSchema_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _TabletManager_GetPermissions_Handler,
		},
		{
			MethodName: "SetReadOnly",
			Handler:    _TabletManager_SetReadOnly_Handler,
		},
		{
			MethodName: "SetReadWrite",
			Handler:    _TabletManager_SetReadWrite_Handler,
		},
		{
			MethodName: "ChangeType",
			Handler:    _TabletManager_ChangeType_Handler,
		},
		{
			MethodName: "Scrap",
			Handler:    _TabletManager_Scrap_Handler,
		},
		{
			MethodName: "RefreshState",
			Handler:    _TabletManager_RefreshState_Handler,
		},
		{
			MethodName: "RunHealthCheck",
			Handler:    _TabletManager_RunHealthCheck_Handler,
		},
		{
			MethodName: "ReloadSchema",
			Handler:    _TabletManager_ReloadSchema_Handler,
		},
		{
			MethodName: "PreflightSchema",
			Handler:    _TabletManager_PreflightSchema_Handler,
		},
		{
			MethodName: "ApplySchema",
			Handler:    _TabletManager_ApplySchema_Handler,
		},
		{
			MethodName: "ExecuteFetchAsDba",
			Handler:    _TabletManager_ExecuteFetchAsDba_Handler,
		},
		{
			MethodName: "ExecuteFetchAsApp",
			Handler:    _TabletManager_ExecuteFetchAsApp_Handler,
		},
		{
			MethodName: "SlaveStatus",
			Handler:    _TabletManager_SlaveStatus_Handler,
		},
		{
			MethodName: "MasterPosition",
			Handler:    _TabletManager_MasterPosition_Handler,
		},
		{
			MethodName: "StopSlave",
			Handler:    _TabletManager_StopSlave_Handler,
		},
		{
			MethodName: "StopSlaveMinimum",
			Handler:    _TabletManager_StopSlaveMinimum_Handler,
		},
		{
			MethodName: "StartSlave",
			Handler:    _TabletManager_StartSlave_Handler,
		},
		{
			MethodName: "TabletExternallyReparented",
			Handler:    _TabletManager_TabletExternallyReparented_Handler,
		},
		{
			MethodName: "TabletExternallyElected",
			Handler:    _TabletManager_TabletExternallyElected_Handler,
		},
		{
			MethodName: "GetSlaves",
			Handler:    _TabletManager_GetSlaves_Handler,
		},
		{
			MethodName: "WaitBlpPosition",
			Handler:    _TabletManager_WaitBlpPosition_Handler,
		},
		{
			MethodName: "StopBlp",
			Handler:    _TabletManager_StopBlp_Handler,
		},
		{
			MethodName: "StartBlp",
			Handler:    _TabletManager_StartBlp_Handler,
		},
		{
			MethodName: "RunBlpUntil",
			Handler:    _TabletManager_RunBlpUntil_Handler,
		},
		{
			MethodName: "ResetReplication",
			Handler:    _TabletManager_ResetReplication_Handler,
		},
		{
			MethodName: "InitMaster",
			Handler:    _TabletManager_InitMaster_Handler,
		},
		{
			MethodName: "PopulateReparentJournal",
			Handler:    _TabletManager_PopulateReparentJournal_Handler,
		},
		{
			MethodName: "InitSlave",
			Handler:    _TabletManager_InitSlave_Handler,
		},
		{
			MethodName: "DemoteMaster",
			Handler:    _TabletManager_DemoteMaster_Handler,
		},
		{
			MethodName: "PromoteSlaveWhenCaughtUp",
			Handler:    _TabletManager_PromoteSlaveWhenCaughtUp_Handler,
		},
		{
			MethodName: "SlaveWasPromoted",
			Handler:    _TabletManager_SlaveWasPromoted_Handler,
		},
		{
			MethodName: "SetMaster",
			Handler:    _TabletManager_SetMaster_Handler,
		},
		{
			MethodName: "SlaveWasRestarted",
			Handler:    _TabletManager_SlaveWasRestarted_Handler,
		},
		{
			MethodName: "StopReplicationAndGetStatus",
			Handler:    _TabletManager_StopReplicationAndGetStatus_Handler,
		},
		{
			MethodName: "PromoteSlave",
			Handler:    _TabletManager_PromoteSlave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHealth",
			Handler:       _TabletManager_StreamHealth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Backup",
			Handler:       _TabletManager_Backup_Handler,
			ServerStreams: true,
		},
	},
}
