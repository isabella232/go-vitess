// Copyright 2012, Google Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package sqlparser

// SQLNode defines the interface for all nodes
// generated by the parser.
type SQLNode interface {
	Format(buf *TrackedBuffer)
}

// String returns a string representation of an SQLNode.
func String(node SQLNode) string {
	buf := NewTrackedBuffer(nil)
	buf.Fprintf("%v", node)
	return buf.String()
}

// Statement is the interface that needs to be
// satisfied by SQL statement nodes. statement()
// is a dummy function used for verifying that a
// node is a Statement.
type Statement interface {
	statement()
	SQLNode
}

// SelectStatement is the interface that needs to be
// satisfied by all select statements, including
// unions. They need to implement the dummy
// selectStatement function.
type SelectStatement interface {
	selectStatement()
	statement()
	SQLNode
}

// Select represents a SELECT statement.
type Select struct {
	Comments    Comments
	Distinct    Distinct
	SelectExprs SelectExprs
	From        TableExprs
	Where       *Node
	GroupBy     *Node
	Having      *Node
	OrderBy     *Node
	Limit       *Node
	Lock        *Node
}

func (*Select) statement() {}

func (*Select) selectStatement() {}

func (node *Select) Format(buf *TrackedBuffer) {
	buf.Fprintf("select %v%v%v from %v%v%v%v%v%v%v",
		node.Comments, node.Distinct, node.SelectExprs,
		node.From, node.Where,
		node.GroupBy, node.Having, node.OrderBy,
		node.Limit, node.Lock)
}

// Union represents a UNION statement.
type Union struct {
	Type             []byte
	Select1, Select2 SelectStatement
}

func (*Union) statement() {}

func (*Union) selectStatement() {}

func (node *Union) Format(buf *TrackedBuffer) {
	buf.Fprintf("%v %s %v", node.Select1, node.Type, node.Select2)
}

// Insert represents an INSERT statement.
type Insert struct {
	Comments Comments
	Table    *Node
	Columns  Columns
	Values   SQLNode
	OnDup    *Node
}

func (*Insert) statement() {}

func (node *Insert) Format(buf *TrackedBuffer) {
	buf.Fprintf("insert %vinto %v%v %v%v",
		node.Comments,
		node.Table, node.Columns, node.Values, node.OnDup)
}

// Update represents an UPDATE statement.
type Update struct {
	Comments Comments
	Table    *Node
	List     *Node
	Where    *Node
	OrderBy  *Node
	Limit    *Node
}

func (*Update) statement() {}

func (node *Update) Format(buf *TrackedBuffer) {
	buf.Fprintf("update %v%v set %v%v%v%v",
		node.Comments, node.Table,
		node.List, node.Where, node.OrderBy, node.Limit)
}

// Delete represents a DELETE statement.
type Delete struct {
	Comments Comments
	Table    *Node
	Where    *Node
	OrderBy  *Node
	Limit    *Node
}

func (*Delete) statement() {}

func (node *Delete) Format(buf *TrackedBuffer) {
	buf.Fprintf("delete %vfrom %v%v%v%v",
		node.Comments,
		node.Table, node.Where, node.OrderBy, node.Limit)
}

// Set represents a SET statement.
type Set struct {
	Comments Comments
	Updates  *Node
}

func (*Set) statement() {}

func (node *Set) Format(buf *TrackedBuffer) {
	buf.Fprintf("set %v%v", node.Comments, node.Updates)
}

// DDLSimple represents a CREATE, ALTER or DROP statement.
type DDLSimple struct {
	Action int
	Table  *Node
}

func (*DDLSimple) statement() {}

func (node *DDLSimple) Format(buf *TrackedBuffer) {
	switch node.Action {
	case CREATE:
		buf.Fprintf("create table %v", node.Table)
	case ALTER:
		buf.Fprintf("alter table %v", node.Table)
	case DROP:
		buf.Fprintf("drop table %v", node.Table)
	default:
		panic("unreachable")
	}
}

// Rename represents a RENAME statement.
type Rename struct {
	OldName, NewName *Node
}

func (*Rename) statement() {}

func (node *Rename) Format(buf *TrackedBuffer) {
	buf.Fprintf("rename table %v %v", node.OldName, node.NewName)
}

// Comments represents a list of comments.
type Comments []Comment

func (node Comments) Format(buf *TrackedBuffer) {
	for _, c := range node {
		c.Format(buf)
	}
}

// Comment represents one comment.
type Comment []byte

func (comment Comment) Format(buf *TrackedBuffer) {
	buf.Fprintf("%s ", []byte(comment))
}

// Distinct specifies if DISTINCT was used.
type Distinct bool

func (node Distinct) Format(buf *TrackedBuffer) {
	if node {
		buf.Fprintf("distinct ")
	}
}

// SelectExprs represents SELECT expressions.
type SelectExprs []SelectExpr

func (node SelectExprs) Format(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.Fprintf("%s%v", prefix, n)
		prefix = ", "
	}
}

// SelectExpr defines the interface for a
// SELECT expression. selectExpr is the dummy
// function.
type SelectExpr interface {
	selectExpr()
	SQLNode
}

// StarExpr defines a '*' or 'table.*' expression.
type StarExpr struct {
	TableName []byte
}

func (*StarExpr) selectExpr() {}

func (node *StarExpr) Format(buf *TrackedBuffer) {
	if node.TableName != nil {
		buf.Fprintf("%s.", node.TableName)
	}
	buf.Fprintf("*")
}

// NonStarExpr defines a non-'*' select expr.
type NonStarExpr struct {
	Expr *Node
	As   []byte
}

func (*NonStarExpr) selectExpr() {}

func (node *NonStarExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("%v", node.Expr)
	if node.As != nil {
		buf.Fprintf(" as %s", node.As)
	}
}

// Columns represents an insert column list.
// The syntax for Columns is a subset of SelectExprs.
// So, it's castable to a SelectExprs and can be analyzed
// as such.
type Columns []SelectExpr

func (node Columns) Format(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	buf.Fprintf("(%v)", SelectExprs(node))
}

// TableExprs represents a list of table expressions.
type TableExprs []TableExpr

func (node TableExprs) Format(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.Fprintf("%s%v", prefix, n)
		prefix = ", "
	}
}

// TableExpr represents a table expression.
// tableExpr s the dummy function.
type TableExpr interface {
	tableExpr()
	SQLNode
}

// AliasedTableExpr represents a table expression
// coupled with an optional alias or index hint.
type AliasedTableExpr struct {
	Expr *Node
	As   []byte
	Hint *Node
}

func (*AliasedTableExpr) tableExpr() {}

func (node *AliasedTableExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("%v", node.Expr)
	if node.As != nil {
		buf.Fprintf(" as %s", node.As)
	}
	if node.Hint != nil {
		// Hint node provides the space padding.
		buf.Fprintf("%v", node.Hint)
	}
}

// ParenTableExpr represents a parenthesized TableExpr.
type ParenTableExpr struct {
	Expr TableExpr
}

func (*ParenTableExpr) tableExpr() {}

func (node *ParenTableExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("(%v)", node.Expr)
}

// JoinTableExpr represents a TableExpr that's a JOIN
// operation.
type JoinTableExpr struct {
	LeftExpr  TableExpr
	Join      []byte
	RightExpr TableExpr
	On        *Node
}

func (*JoinTableExpr) tableExpr() {}

func (node *JoinTableExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("%v %s %v", node.LeftExpr, node.Join, node.RightExpr)
	if node.On != nil {
		buf.Fprintf(" on %v", node.On)
	}
}

// Expr represents an expression.
type Expr interface {
	expr()
}

// BoolExpr represents a boolean expression.
type BoolExpr interface {
	expr()
	boolExpr()
}

// AndExpr represents an AND expression.
type AndExpr struct {
	Left, Right BoolExpr
}

func (*AndExpr) expr()     {}
func (*AndExpr) boolExpr() {}

func (node *AndExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("%v and %v", node.Left, node.Right)
}

// OrExpr represents an OR expression.
type OrExpr struct {
	Left, Right BoolExpr
}

func (*OrExpr) expr()     {}
func (*OrExpr) boolExpr() {}

func (node *OrExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("%v or %v", node.Left, node.Right)
}

// NotExpr represents a NOT expression.
type NotExpr struct {
	Expr BoolExpr
}

func (*NotExpr) expr()     {}
func (*NotExpr) boolExpr() {}

func (node *NotExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("not %v", node.Expr)
}

// ParenBoolExpr represents a parenthesized boolean expression.
type ParenBoolExpr struct {
	Expr BoolExpr
}

func (*ParenBoolExpr) expr()     {}
func (*ParenBoolExpr) boolExpr() {}

func (node *ParenBoolExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("(%v)", node.Expr)
}

// ComparisonExpr represents a two-value comparison expression.
type ComparisonExpr struct {
	Operator    []byte
	Left, Right ValExpr
}

func (*ComparisonExpr) expr()     {}
func (*ComparisonExpr) boolExpr() {}

func (node *ComparisonExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("%v %s %v", node.Left, node.Operator, node.Right)
}

// InExpr represents an IN or NOT IN expression.
type InExpr struct {
	Negated bool
	Left    ValExpr
	Right   *Node
}

func (*InExpr) expr()     {}
func (*InExpr) boolExpr() {}

func (node *InExpr) Format(buf *TrackedBuffer) {
	op := "in"
	if node.Negated {
		op = "not in"
	}
	buf.Fprintf("%v %s %v", node.Left, op, node.Right)
}

// BetweenExpr represents a BETWEEN expression.
type BetweenExpr struct {
	Negated  bool
	Left     ValExpr
	From, To ValExpr
}

func (*BetweenExpr) expr()     {}
func (*BetweenExpr) boolExpr() {}

func (node *BetweenExpr) Format(buf *TrackedBuffer) {
	op := "between"
	if node.Negated {
		op = "not between"
	}
	buf.Fprintf("%v %s %v and %v", node.Left, op, node.From, node.To)
}

// IsNullExpr represents an IS NULL or an IS NOT NULL expression.
type IsNullExpr struct {
	Negated bool
	Expr    ValExpr
}

func (*IsNullExpr) expr()     {}
func (*IsNullExpr) boolExpr() {}

func (node *IsNullExpr) Format(buf *TrackedBuffer) {
	op := "is null"
	if node.Negated {
		op = "is not null"
	}
	buf.Fprintf("%v %s", node.Expr, op)
}

// ExistsExpr represents an EXISTS expression.
type ExistsExpr struct {
	Expr *Node
}

func (*ExistsExpr) expr()     {}
func (*ExistsExpr) boolExpr() {}

func (node *ExistsExpr) Format(buf *TrackedBuffer) {
	buf.Fprintf("exists %v", node.Expr)
}

// ValExpr represents a value expression.
type ValExpr interface {
	expr()
	valExpr()
}

// ValNode implements all value expressions.
// It's a standin till individual expressions are implemented.
type ValNode struct {
	Expr *Node
}

func (*ValNode) expr()    {}
func (*ValNode) valExpr() {}

func (node *ValNode) Format(buf *TrackedBuffer) {
	buf.Fprintf("%v", node.Expr)
}
