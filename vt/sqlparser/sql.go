//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	columnDefinitions []*ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const TABLE = 57437
const INDEX = 57438
const VIEW = 57439
const TO = 57440
const IGNORE = 57441
const IF = 57442
const UNIQUE = 57443
const USING = 57444
const PRIMARY = 57445
const SHOW = 57446
const DESCRIBE = 57447
const EXPLAIN = 57448
const DATE = 57449
const ESCAPE = 57450
const REPAIR = 57451
const OPTIMIZE = 57452
const TRUNCATE = 57453
const BIT = 57454
const TINYINT = 57455
const SMALLINT = 57456
const MEDIUMINT = 57457
const INT = 57458
const INTEGER = 57459
const BIGINT = 57460
const INTNUM = 57461
const REAL = 57462
const DOUBLE = 57463
const FLOAT_TYPE = 57464
const DECIMAL = 57465
const NUMERIC = 57466
const TIME = 57467
const TIMESTAMP = 57468
const DATETIME = 57469
const YEAR = 57470
const CHAR = 57471
const VARCHAR = 57472
const BOOL = 57473
const CHARACTER = 57474
const VARBINARY = 57475
const NCHAR = 57476
const TEXT = 57477
const TINYTEXT = 57478
const MEDIUMTEXT = 57479
const LONGTEXT = 57480
const BLOB = 57481
const TINYBLOB = 57482
const MEDIUMBLOB = 57483
const LONGBLOB = 57484
const JSON = 57485
const ENUM = 57486
const NULLX = 57487
const AUTO_INCREMENT = 57488
const APPROXNUM = 57489
const SIGNED = 57490
const UNSIGNED = 57491
const ZEROFILL = 57492
const DATABASES = 57493
const TABLES = 57494
const VITESS_KEYSPACES = 57495
const VITESS_SHARDS = 57496
const VSCHEMA_TABLES = 57497
const CURRENT_TIMESTAMP = 57498
const DATABASE = 57499
const CURRENT_DATE = 57500
const CURRENT_TIME = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const UTC_DATE = 57504
const UTC_TIME = 57505
const UTC_TIMESTAMP = 57506
const REPLACE = 57507
const CONVERT = 57508
const CAST = 57509
const GROUP_CONCAT = 57510
const SEPARATOR = 57511
const MATCH = 57512
const AGAINST = 57513
const BOOLEAN = 57514
const LANGUAGE = 57515
const WITH = 57516
const QUERY = 57517
const EXPANSION = 57518
const UNUSED = 57519

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 259,
	104, 439,
	-2, 435,
	-1, 260,
	104, 440,
	-2, 436,
	-1, 525,
	5, 21,
	-2, 387,
	-1, 561,
	104, 442,
	-2, 438,
	-1, 711,
	5, 22,
	-2, 266,
	-1, 801,
	5, 22,
	-2, 388,
	-1, 872,
	5, 21,
	-2, 390,
	-1, 937,
	5, 22,
	-2, 391,
}

const yyPrivate = 57344

const yyLast = 5365

var yyAct = [...]int{

	260, 484, 587, 816, 699, 364, 254, 291, 421, 600,
	663, 43, 877, 700, 560, 849, 553, 656, 564, 666,
	228, 771, 763, 278, 315, 62, 696, 563, 735, 633,
	102, 220, 425, 680, 573, 289, 280, 338, 596, 344,
	368, 293, 353, 262, 42, 47, 956, 244, 237, 255,
	615, 220, 220, 365, 3, 243, 242, 220, 952, 955,
	256, 668, 101, 949, 613, 49, 50, 51, 52, 954,
	314, 951, 948, 862, 221, 942, 451, 450, 460, 461,
	453, 454, 455, 456, 457, 458, 459, 452, 908, 618,
	462, 227, 247, 220, 266, 220, 731, 580, 612, 220,
	820, 218, 929, 588, 903, 901, 604, 222, 223, 224,
	225, 226, 850, 273, 575, 268, 376, 886, 92, 752,
	93, 250, 250, 258, 93, 754, 780, 250, 546, 548,
	496, 423, 431, 426, 852, 95, 96, 97, 575, 269,
	263, 439, 438, 714, 609, 614, 608, 713, 712, 98,
	854, 264, 858, 94, 853, 915, 851, 375, 440, 474,
	475, 856, 893, 250, 725, 250, 804, 775, 718, 250,
	855, 483, 380, 372, 277, 857, 859, 829, 452, 736,
	943, 462, 437, 462, 440, 611, 272, 640, 438, 379,
	864, 681, 439, 438, 781, 286, 665, 547, 588, 610,
	574, 638, 639, 637, 440, 572, 581, 571, 887, 440,
	885, 753, 681, 751, 787, 947, 626, 628, 629, 616,
	428, 627, 577, 729, 574, 377, 830, 578, 890, 922,
	617, 450, 460, 461, 453, 454, 455, 456, 457, 458,
	459, 452, 220, 340, 462, 511, 512, 346, 40, 220,
	220, 889, 220, 756, 757, 758, 744, 313, 636, 455,
	456, 457, 458, 459, 452, 743, 62, 462, 220, 732,
	220, 62, 657, 220, 658, 442, 220, 828, 940, 430,
	342, 932, 60, 782, 275, 888, 742, 341, 439, 438,
	247, 283, 339, 451, 450, 460, 461, 453, 454, 455,
	456, 457, 458, 459, 452, 440, 818, 462, 726, 441,
	257, 279, 250, 659, 917, 279, 439, 438, 420, 250,
	370, 274, 250, 866, 439, 438, 882, 881, 439, 438,
	472, 764, 926, 440, 821, 822, 823, 263, 250, 925,
	250, 440, 824, 250, 62, 440, 250, 443, 825, 220,
	769, 279, 220, 220, 220, 220, 671, 528, 256, 835,
	834, 513, 697, 220, 378, 514, 44, 220, 832, 831,
	220, 803, 279, 220, 378, 220, 220, 796, 485, 799,
	555, 351, 62, 671, 279, 494, 256, 550, 542, 543,
	554, 515, 833, 247, 247, 247, 247, 589, 590, 591,
	530, 525, 532, 769, 540, 552, 18, 529, 247, 531,
	549, 351, 279, 561, 382, 381, 247, 350, 769, 250,
	544, 258, 250, 250, 250, 250, 568, 220, 557, 602,
	351, 871, 220, 541, 769, 220, 62, 250, 719, 351,
	370, 558, 18, 551, 621, 250, 250, 509, 554, 258,
	40, 551, 40, 582, 18, 598, 599, 498, 499, 500,
	501, 502, 503, 504, 601, 523, 722, 524, 597, 592,
	634, 460, 461, 453, 454, 455, 456, 457, 458, 459,
	452, 234, 62, 462, 54, 521, 40, 635, 378, 91,
	476, 477, 478, 479, 480, 481, 62, 250, 40, 745,
	623, 624, 250, 630, 631, 250, 707, 697, 672, 434,
	660, 661, 559, 565, 16, 537, 561, 685, 953, 535,
	538, 683, 710, 424, 536, 40, 709, 62, 424, 534,
	698, 256, 678, 305, 304, 306, 307, 308, 309, 241,
	544, 539, 310, 359, 360, 706, 533, 688, 485, 701,
	689, 675, 676, 669, 551, 238, 239, 950, 669, 669,
	232, 755, 669, 622, 62, 715, 694, 728, 711, 693,
	345, 339, 717, 281, 737, 924, 669, 669, 669, 669,
	703, 923, 720, 343, 869, 282, 733, 734, 723, 797,
	606, 669, 433, 363, 258, 345, 583, 584, 585, 586,
	229, 517, 935, 840, 230, 62, 62, 724, 257, 235,
	236, 593, 594, 595, 747, 670, 716, 44, 738, 739,
	740, 934, 911, 451, 450, 460, 461, 453, 454, 455,
	456, 457, 458, 459, 452, 554, 257, 462, 424, 424,
	632, 912, 436, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 692, 46,
	48, 374, 634, 41, 1, 815, 691, 759, 570, 62,
	453, 454, 455, 456, 457, 458, 459, 452, 562, 635,
	462, 261, 748, 766, 673, 674, 53, 767, 677, 569,
	741, 220, 884, 424, 819, 565, 576, 778, 779, 730,
	579, 783, 684, 921, 686, 687, 789, 727, 790, 791,
	792, 793, 385, 786, 386, 384, 388, 695, 805, 62,
	62, 387, 62, 62, 383, 798, 800, 801, 802, 99,
	362, 367, 770, 777, 603, 669, 811, 55, 750, 662,
	814, 424, 749, 788, 607, 267, 220, 813, 470, 669,
	220, 690, 704, 682, 510, 316, 37, 337, 933, 910,
	785, 250, 826, 827, 485, 493, 679, 292, 625, 806,
	807, 303, 300, 62, 302, 301, 516, 522, 444, 290,
	284, 257, 545, 839, 705, 246, 347, 848, 354, 844,
	847, 352, 843, 37, 845, 252, 863, 220, 861, 860,
	245, 233, 868, 795, 62, 62, 248, 907, 561, 62,
	62, 62, 867, 870, 62, 941, 250, 520, 19, 45,
	250, 424, 879, 880, 701, 838, 876, 240, 15, 14,
	13, 12, 720, 23, 760, 761, 762, 62, 247, 11,
	669, 10, 9, 8, 7, 891, 551, 669, 6, 865,
	812, 565, 5, 565, 4, 231, 872, 17, 2, 0,
	0, 768, 746, 424, 899, 0, 0, 250, 0, 0,
	0, 0, 894, 895, 0, 784, 913, 0, 0, 0,
	0, 0, 0, 62, 904, 905, 920, 0, 0, 249,
	0, 0, 0, 0, 62, 0, 701, 0, 0, 0,
	928, 916, 0, 918, 919, 0, 0, 670, 355, 358,
	359, 360, 356, 0, 357, 361, 62, 0, 62, 936,
	256, 0, 0, 0, 0, 0, 773, 914, 909, 0,
	0, 931, 0, 0, 0, 0, 0, 945, 937, 0,
	0, 253, 0, 0, 0, 565, 265, 0, 451, 450,
	460, 461, 453, 454, 455, 456, 457, 458, 459, 452,
	841, 842, 462, 0, 0, 946, 0, 0, 355, 358,
	359, 360, 356, 0, 357, 361, 424, 424, 708, 424,
	817, 0, 270, 258, 271, 765, 0, 0, 276, 37,
	0, 0, 0, 0, 0, 0, 944, 485, 0, 0,
	0, 0, 0, 0, 366, 451, 450, 460, 461, 453,
	454, 455, 456, 457, 458, 459, 452, 0, 0, 462,
	0, 422, 0, 0, 883, 812, 422, 0, 0, 0,
	773, 0, 0, 424, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 471, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 897, 0,
	898, 874, 875, 900, 0, 902, 878, 878, 878, 482,
	0, 424, 486, 487, 488, 489, 490, 491, 492, 0,
	495, 497, 497, 497, 497, 497, 497, 497, 497, 505,
	506, 507, 508, 0, 424, 0, 0, 0, 0, 0,
	0, 0, 930, 526, 0, 0, 0, 248, 248, 248,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 0, 0, 0, 0, 0, 0,
	248, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 424, 0, 0, 0, 0, 0, 427, 0, 429,
	0, 0, 432, 0, 0, 435, 0, 0, 0, 0,
	257, 0, 0, 938, 78, 939, 0, 664, 0, 288,
	0, 0, 0, 70, 0, 287, 0, 0, 324, 75,
	0, 422, 82, 76, 0, 0, 0, 0, 317, 318,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	259, 305, 304, 306, 307, 308, 309, 0, 0, 67,
	310, 311, 312, 0, 0, 285, 298, 0, 323, 37,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 486, 0, 0, 0, 0, 0, 295, 296,
	667, 0, 0, 0, 335, 0, 297, 0, 0, 294,
	299, 0, 0, 0, 0, 556, 0, 0, 0, 0,
	0, 217, 0, 0, 333, 0, 0, 0, 0, 0,
	702, 68, 37, 81, 79, 87, 65, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 69, 90, 0, 0, 66, 0, 0, 77, 84,
	0, 0, 0, 0, 0, 0, 605, 73, 71, 0,
	64, 619, 83, 0, 620, 0, 0, 0, 0, 0,
	325, 334, 331, 332, 329, 330, 328, 327, 326, 336,
	319, 320, 322, 0, 321, 63, 0, 74, 89, 80,
	72, 88, 0, 78, 0, 0, 0, 0, 288, 0,
	0, 422, 70, 0, 287, 0, 0, 324, 75, 0,
	0, 82, 76, 0, 0, 0, 0, 317, 318, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 259,
	305, 304, 306, 307, 308, 309, 0, 0, 67, 310,
	311, 312, 0, 0, 285, 298, 0, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 776, 295, 296, 667,
	0, 0, 0, 335, 0, 297, 0, 0, 294, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	68, 0, 81, 79, 87, 65, 0, 0, 808, 809,
	810, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	69, 90, 0, 0, 66, 0, 0, 77, 84, 0,
	0, 0, 0, 0, 0, 0, 73, 71, 0, 64,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 325,
	334, 331, 332, 329, 330, 328, 327, 326, 336, 319,
	320, 322, 0, 321, 63, 0, 74, 89, 80, 72,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 0, 0,
	0, 0, 248, 0, 0, 702, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	0, 0, 0, 408, 409, 410, 411, 412, 413, 414,
	794, 415, 416, 417, 418, 419, 404, 405, 406, 407,
	389, 390, 422, 0, 392, 0, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 0, 37,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 837,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 0, 0, 0, 61, 0,
	566, 567, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 721, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 0, 0, 0, 61, 0,
	566, 567, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 0, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 0, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 927, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 40, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 0, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 0, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 846, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 0, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 0, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 0, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	199, 185, 149, 202, 125, 141, 215, 142, 143, 177,
	110, 159, 78, 139, 0, 128, 104, 135, 105, 126,
	153, 70, 156, 124, 187, 164, 208, 75, 171, 0,
	82, 76, 0, 0, 155, 190, 157, 184, 148, 178,
	117, 170, 203, 140, 175, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 173, 198,
	137, 176, 103, 172, 0, 106, 111, 214, 193, 132,
	133, 0, 0, 0, 0, 0, 0, 0, 154, 158,
	181, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 169, 0, 0, 0, 114, 108, 152, 0,
	0, 0, 116, 0, 131, 182, 0, 191, 147, 217,
	197, 145, 144, 200, 204, 179, 188, 127, 136, 68,
	134, 81, 79, 87, 65, 195, 189, 167, 150, 151,
	107, 0, 180, 130, 138, 123, 174, 85, 86, 69,
	90, 112, 210, 66, 113, 209, 77, 84, 196, 168,
	161, 109, 194, 166, 160, 73, 71, 0, 64, 0,
	83, 201, 216, 122, 192, 211, 212, 213, 120, 121,
	118, 119, 162, 163, 205, 206, 207, 183, 115, 0,
	0, 186, 165, 63, 0, 74, 89, 80, 72, 88,
	78, 0, 0, 0, 0, 288, 0, 0, 0, 70,
	0, 287, 0, 0, 324, 75, 0, 0, 82, 76,
	0, 0, 0, 0, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 279, 259, 305, 304, 306,
	307, 308, 309, 0, 0, 67, 310, 311, 312, 0,
	0, 285, 298, 0, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 296, 0, 0, 0, 0,
	335, 0, 297, 0, 0, 294, 299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 68, 0, 81,
	79, 87, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 69, 90, 0,
	0, 66, 0, 0, 77, 84, 0, 0, 0, 0,
	0, 0, 0, 73, 71, 0, 64, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 325, 334, 331, 332,
	329, 330, 328, 327, 326, 336, 319, 320, 322, 18,
	321, 63, 0, 74, 89, 80, 72, 88, 0, 0,
	78, 0, 0, 0, 0, 288, 0, 0, 0, 70,
	0, 287, 0, 0, 324, 75, 0, 0, 82, 76,
	0, 0, 0, 0, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 259, 305, 304, 306,
	307, 308, 309, 0, 0, 67, 310, 311, 312, 0,
	0, 285, 298, 0, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 296, 0, 0, 0, 0,
	335, 0, 297, 0, 0, 294, 299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 68, 0, 81,
	79, 87, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 69, 90, 0,
	0, 66, 0, 0, 77, 84, 0, 0, 0, 0,
	0, 0, 0, 73, 71, 0, 64, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 325, 334, 331, 332,
	329, 330, 328, 327, 326, 336, 319, 320, 322, 0,
	321, 63, 0, 74, 89, 80, 72, 88, 78, 0,
	0, 0, 0, 288, 0, 0, 0, 70, 0, 287,
	0, 0, 324, 75, 0, 0, 82, 76, 0, 0,
	0, 0, 317, 318, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 259, 305, 304, 306, 307, 308,
	309, 0, 0, 67, 310, 311, 312, 0, 0, 285,
	298, 0, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 296, 0, 0, 0, 0, 335, 0,
	297, 0, 0, 294, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 68, 0, 81, 79, 87,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 69, 90, 0, 0, 66,
	0, 0, 77, 84, 0, 0, 0, 0, 0, 0,
	0, 73, 71, 0, 64, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 325, 334, 331, 332, 329, 330,
	328, 327, 326, 336, 319, 320, 322, 78, 321, 63,
	0, 74, 89, 80, 72, 88, 70, 0, 0, 0,
	0, 324, 75, 0, 0, 82, 76, 0, 0, 0,
	0, 317, 318, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 259, 305, 304, 306, 307, 308, 309,
	0, 0, 67, 310, 311, 312, 0, 0, 0, 298,
	0, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 296, 0, 0, 0, 0, 335, 0, 297,
	0, 0, 294, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 333, 0, 0,
	0, 0, 0, 0, 68, 0, 81, 79, 87, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 86, 69, 90, 0, 0, 66, 0,
	0, 77, 84, 78, 0, 0, 0, 0, 0, 0,
	73, 71, 70, 64, 0, 83, 0, 0, 75, 0,
	0, 82, 76, 325, 334, 331, 332, 329, 330, 328,
	327, 326, 336, 319, 320, 322, 0, 321, 63, 61,
	74, 89, 80, 72, 88, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 451, 450, 460, 461, 453, 454, 455,
	456, 457, 458, 459, 452, 0, 0, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	68, 772, 81, 79, 87, 65, 70, 0, 0, 0,
	0, 0, 75, 0, 0, 82, 76, 0, 85, 86,
	69, 90, 0, 0, 66, 0, 0, 77, 84, 0,
	0, 0, 0, 61, 0, 774, 73, 71, 0, 64,
	0, 83, 67, 0, 0, 0, 439, 438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 63, 0, 74, 89, 80, 72,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 0, 217, 0, 75, 0, 0, 82,
	76, 0, 0, 0, 68, 0, 81, 79, 87, 65,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 85, 86, 69, 90, 67, 0, 66, 0,
	57, 77, 84, 0, 0, 0, 0, 0, 0, 0,
	73, 71, 0, 64, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 18, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 0, 63, 0,
	74, 89, 80, 72, 88, 70, 58, 0, 56, 0,
	0, 75, 59, 0, 82, 76, 0, 0, 68, 0,
	81, 79, 87, 65, 0, 0, 0, 0, 0, 40,
	0, 0, 61, 0, 0, 0, 85, 86, 69, 90,
	0, 67, 66, 0, 0, 77, 84, 0, 0, 0,
	0, 0, 0, 0, 73, 71, 0, 64, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 18,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 63, 0, 74, 89, 80, 72, 88, 70,
	0, 0, 0, 217, 0, 75, 0, 0, 82, 76,
	0, 0, 0, 68, 0, 81, 79, 87, 65, 0,
	0, 0, 0, 40, 0, 0, 219, 0, 0, 0,
	0, 85, 86, 69, 90, 67, 0, 66, 0, 0,
	77, 84, 0, 0, 0, 0, 0, 0, 0, 73,
	71, 0, 64, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 74,
	89, 80, 72, 88, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 81,
	79, 87, 65, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 0, 85, 86, 69, 90, 75,
	0, 66, 82, 76, 77, 84, 0, 0, 0, 0,
	0, 0, 0, 73, 71, 0, 64, 0, 83, 0,
	61, 0, 0, 518, 0, 0, 519, 0, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 74, 89, 80, 72, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 369, 0, 0, 0, 0, 70, 0, 0,
	0, 217, 0, 75, 0, 0, 82, 76, 0, 0,
	0, 68, 0, 81, 79, 87, 65, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 371, 0, 0, 85,
	86, 69, 90, 67, 0, 66, 0, 0, 77, 84,
	0, 0, 0, 0, 0, 0, 0, 73, 71, 0,
	64, 0, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 63, 0, 74, 89, 80,
	72, 88, 70, 0, 0, 217, 0, 0, 75, 0,
	0, 82, 76, 0, 0, 68, 0, 81, 79, 87,
	65, 0, 0, 0, 0, 0, 40, 0, 0, 219,
	0, 0, 0, 85, 86, 69, 90, 0, 67, 66,
	0, 0, 77, 84, 0, 0, 0, 0, 0, 0,
	78, 73, 71, 0, 64, 0, 83, 0, 0, 70,
	0, 0, 0, 0, 0, 75, 0, 0, 82, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 74, 89, 80, 72, 88, 61, 0, 774, 0,
	217, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	68, 0, 81, 79, 87, 65, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 85, 86,
	69, 90, 75, 0, 66, 82, 76, 77, 84, 0,
	0, 0, 0, 0, 0, 0, 73, 71, 0, 64,
	0, 83, 0, 219, 0, 371, 0, 217, 0, 0,
	0, 0, 67, 0, 0, 0, 0, 68, 0, 81,
	79, 87, 65, 0, 63, 0, 74, 89, 80, 72,
	88, 0, 0, 0, 0, 85, 86, 69, 90, 0,
	0, 66, 0, 0, 77, 84, 0, 0, 0, 0,
	0, 0, 78, 73, 71, 0, 64, 0, 83, 0,
	348, 70, 0, 0, 217, 0, 0, 75, 0, 0,
	82, 76, 0, 0, 68, 0, 81, 79, 87, 65,
	0, 63, 0, 74, 89, 80, 72, 88, 219, 0,
	0, 0, 85, 86, 69, 90, 0, 67, 66, 0,
	0, 77, 84, 0, 0, 0, 0, 0, 0, 0,
	73, 71, 0, 64, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 0, 0, 78, 0, 63, 0,
	74, 89, 80, 72, 88, 70, 0, 0, 0, 217,
	0, 75, 0, 0, 82, 76, 0, 0, 0, 68,
	0, 81, 79, 87, 65, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 85, 86, 69,
	90, 67, 0, 66, 0, 0, 77, 84, 0, 0,
	0, 0, 0, 0, 78, 73, 71, 0, 64, 0,
	83, 0, 0, 70, 0, 0, 0, 0, 0, 75,
	0, 0, 82, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 74, 89, 80, 72, 88,
	61, 0, 0, 217, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 68, 0, 81, 79, 87, 65, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	0, 85, 86, 69, 90, 75, 0, 66, 82, 76,
	77, 84, 0, 0, 0, 0, 0, 0, 0, 73,
	71, 0, 64, 0, 83, 0, 259, 0, 0, 0,
	0, 217, 0, 0, 0, 67, 0, 0, 0, 0,
	0, 68, 0, 81, 79, 87, 65, 63, 78, 74,
	89, 80, 72, 88, 0, 0, 0, 70, 0, 85,
	86, 69, 90, 75, 0, 66, 82, 76, 77, 84,
	0, 0, 0, 0, 0, 0, 0, 73, 71, 0,
	64, 0, 83, 0, 219, 0, 0, 217, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 68, 0, 81,
	79, 87, 65, 0, 0, 63, 0, 74, 89, 80,
	72, 88, 0, 0, 0, 85, 86, 69, 90, 0,
	0, 66, 0, 0, 77, 84, 0, 0, 18, 38,
	20, 21, 0, 73, 71, 0, 64, 0, 83, 0,
	0, 0, 0, 0, 0, 217, 31, 0, 0, 0,
	0, 22, 0, 0, 0, 68, 0, 81, 79, 87,
	65, 63, 0, 74, 89, 80, 72, 88, 0, 30,
	0, 0, 40, 85, 86, 69, 90, 0, 0, 66,
	0, 0, 77, 84, 0, 0, 0, 0, 0, 0,
	0, 73, 71, 0, 64, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 74, 89, 80, 72, 88, 0, 0, 0, 24,
	25, 27, 26, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 29, 32, 33, 0, 0, 34, 35,
	36, 446, 0, 449, 0, 0, 0, 0, 0, 463,
	464, 465, 466, 467, 468, 469, 0, 447, 448, 445,
	451, 450, 460, 461, 453, 454, 455, 456, 457, 458,
	459, 452, 0, 0, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39,
}
var yyPact = [...]int{

	5182, -1000, -151, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 603, 654, -1000, -1000,
	-1000, -1000, -1000, 434, 4184, 4, 41, 23, 37, 3155,
	5091, -1000, -1000, -1000, -1000, -1000, -1000, 448, -1000, -1000,
	-1000, -1000, -1000, 584, 589, 475, 590, 518, -1000, 8,
	4636, 4919, 5033, -1000, 284, 38, 5091, -88, -2, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 27, 5091, -1000, 5091, -4, 268, -4, 5091, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 259, 555, 3691,
	3691, 603, -1000, 448, -1000, -1000, -1000, 550, -1000, -1000,
	186, 4835, 388, 869, -1000, -1000, -1000, 572, 4353, 4551,
	69, 5091, 106, -1000, 323, -1000, 113, -1000, 68, -1000,
	-1000, 363, -1000, 1444, 265, 2205, 19, 5091, 152, 5091,
	2205, 17, 5091, 570, 460, 5091, -1000, -1000, -1000, -1000,
	-1000, 634, 96, 258, -1000, 3691, 5243, 402, 402, -1000,
	-1000, 54, -1000, -1000, 3860, 3860, 3860, 3860, 3860, 3860,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 402, 67, -1000, 3513, 402, 402, 402,
	402, 402, 402, 3691, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 396, -1000, 222,
	584, 259, 518, 4467, 445, -1000, -1000, 436, 5091, -1000,
	5033, 4636, 4636, 4636, 4636, -1000, 507, 490, -1000, 480,
	476, 502, 5091, -1000, 360, 259, 4353, 81, -1000, 4750,
	-1000, -1000, 2965, 624, 4636, 5091, -1000, -1000, 5033, 3691,
	2775, 1825, 87, 159, -69, -1000, -1000, 403, -1000, 403,
	403, 403, 403, -46, -46, -46, -46, -1000, -1000, -1000,
	-1000, -1000, 419, -1000, 403, 403, 403, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 418, 418, 418, 414, 414,
	-13, -1000, -1000, -1000, -1000, -1000, 5091, -1000, 568, 36,
	-1000, 5091, -1000, -1000, 5091, 2205, -1000, 528, 3691, 3691,
	153, 3691, 3691, 101, 3860, 198, 117, 3860, 3860, 3860,
	3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860,
	3860, 3860, 219, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 260, -1000, 448, 479, 479, 82, 82, 82, 82,
	82, 3996, 1157, 2775, 332, 126, 3513, 1336, 1336, 3691,
	3691, 1336, 575, 119, 126, 4977, -1000, 259, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1336, 1336, 1336, 1336, 3691,
	-1000, -1000, -1000, 555, -1000, 575, 648, -1000, 538, 535,
	1336, -1000, 458, 5033, 402, -1000, 4269, -1000, 437, 869,
	457, 929, -1000, -1000, -1000, -1000, 487, -1000, 483, -1000,
	-1000, -1000, -1000, -1000, 259, -1000, 35, 34, 30, -1000,
	-1000, -1000, -1000, 603, 3691, 379, -1000, -1000, 126, -1000,
	64, -1000, 387, 1635, -1000, -1000, -1000, -1000, -1000, -1000,
	416, 561, 111, 255, -1000, -1000, 539, -1000, 160, -71,
	-1000, -1000, 213, -46, -46, -1000, -1000, 78, 545, 78,
	78, 78, 231, -1000, -1000, -1000, -1000, 209, -1000, -1000,
	-1000, 200, -1000, 450, 4977, 2205, -1000, -1000, 98, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 525, 101, 121, -1000, -1000, 190, -1000, -1000,
	126, 126, 861, -1000, -1000, -1000, -1000, 198, 3860, 3860,
	3860, 206, 861, 918, 382, 143, 82, 166, 166, 80,
	80, 80, 80, 80, 579, 579, -1000, -1000, -1000, 259,
	-1000, -1000, -1000, 259, 1336, 383, -1000, -1000, 4100, 63,
	402, 3691, -1000, 299, 299, 75, 262, 299, 1336, 140,
	-1000, 3691, 259, -1000, 299, 259, 299, 299, -1000, -1000,
	5091, -1000, -1000, -1000, -1000, 367, -1000, 563, 313, 328,
	-1000, -1000, 3333, 259, 320, 62, 603, 3691, 3691, -1000,
	-1000, -1000, 402, 402, 402, 584, 126, -1000, 2585, 1825,
	-1000, 1825, 4977, -1000, 253, -1000, -1000, -63, 279, -1000,
	-1000, -1000, 296, 78, 78, -1000, 224, 124, -1000, -1000,
	-1000, 317, -1000, 341, 308, 5091, -1000, -1000, -1000, 5091,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	206, 861, 536, -1000, 3860, 3860, -1000, -1000, 299, 1336,
	-1000, -1000, 4693, -1000, -1000, 2395, 1336, 126, -1000, -1000,
	10, 219, 10, -115, 352, 115, -1000, 3691, 250, -1000,
	-1000, -1000, -1000, -1000, -1000, 624, 4636, 557, -1000, 402,
	-1000, -1000, 400, 4977, 4977, 584, 126, 126, 4977, 4977,
	4977, -1000, -1000, 1635, -1000, 275, -1000, 403, -1000, 90,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 230, 195, -1000, 172, 2205, -1000, -1000, -1000,
	3860, 861, 861, -1000, -1000, -1000, -1000, 58, 259, 259,
	403, 403, -1000, 403, 414, -1000, 403, -29, 403, -30,
	259, 259, 402, -98, -1000, 126, 3691, 610, 330, 633,
	-1000, 402, -1000, 448, 51, -1000, -1000, 263, -1000, 263,
	263, -1000, 4977, -1000, 167, 554, -1000, 548, -1000, 287,
	280, -1000, 861, 2015, -1000, -1000, -1000, 49, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3860, 259, 226, 126,
	608, 587, 5033, 328, 259, 4977, -1000, 4977, -1000, -1000,
	-1000, -1000, 223, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-11, -1000, -1000, -1000, 3691, 3691, 323, -1000, -1000, -1000,
	-1000, 259, 26, -129, 126, 305, -1000, 521, -119, -135,
	-1000, 482, -1000, -122, -133, -147, -1000,
}
var yyPgo = [...]int{

	0, 858, 53, 514, 857, 855, 854, 852, 848, 844,
	843, 842, 841, 839, 833, 831, 830, 829, 828, 45,
	827, 819, 818, 39, 817, 48, 815, 807, 22, 196,
	10, 19, 61, 803, 5, 55, 47, 800, 795, 791,
	42, 788, 889, 786, 785, 782, 12, 16, 780, 779,
	778, 777, 35, 195, 776, 775, 774, 772, 771, 768,
	29, 1, 4, 24, 13, 767, 41, 7, 766, 33,
	765, 760, 759, 758, 11, 757, 37, 754, 20, 36,
	752, 26, 6, 49, 751, 489, 748, 186, 745, 744,
	742, 738, 737, 734, 32, 0, 257, 131, 21, 732,
	70, 14, 40, 731, 730, 74, 8, 17, 15, 729,
	724, 721, 716, 715, 714, 712, 206, 707, 703, 2,
	28, 700, 699, 38, 9, 696, 694, 692, 690, 43,
	689, 34, 686, 681, 678, 27, 18, 668, 3, 665,
	664, 663, 755, 23, 661, 660, 130,
}
var yyR1 = [...]int{

	0, 140, 141, 141, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 22, 22, 7,
	8, 8, 144, 144, 38, 38, 9, 10, 10, 10,
	10, 14, 132, 133, 133, 133, 129, 110, 110, 110,
	113, 113, 111, 111, 111, 111, 111, 111, 111, 112,
	112, 112, 112, 112, 114, 114, 114, 114, 114, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 128, 128, 116, 116, 123, 123, 124,
	124, 124, 121, 121, 122, 122, 125, 125, 125, 117,
	117, 117, 117, 117, 126, 126, 119, 119, 119, 120,
	120, 127, 127, 127, 127, 127, 118, 118, 130, 137,
	137, 137, 137, 131, 131, 139, 139, 138, 134, 134,
	134, 135, 135, 135, 136, 136, 136, 11, 11, 11,
	11, 12, 13, 13, 13, 15, 109, 109, 109, 16,
	17, 18, 18, 18, 18, 18, 18, 145, 19, 20,
	20, 21, 21, 21, 25, 25, 25, 23, 23, 24,
	24, 30, 30, 29, 29, 31, 31, 31, 31, 99,
	99, 99, 98, 98, 33, 33, 34, 34, 35, 35,
	36, 36, 36, 44, 37, 37, 37, 37, 104, 104,
	103, 103, 103, 102, 102, 39, 39, 39, 39, 40,
	40, 40, 40, 41, 41, 43, 43, 42, 42, 45,
	45, 45, 45, 46, 46, 47, 47, 32, 32, 32,
	32, 32, 32, 32, 86, 86, 49, 49, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 59, 59,
	59, 59, 59, 59, 50, 50, 50, 50, 50, 50,
	50, 28, 28, 60, 60, 60, 66, 61, 61, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 57,
	57, 57, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 56, 56, 56, 56, 56, 56, 56, 56, 146,
	146, 58, 58, 58, 58, 26, 26, 26, 26, 26,
	107, 107, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 70, 70, 27, 27, 68,
	68, 69, 71, 71, 67, 67, 67, 52, 52, 52,
	52, 52, 52, 52, 54, 54, 54, 72, 72, 73,
	73, 74, 74, 75, 75, 76, 77, 77, 77, 78,
	78, 78, 78, 79, 79, 79, 51, 51, 51, 51,
	51, 51, 80, 80, 80, 80, 81, 81, 62, 62,
	64, 64, 63, 65, 82, 82, 83, 84, 84, 87,
	87, 88, 88, 85, 85, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 90, 90, 90, 91, 91,
	92, 92, 92, 93, 93, 96, 96, 97, 97, 100,
	100, 101, 101, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 142, 143, 105, 106,
	106, 106,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 2, 8, 4,
	6, 4, 4, 1, 3, 3, 7, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 4, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 4, 5, 5, 3, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 3, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -140, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -15, -16, -17, -18, -3, -4, 6, -22,
	8, 9, 29, -14, 107, 108, 110, 109, 111, 121,
	47, 24, 122, 123, 126, 127, 128, -142, 7, 182,
	50, -141, 195, -74, 14, -21, 5, -19, -145, -19,
	-19, -19, -19, -132, 50, -92, 114, 66, 112, 118,
	-96, 53, -95, 188, 163, 129, 148, 62, 124, 144,
	26, 161, 193, 160, 190, 32, 36, 151, 17, 127,
	192, 126, 35, 165, 152, 142, 143, 128, 194, 191,
	145, -85, 114, 116, 112, 112, 113, 114, 112, -109,
	53, -94, -95, 67, 21, 23, 70, 135, 102, 156,
	15, 71, 146, 149, 101, 183, 107, 45, 175, 176,
	173, 174, 168, 140, 28, 9, 24, 122, 20, 95,
	138, 109, 74, 75, 125, 22, 123, 65, 139, 18,
	48, 10, 12, 13, 117, 116, 86, 113, 43, 7,
	133, 134, 103, 25, 83, 39, 27, 41, 84, 16,
	159, 155, 177, 178, 30, 187, 158, 132, 154, 97,
	46, 33, 68, 63, 141, 49, 66, 14, 44, 120,
	137, 85, 110, 182, 42, 6, 186, 29, 121, 131,
	40, 112, 169, 73, 157, 130, 153, 115, 64, 5,
	118, 166, 8, 47, 119, 179, 180, 181, 31, 150,
	147, 170, 171, 172, 72, 11, 167, 114, -100, 53,
	-95, -105, -105, -105, -105, -105, -105, -2, -78, 16,
	15, -5, -3, -142, 6, 19, 20, -25, 37, 38,
	-20, -85, -34, -35, -36, -37, -44, -66, -142, -42,
	-100, 10, -38, -42, -82, -83, -67, -96, -100, 53,
	-95, -133, -129, 53, 113, -42, 182, -88, 117, 112,
	-42, -42, -87, 117, 53, -87, -42, -105, -143, 52,
	-79, 18, 30, -32, -48, 68, -53, 28, 22, -52,
	-49, -67, -65, -66, 102, 91, 92, 99, 69, 103,
	-57, -55, -56, -58, 55, 54, 56, 57, 58, 59,
	63, 64, 65, -96, -100, -63, -142, 41, 42, 183,
	184, 187, 185, 71, 31, 173, 181, 180, 179, 177,
	178, 175, 176, 117, 174, 97, 182, -75, -76, -32,
	-74, -2, -19, 33, -23, 20, 61, -43, 25, -42,
	29, 51, -39, -40, -41, 39, 43, 45, 40, 41,
	42, 46, -104, 21, -34, -2, -142, -103, -102, 21,
	-100, 55, 104, -42, -144, 51, 10, 119, 51, 76,
	104, 52, 51, -110, -113, -115, -114, -111, -112, 146,
	147, 102, 150, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 124, 142, 143, 144, 145, 129, 130,
	131, 132, 133, 134, 135, 137, 138, 139, 140, 141,
	53, -106, -142, -97, -96, -94, 114, -42, 68, -42,
	-106, 115, -42, 22, 49, -42, 8, 86, 67, 66,
	83, 51, 17, -32, -50, 86, 68, 84, 85, 70,
	88, 87, 98, 91, 92, 93, 94, 95, 96, 97,
	89, 90, 101, 76, 77, 78, 79, 80, 81, 82,
	-86, -142, -66, -142, 105, 106, -53, -53, -53, -53,
	-53, -53, -142, 104, -61, -32, -142, -142, -142, -142,
	-142, -142, -142, -70, -32, -142, -146, -142, -146, -146,
	-146, -146, -146, -146, -146, -142, -142, -142, -142, 51,
	-77, 23, 24, -78, -143, -25, -54, -96, 56, 59,
	-24, 40, -51, 29, 31, -2, -142, -42, -82, -35,
	-36, -35, -36, 39, 39, 39, 44, 39, 44, 39,
	-40, -100, -143, -143, -2, -45, 47, 116, 48, -102,
	-101, -100, -94, -47, 11, -34, -42, -83, -32, -97,
	-101, -94, -134, -135, -136, -97, 55, 56, -129, -130,
	-137, 120, 118, -131, 113, 27, -125, 63, 68, -121,
	166, -116, 50, -116, -116, -116, -116, -119, 149, -119,
	-119, -119, 50, -116, -116, -116, -123, 50, -123, -123,
	-124, 50, -124, -93, 119, -42, 22, -89, 110, 108,
	163, 149, 62, 28, 109, 14, 183, 194, 53, -42,
	-42, -106, 35, -32, -32, -59, 63, 68, 64, 65,
	-32, -32, -53, -60, -63, -66, 60, 86, 84, 85,
	70, -53, -53, -53, -53, -53, -53, -53, -53, -53,
	-53, -53, -53, -53, -53, -53, -107, 53, 55, 53,
	-52, -52, -96, -30, 20, -29, -31, 93, -32, -100,
	-97, 51, -143, -29, -29, -32, -32, -29, -23, -68,
	-69, 72, -96, -143, -29, -30, -29, -29, -76, -79,
	-84, 18, 10, 31, 31, -29, -81, 49, -82, -62,
	-64, -63, -142, -2, -80, -96, -47, 49, 49, 39,
	39, -143, 113, 113, 113, -74, -32, -47, 104, 51,
	-136, 76, 50, 27, -131, 53, 53, -117, 28, 63,
	-122, 167, 56, -119, -119, -120, 101, 29, -120, -120,
	-120, -128, 55, 56, 56, 49, -96, -106, -105, -90,
	-91, 115, 21, 113, 27, 36, 63, 64, 65, -60,
	-53, -53, -53, -28, 125, 67, -143, -143, -29, 51,
	-99, -98, 21, -96, 55, 104, -142, -32, -143, -143,
	51, 119, 21, -143, -29, -71, -69, 74, -32, -143,
	-143, -143, -143, -143, -42, -33, 10, 26, -81, 51,
	-143, -143, -143, 51, 104, -74, -32, -32, -142, -142,
	-142, -78, -97, -135, -136, -139, -138, -96, 53, -126,
	163, 55, 56, 57, 63, 52, -120, -120, 53, 53,
	102, 52, 51, 51, 52, 51, -42, -42, -105, -28,
	67, -53, -53, -143, -31, -98, 93, -101, -30, -108,
	102, 146, 124, 144, 140, 160, 151, 165, 142, 166,
	-107, -108, 188, -74, 75, -32, 73, -47, -34, 27,
	-64, 31, -2, -142, -96, -96, -78, -46, -96, -46,
	-46, 52, 51, -116, -127, 120, 27, 118, 55, 56,
	56, -106, -53, 104, -143, -143, -116, -116, -116, -124,
	-116, 134, -116, 134, -143, -143, -142, -27, 186, -32,
	-72, 12, 8, -62, -2, 104, -143, 51, -143, -143,
	-138, -118, 62, 27, 27, 52, 52, 93, -119, 53,
	-53, -143, 55, -73, 13, 15, -82, -143, -96, -96,
	55, -26, 86, 191, -32, -61, -143, 189, 46, 192,
	36, 190, 193, 36, 191, 192, 193,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 371, 0, 157, 157,
	157, 157, 157, 0, 430, 413, 0, 0, 0, 0,
	0, 588, 588, 588, 588, 588, 588, 0, 27, 28,
	586, 1, 3, 379, 0, 0, 161, 164, 159, 413,
	0, 0, 0, 37, 0, 0, 583, 0, 411, 431,
	432, 435, 436, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 584,
	585, 0, 0, 414, 0, 409, 0, 409, 0, 588,
	146, 147, 148, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 583, 150, 439,
	440, 151, 152, 153, 154, 155, 156, 21, 383, 0,
	0, 371, 23, 0, 157, 162, 163, 167, 165, 166,
	158, 0, 0, 186, 188, 189, 190, 198, 0, 200,
	217, 0, 0, 34, 36, 404, 0, 354, 0, -2,
	-2, 0, 43, 0, 0, 589, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 145, 149, 22, 587,
	17, 0, 0, 380, 227, 0, 232, 234, 0, 269,
	270, 271, 272, 273, 0, 0, 0, 0, 0, 0,
	295, 296, 297, 298, 357, 358, 359, 360, 361, 362,
	363, 236, 237, 354, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 319, 319, 319, 319, 319,
	319, 319, 319, 0, 0, 0, 0, 372, 373, 376,
	379, 21, 164, 0, 169, 168, 160, 0, 0, 216,
	0, 0, 0, 0, 0, 205, 0, 0, 208, 0,
	0, 0, 0, 199, 0, 21, 0, 219, 201, 0,
	203, 204, 0, 225, 0, 0, 32, 33, 0, 0,
	0, 128, 0, 96, 92, 48, 49, 85, 51, 85,
	85, 85, 85, 106, 106, 106, 106, 77, 78, 79,
	80, 81, 0, 64, 85, 85, 85, 68, 52, 53,
	54, 55, 56, 57, 58, 87, 87, 87, 89, 89,
	433, 39, 590, 591, 437, 438, 0, 41, 0, 0,
	140, 0, 142, 410, 0, 589, 384, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 255, 256, 257, 258, 259, 260,
	233, 0, 247, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 171, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 167, 0, 346, 0, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 0, 171, 0, 0, 0,
	375, 377, 378, 383, 24, 167, 0, 364, 0, 0,
	0, 170, 396, 0, 0, -2, 0, 215, 225, 187,
	194, 0, 197, 206, 207, 209, 0, 211, 0, 213,
	214, 191, 192, 266, 21, 193, 0, 0, 0, 202,
	218, 441, 442, 371, 0, 225, 35, 405, 406, 355,
	0, -2, 42, 129, 131, 134, 135, 136, 44, 45,
	0, 0, 0, 0, 123, 124, 99, 97, 0, 94,
	93, 50, 0, 106, 106, 71, 72, 109, 0, 109,
	109, 109, 0, 65, 66, 67, 59, 0, 60, 61,
	62, 0, 63, 0, 0, 589, 412, 588, 425, 415,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 141,
	143, 144, 0, 228, 229, 231, 248, 0, 250, 252,
	381, 382, 238, 239, 263, 264, 265, 0, 0, 0,
	0, 261, 243, 0, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 288, 330, 331, 0,
	286, 287, 294, 0, 0, 172, 173, 175, 179, 0,
	355, 0, 402, 0, 0, 0, 0, 0, 0, 352,
	349, 0, 0, 320, 0, 0, 0, 0, 374, 18,
	0, 407, 408, 365, 366, 184, 25, 0, 396, 386,
	398, 400, 0, 21, 0, 392, 371, 0, 0, 210,
	212, -2, 0, 0, 0, 379, 226, 31, 0, 0,
	132, 0, 0, 119, 0, 121, 122, 104, 0, 98,
	47, 95, 0, 109, 109, 73, 0, 0, 74, 75,
	76, 0, 83, 0, 0, 0, 434, 40, 137, 0,
	588, 426, 427, 428, 429, 385, 249, 251, 253, 240,
	261, 244, 0, 241, 0, 0, 235, 299, 0, 0,
	176, 180, 0, 182, 183, 0, 171, 268, 302, 303,
	0, 0, 0, 0, 371, 0, 350, 0, 0, 310,
	321, 322, 323, 324, 19, 225, 0, 0, 26, 0,
	401, -2, 0, 0, 0, 379, 195, 196, 0, 0,
	0, 30, 356, 130, 133, 0, 125, 85, 120, 111,
	105, 100, 101, 102, 103, 86, 69, 70, 110, 107,
	108, 82, 0, 0, 90, 0, 589, 138, 139, 242,
	0, 262, 245, 300, 174, 181, 177, 0, 0, 0,
	85, 85, 335, 85, 89, 338, 85, 340, 85, 343,
	0, 0, 0, 347, 309, 353, 0, 367, 185, 0,
	399, 0, -2, 0, 394, 393, 29, 0, 223, 0,
	0, 118, 0, 127, 116, 0, 113, 115, 84, 0,
	0, 38, 246, 0, 301, 304, 332, 106, 336, 337,
	339, 341, 342, 344, 306, 305, 0, 0, 0, 351,
	369, 0, 0, 389, 21, 0, 220, 0, 221, 222,
	126, 46, 0, 112, 114, 88, 91, 178, 333, 334,
	325, 308, 348, 20, 0, 0, 397, -2, 395, 224,
	117, 0, 0, 0, 370, 368, 307, 0, 0, 0,
	326, 0, 329, 327, 0, 0, 328,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 195,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:260
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:265
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:266
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:270
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:288
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:296
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:300
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:307
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:313
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:317
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:327
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:334
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:345
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:357
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:361
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:367
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:373
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:377
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:382
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:383
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:387
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:391
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:397
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:403
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:408
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:413
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:417
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:423
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:430
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:442
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:446
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:452
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:462
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:472
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:477
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:630
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:635
		{
			yyVAL.optVal = nil
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:639
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:644
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:648
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:656
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:660
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:666
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:674
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:678
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:683
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:693
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:697
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:701
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:706
		{
			yyVAL.optVal = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:710
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:714
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:718
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:722
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:727
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:731
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:736
		{
			yyVAL.str = ""
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:740
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:744
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:749
		{
			yyVAL.str = ""
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:753
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:758
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:762
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.colKeyOpt = colKey
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:770
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:774
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:779
		{
			yyVAL.optVal = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:789
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:795
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:799
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:803
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:807
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:813
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:817
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:827
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:838
		{
			yyVAL.str = ""
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:842
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:846
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:854
		{
			yyVAL.str = yyDollar[1].str
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:862
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:868
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:876
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:882
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 138:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:886
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:891
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:896
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:902
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:908
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:916
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:921
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:931
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:950
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:956
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:962
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.statement = &OtherRead{}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:972
		{
			yyVAL.statement = &OtherRead{}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:976
		{
			yyVAL.statement = &OtherRead{}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:980
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:984
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:988
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:993
		{
			setAllowComments(yylex, true)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:997
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.bytes2 = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.str = UnionStr
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.str = UnionAllStr
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.str = UnionDistinctStr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.str = SQLCacheStr
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.str = DistinctStr
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.str = StraightJoinHint
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.selectExprs = nil
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.empty = struct{}{}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.empty = struct{}{}
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.str = JoinStr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.str = JoinStr
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.str = JoinStr
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.str = StraightJoinStr
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.str = LeftJoinStr
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = LeftJoinStr
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.str = RightJoinStr
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.str = RightJoinStr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.str = NaturalJoinStr
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1248
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.indexHints = nil
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.expr = nil
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 246:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.str = IsNullStr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.str = IsNotNullStr
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.str = IsTrueStr
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.str = IsNotTrueStr
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.str = IsFalseStr
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.str = IsNotFalseStr
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.str = EqualStr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.str = LessThanStr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.str = GreaterThanStr
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.str = LessEqualStr
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = GreaterEqualStr
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.str = NotEqualStr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.expr = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1585
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1593
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1615
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 301:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 307:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 308:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1747
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.str = BooleanModeStr
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.str = QueryExpansionStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.expr = nil
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.str = string("")
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = nil
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.expr = &NullVal{}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1932
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.exprs = nil
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = nil
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.orderBy = nil
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.str = AscScr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.str = AscScr
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.str = DescScr
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.limit = nil
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.str = ForUpdateStr
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.str = ShareModeStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2052
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2065
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.updateExprs = nil
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2125
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.byt = 0
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.byt = 1
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.empty = struct{}{}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.empty = struct{}{}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.str = IgnoreStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.empty = struct{}{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.empty = struct{}{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.empty = struct{}{}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.empty = struct{}{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.empty = struct{}{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2413
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			decNesting(yylex)
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2427
		{
			forceEOF(yylex)
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2432
		{
			forceEOF(yylex)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2436
		{
			forceEOF(yylex)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2440
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
