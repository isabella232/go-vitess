//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	columnDefinitions []*ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const TABLE = 57437
const INDEX = 57438
const VIEW = 57439
const TO = 57440
const IGNORE = 57441
const IF = 57442
const UNIQUE = 57443
const USING = 57444
const PRIMARY = 57445
const SHOW = 57446
const DESCRIBE = 57447
const EXPLAIN = 57448
const DATE = 57449
const ESCAPE = 57450
const REPAIR = 57451
const OPTIMIZE = 57452
const TRUNCATE = 57453
const BIT = 57454
const TINYINT = 57455
const SMALLINT = 57456
const MEDIUMINT = 57457
const INT = 57458
const INTEGER = 57459
const BIGINT = 57460
const INTNUM = 57461
const REAL = 57462
const DOUBLE = 57463
const FLOAT_TYPE = 57464
const DECIMAL = 57465
const NUMERIC = 57466
const TIME = 57467
const TIMESTAMP = 57468
const DATETIME = 57469
const YEAR = 57470
const CHAR = 57471
const VARCHAR = 57472
const BOOL = 57473
const CHARACTER = 57474
const VARBINARY = 57475
const NCHAR = 57476
const TEXT = 57477
const TINYTEXT = 57478
const MEDIUMTEXT = 57479
const LONGTEXT = 57480
const BLOB = 57481
const TINYBLOB = 57482
const MEDIUMBLOB = 57483
const LONGBLOB = 57484
const JSON = 57485
const ENUM = 57486
const NULLX = 57487
const AUTO_INCREMENT = 57488
const APPROXNUM = 57489
const SIGNED = 57490
const UNSIGNED = 57491
const ZEROFILL = 57492
const DATABASES = 57493
const TABLES = 57494
const VITESS_KEYSPACES = 57495
const VITESS_SHARDS = 57496
const VSCHEMA_TABLES = 57497
const CURRENT_TIMESTAMP = 57498
const DATABASE = 57499
const CURRENT_DATE = 57500
const CURRENT_TIME = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const UTC_DATE = 57504
const UTC_TIME = 57505
const UTC_TIMESTAMP = 57506
const REPLACE = 57507
const CONVERT = 57508
const CAST = 57509
const GROUP_CONCAT = 57510
const SEPARATOR = 57511
const MATCH = 57512
const AGAINST = 57513
const BOOLEAN = 57514
const LANGUAGE = 57515
const WITH = 57516
const QUERY = 57517
const EXPANSION = 57518
const UNUSED = 57519

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 222,
	104, 436,
	-2, 432,
	-1, 223,
	104, 437,
	-2, 433,
	-1, 446,
	5, 21,
	-2, 386,
	-1, 482,
	104, 439,
	-2, 435,
	-1, 591,
	5, 22,
	-2, 265,
	-1, 658,
	5, 22,
	-2, 387,
	-1, 745,
	5, 21,
	-2, 389,
	-1, 860,
	5, 22,
	-2, 390,
}

const yyPrivate = 57344

const yyLast = 4644

var yyAct = [...]int{

	223, 866, 548, 765, 756, 788, 773, 405, 840, 755,
	246, 792, 779, 273, 579, 217, 344, 722, 346, 600,
	191, 580, 543, 324, 59, 750, 536, 481, 628, 87,
	183, 42, 546, 560, 620, 251, 184, 57, 513, 240,
	576, 474, 298, 238, 249, 304, 200, 328, 275, 313,
	183, 183, 41, 919, 46, 183, 218, 914, 918, 904,
	917, 913, 735, 903, 812, 220, 348, 228, 185, 186,
	187, 188, 189, 205, 48, 49, 50, 51, 183, 836,
	183, 207, 772, 870, 183, 780, 545, 219, 807, 852,
	206, 805, 325, 3, 336, 86, 767, 896, 637, 487,
	67, 233, 225, 77, 78, 78, 609, 767, 352, 62,
	349, 594, 611, 360, 359, 75, 593, 592, 71, 66,
	226, 237, 601, 467, 469, 80, 81, 82, 229, 190,
	361, 83, 79, 830, 819, 335, 58, 797, 887, 372,
	371, 381, 382, 374, 375, 376, 377, 378, 379, 380,
	373, 361, 253, 383, 661, 374, 375, 376, 377, 378,
	379, 380, 373, 632, 417, 383, 638, 395, 396, 598,
	372, 371, 381, 382, 374, 375, 376, 377, 378, 379,
	380, 373, 766, 404, 383, 780, 340, 764, 897, 763,
	895, 332, 468, 766, 841, 243, 299, 180, 610, 383,
	608, 879, 210, 337, 358, 183, 902, 61, 339, 70,
	68, 72, 183, 183, 737, 183, 639, 64, 561, 376,
	377, 378, 379, 380, 373, 183, 300, 383, 59, 373,
	183, 59, 383, 183, 360, 359, 183, 232, 342, 520,
	359, 347, 834, 888, 347, 907, 900, 351, 364, 306,
	880, 361, 302, 518, 519, 517, 361, 561, 899, 644,
	915, 360, 359, 849, 848, 397, 398, 399, 400, 401,
	402, 60, 837, 65, 74, 69, 63, 73, 361, 406,
	39, 898, 363, 506, 508, 509, 415, 855, 507, 301,
	516, 372, 371, 381, 382, 374, 375, 376, 377, 378,
	379, 380, 373, 769, 59, 383, 847, 878, 770, 183,
	892, 891, 183, 183, 183, 183, 362, 438, 885, 884,
	235, 434, 868, 183, 220, 831, 449, 183, 601, 621,
	183, 360, 359, 183, 539, 183, 183, 613, 614, 615,
	343, 537, 479, 538, 234, 435, 219, 911, 361, 436,
	183, 910, 220, 183, 347, 239, 183, 59, 476, 480,
	471, 875, 503, 504, 210, 510, 511, 551, 463, 464,
	347, 461, 338, 501, 219, 883, 512, 470, 656, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 451, 478, 453, 882, 881, 473,
	446, 393, 450, 59, 452, 360, 359, 482, 821, 239,
	406, 824, 739, 555, 556, 514, 542, 59, 347, 465,
	626, 239, 361, 550, 311, 432, 433, 671, 670, 626,
	562, 653, 430, 299, 265, 264, 266, 267, 268, 269,
	540, 541, 774, 270, 660, 239, 551, 239, 59, 552,
	565, 419, 420, 421, 422, 423, 424, 425, 220, 558,
	578, 585, 563, 475, 210, 210, 210, 210, 360, 359,
	43, 482, 626, 568, 569, 871, 872, 873, 596, 210,
	219, 311, 239, 874, 577, 361, 338, 210, 59, 59,
	310, 586, 827, 18, 581, 553, 554, 18, 39, 557,
	465, 603, 347, 311, 793, 604, 595, 626, 475, 591,
	789, 197, 311, 564, 784, 566, 567, 484, 597, 515,
	444, 18, 445, 602, 587, 577, 605, 355, 575, 617,
	618, 619, 315, 318, 319, 320, 316, 39, 317, 321,
	583, 39, 588, 76, 16, 458, 744, 456, 338, 59,
	459, 442, 457, 590, 634, 39, 616, 460, 589, 319,
	320, 455, 630, 454, 645, 39, 514, 201, 202, 916,
	912, 183, 381, 382, 374, 375, 376, 377, 378, 379,
	380, 373, 612, 623, 383, 406, 502, 624, 574, 195,
	663, 664, 204, 643, 573, 842, 833, 635, 636, 59,
	305, 640, 241, 183, 909, 908, 646, 183, 647, 648,
	649, 650, 347, 303, 242, 828, 668, 669, 662, 655,
	742, 485, 654, 354, 323, 305, 657, 658, 659, 192,
	59, 625, 714, 715, 315, 318, 319, 320, 316, 858,
	317, 321, 572, 630, 711, 641, 347, 738, 198, 199,
	571, 550, 712, 193, 183, 43, 721, 734, 718, 717,
	720, 59, 59, 857, 815, 733, 59, 59, 59, 716,
	515, 59, 475, 736, 747, 748, 816, 741, 743, 751,
	751, 751, 357, 749, 347, 775, 776, 777, 778, 757,
	45, 760, 752, 753, 740, 274, 781, 782, 783, 482,
	785, 786, 787, 47, 334, 581, 40, 1, 865, 762,
	59, 790, 791, 754, 599, 483, 761, 846, 894, 869,
	794, 768, 835, 347, 796, 181, 795, 771, 906, 212,
	800, 801, 832, 802, 674, 675, 804, 673, 806, 803,
	677, 676, 813, 672, 84, 213, 213, 221, 322, 327,
	213, 627, 745, 486, 53, 607, 59, 606, 489, 817,
	825, 224, 391, 570, 584, 798, 799, 431, 829, 347,
	297, 856, 814, 213, 757, 213, 642, 808, 809, 213,
	216, 414, 559, 252, 227, 505, 263, 260, 838, 839,
	843, 844, 845, 581, 820, 262, 822, 823, 59, 261,
	437, 443, 365, 250, 244, 466, 210, 230, 209, 231,
	307, 347, 314, 236, 851, 312, 669, 215, 208, 652,
	59, 853, 59, 811, 886, 59, 441, 59, 59, 19,
	220, 864, 859, 861, 863, 862, 44, 203, 347, 818,
	347, 867, 15, 757, 14, 757, 13, 876, 877, 12,
	11, 10, 219, 9, 8, 854, 7, 6, 5, 4,
	889, 406, 860, 194, 59, 17, 890, 2, 825, 0,
	0, 0, 495, 0, 893, 0, 0, 347, 0, 276,
	36, 0, 757, 67, 0, 0, 493, 629, 0, 0,
	0, 0, 62, 59, 905, 0, 0, 0, 75, 0,
	213, 71, 66, 0, 0, 0, 867, 213, 330, 0,
	213, 498, 0, 0, 0, 0, 36, 0, 0, 58,
	213, 631, 0, 0, 196, 213, 0, 0, 213, 211,
	901, 213, 360, 359, 309, 0, 0, 0, 0, 723,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 361,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 350,
	0, 725, 353, 0, 0, 356, 491, 494, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 731,
	180, 726, 0, 724, 0, 0, 0, 0, 729, 0,
	61, 0, 70, 68, 72, 0, 0, 728, 0, 0,
	64, 0, 730, 732, 213, 0, 221, 213, 213, 213,
	213, 0, 0, 0, 0, 0, 0, 0, 462, 0,
	0, 492, 213, 0, 0, 330, 0, 0, 472, 0,
	213, 213, 0, 0, 221, 0, 472, 0, 448, 0,
	0, 496, 0, 0, 0, 213, 0, 0, 213, 0,
	0, 213, 497, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 0, 0, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 0, 0, 488,
	0, 0, 499, 0, 0, 500, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 0, 549,
	472, 0, 67, 0, 549, 549, 0, 345, 549, 0,
	345, 62, 0, 0, 0, 0, 0, 75, 0, 0,
	71, 66, 549, 549, 549, 549, 0, 392, 394, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 58, 0,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 403, 0, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 416, 418, 418, 418, 418, 418,
	418, 418, 418, 426, 427, 428, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 447, 0, 0,
	0, 211, 211, 211, 211, 62, 0, 52, 0, 54,
	0, 75, 0, 56, 71, 66, 326, 0, 0, 61,
	0, 70, 68, 72, 211, 0, 0, 0, 0, 64,
	0, 713, 58, 0, 0, 439, 0, 0, 440, 0,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 0,
	549, 372, 371, 381, 382, 374, 375, 376, 377, 378,
	379, 380, 373, 0, 549, 383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 0, 0, 60, 36, 65, 74, 69, 63, 73,
	0, 0, 0, 180, 622, 0, 0, 407, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 213, 0,
	651, 0, 213, 64, 372, 371, 381, 382, 374, 375,
	376, 377, 378, 379, 380, 373, 0, 0, 383, 0,
	0, 0, 549, 0, 0, 582, 0, 36, 472, 549,
	0, 0, 709, 0, 0, 0, 710, 372, 371, 381,
	382, 374, 375, 376, 377, 378, 379, 380, 373, 213,
	0, 383, 0, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 0, 0, 345, 371,
	381, 382, 374, 375, 376, 377, 378, 379, 380, 373,
	0, 0, 383, 0, 0, 169, 156, 130, 171, 108,
	122, 179, 123, 124, 150, 94, 138, 67, 120, 0,
	111, 89, 117, 90, 109, 132, 62, 135, 107, 158,
	141, 177, 75, 145, 0, 71, 66, 0, 0, 134,
	163, 136, 155, 129, 151, 101, 144, 172, 121, 148,
	633, 0, 0, 58, 0, 758, 759, 0, 0, 0,
	0, 0, 98, 147, 168, 119, 149, 88, 146, 0,
	92, 95, 178, 166, 114, 115, 826, 0, 0, 0,
	0, 0, 0, 133, 137, 152, 127, 0, 0, 0,
	0, 0, 665, 666, 667, 112, 0, 143, 0, 0,
	0, 97, 93, 131, 0, 0, 0, 100, 0, 113,
	153, 0, 164, 128, 180, 167, 126, 125, 170, 173,
	0, 162, 110, 118, 61, 116, 70, 68, 72, 0,
	0, 0, 221, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 211, 0, 0, 582, 0, 0, 746,
	0, 0, 0, 91, 0, 0, 0, 0, 106, 165,
	159, 160, 161, 104, 105, 102, 103, 139, 140, 174,
	175, 176, 154, 99, 0, 0, 157, 142, 60, 0,
	65, 74, 69, 63, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 367, 0, 370, 0, 0, 0, 345,
	0, 384, 385, 386, 387, 388, 389, 390, 0, 368,
	369, 366, 372, 371, 381, 382, 374, 375, 376, 377,
	378, 379, 380, 373, 0, 810, 383, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 36, 169, 156, 130,
	171, 108, 122, 179, 123, 124, 150, 94, 138, 67,
	120, 0, 111, 89, 117, 90, 109, 132, 62, 135,
	107, 158, 141, 177, 75, 145, 0, 71, 66, 0,
	0, 134, 163, 136, 155, 129, 151, 101, 144, 172,
	121, 148, 0, 0, 0, 58, 0, 758, 759, 0,
	0, 0, 0, 0, 98, 147, 168, 119, 149, 88,
	146, 0, 92, 95, 178, 166, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 133, 137, 152, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 143,
	0, 0, 0, 97, 93, 131, 0, 0, 0, 100,
	0, 113, 153, 0, 164, 128, 180, 167, 126, 125,
	170, 173, 0, 162, 110, 118, 61, 116, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	106, 165, 159, 160, 161, 104, 105, 102, 103, 139,
	140, 174, 175, 176, 154, 99, 0, 0, 157, 142,
	60, 0, 65, 74, 69, 63, 73, 169, 156, 130,
	171, 108, 122, 179, 123, 124, 150, 94, 138, 67,
	120, 0, 111, 89, 117, 90, 109, 132, 62, 135,
	107, 158, 141, 177, 75, 145, 0, 71, 66, 0,
	0, 134, 163, 136, 155, 129, 151, 101, 144, 172,
	121, 148, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 147, 168, 119, 149, 88,
	146, 0, 92, 95, 178, 166, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 133, 137, 152, 127, 0,
	0, 0, 0, 0, 0, 850, 0, 112, 0, 143,
	0, 0, 0, 97, 93, 131, 0, 0, 0, 100,
	0, 113, 153, 0, 164, 128, 180, 167, 126, 125,
	170, 173, 0, 162, 110, 118, 61, 116, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	106, 165, 159, 160, 161, 104, 105, 102, 103, 139,
	140, 174, 175, 176, 154, 99, 0, 0, 157, 142,
	60, 0, 65, 74, 69, 63, 73, 169, 156, 130,
	171, 108, 122, 179, 123, 124, 150, 94, 138, 67,
	120, 0, 111, 89, 117, 90, 109, 132, 62, 135,
	107, 158, 141, 177, 75, 145, 0, 71, 66, 0,
	0, 134, 163, 136, 155, 129, 151, 101, 144, 172,
	121, 148, 39, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 147, 168, 119, 149, 88,
	146, 0, 92, 95, 178, 166, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 133, 137, 152, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 143,
	0, 0, 0, 97, 93, 131, 0, 0, 0, 100,
	0, 113, 153, 0, 164, 128, 180, 167, 126, 125,
	170, 173, 0, 162, 110, 118, 61, 116, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	106, 165, 159, 160, 161, 104, 105, 102, 103, 139,
	140, 174, 175, 176, 154, 99, 0, 0, 157, 142,
	60, 0, 65, 74, 69, 63, 73, 169, 156, 130,
	171, 108, 122, 179, 123, 124, 150, 94, 138, 67,
	120, 0, 111, 89, 117, 90, 109, 132, 62, 135,
	107, 158, 141, 177, 75, 145, 0, 71, 66, 0,
	0, 134, 163, 136, 155, 129, 151, 101, 144, 172,
	121, 148, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 147, 168, 119, 149, 88,
	146, 0, 92, 95, 178, 166, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 133, 137, 152, 127, 0,
	0, 0, 0, 0, 0, 719, 0, 112, 0, 143,
	0, 0, 0, 97, 93, 131, 0, 0, 0, 100,
	0, 113, 153, 0, 164, 128, 180, 167, 126, 125,
	170, 173, 0, 162, 110, 118, 61, 116, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	106, 165, 159, 160, 161, 104, 105, 102, 103, 139,
	140, 174, 175, 176, 154, 99, 0, 0, 157, 142,
	60, 0, 65, 74, 69, 63, 73, 169, 156, 130,
	171, 108, 122, 179, 123, 124, 150, 94, 138, 67,
	120, 0, 111, 89, 117, 90, 109, 132, 62, 135,
	107, 158, 141, 177, 75, 145, 0, 71, 66, 0,
	0, 134, 163, 136, 155, 129, 151, 101, 144, 172,
	121, 148, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 147, 168, 119, 149, 88,
	146, 0, 92, 95, 178, 166, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 133, 137, 152, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 143,
	0, 0, 0, 97, 93, 131, 0, 0, 0, 100,
	0, 113, 153, 0, 164, 128, 180, 167, 126, 125,
	170, 173, 0, 162, 110, 118, 61, 116, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	106, 165, 159, 160, 161, 104, 105, 102, 103, 139,
	140, 174, 175, 176, 154, 99, 0, 0, 157, 142,
	60, 0, 65, 74, 69, 63, 73, 169, 156, 130,
	171, 108, 122, 179, 123, 124, 150, 94, 138, 67,
	120, 0, 111, 89, 117, 90, 109, 132, 62, 135,
	107, 158, 141, 177, 75, 145, 0, 71, 66, 0,
	0, 134, 163, 136, 155, 129, 151, 101, 144, 172,
	121, 148, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 147, 168, 119, 149, 88,
	146, 0, 92, 95, 178, 166, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 133, 137, 152, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 143,
	0, 0, 0, 97, 93, 131, 0, 0, 0, 100,
	0, 113, 153, 0, 164, 128, 180, 167, 126, 125,
	170, 173, 0, 162, 110, 118, 61, 116, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	106, 165, 159, 160, 161, 104, 105, 102, 103, 139,
	140, 174, 175, 176, 154, 99, 0, 0, 157, 142,
	60, 0, 65, 74, 69, 63, 73, 169, 156, 130,
	171, 108, 122, 179, 123, 124, 150, 94, 138, 67,
	120, 0, 111, 89, 117, 90, 109, 132, 62, 135,
	107, 158, 141, 177, 75, 145, 0, 71, 66, 0,
	0, 134, 163, 136, 155, 129, 151, 101, 144, 172,
	121, 148, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 147, 168, 119, 149, 88,
	146, 0, 92, 95, 178, 166, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 133, 137, 152, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 143,
	0, 0, 0, 97, 93, 131, 0, 0, 0, 100,
	0, 113, 153, 0, 164, 128, 180, 167, 126, 125,
	170, 173, 0, 162, 110, 118, 61, 116, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	106, 165, 159, 160, 161, 104, 105, 102, 103, 139,
	140, 174, 175, 176, 154, 99, 0, 0, 157, 142,
	60, 0, 65, 74, 69, 63, 73, 169, 156, 130,
	171, 108, 122, 179, 123, 124, 150, 94, 138, 67,
	120, 0, 111, 89, 117, 90, 109, 132, 62, 135,
	107, 158, 141, 177, 75, 145, 0, 71, 66, 0,
	0, 134, 163, 136, 155, 129, 151, 101, 144, 172,
	121, 148, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 147, 168, 119, 149, 88,
	146, 0, 92, 95, 178, 166, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 133, 137, 152, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 143,
	0, 0, 0, 97, 93, 131, 0, 0, 0, 100,
	0, 113, 153, 0, 164, 128, 180, 167, 126, 125,
	170, 173, 0, 162, 110, 118, 61, 116, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	106, 165, 159, 160, 161, 104, 105, 102, 103, 139,
	140, 174, 175, 176, 154, 99, 0, 0, 157, 142,
	60, 0, 65, 74, 69, 63, 73, 67, 0, 0,
	544, 0, 248, 0, 0, 0, 62, 0, 247, 0,
	0, 284, 75, 0, 0, 71, 66, 0, 0, 0,
	0, 277, 278, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 222, 265, 264, 266, 267, 268, 269,
	0, 0, 0, 270, 271, 272, 0, 0, 245, 258,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 547, 0, 0, 0, 295, 0, 257,
	0, 0, 254, 259, 0, 0, 0, 0, 680, 0,
	0, 0, 0, 0, 180, 0, 0, 293, 0, 0,
	0, 0, 0, 0, 61, 0, 70, 68, 72, 0,
	692, 0, 0, 0, 64, 697, 698, 699, 700, 701,
	702, 703, 0, 704, 705, 706, 707, 708, 693, 694,
	695, 696, 678, 679, 0, 0, 681, 0, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 0, 0,
	0, 0, 0, 285, 294, 291, 292, 289, 290, 288,
	287, 286, 296, 279, 280, 282, 0, 281, 60, 0,
	65, 74, 69, 63, 73, 67, 0, 0, 0, 0,
	248, 0, 0, 0, 62, 0, 247, 0, 0, 284,
	75, 0, 0, 71, 66, 0, 0, 0, 0, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 39, 0,
	0, 222, 265, 264, 266, 267, 268, 269, 0, 0,
	0, 270, 271, 272, 0, 0, 245, 258, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 547, 0, 0, 0, 295, 0, 257, 0, 0,
	254, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 294, 291, 292, 289, 290, 288, 287, 286,
	296, 279, 280, 282, 0, 281, 60, 0, 65, 74,
	69, 63, 73, 67, 0, 0, 0, 0, 248, 0,
	0, 0, 62, 0, 247, 0, 0, 284, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 277, 278, 18,
	37, 20, 21, 0, 0, 0, 39, 0, 239, 222,
	265, 264, 266, 267, 268, 269, 0, 30, 0, 270,
	271, 272, 22, 0, 245, 258, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	29, 0, 0, 39, 0, 0, 0, 255, 256, 0,
	0, 0, 0, 295, 0, 257, 0, 0, 254, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 24, 26, 25, 27, 0, 0, 0, 0, 67,
	0, 0, 0, 0, 28, 31, 32, 308, 62, 33,
	34, 35, 0, 0, 75, 0, 0, 71, 66, 285,
	294, 291, 292, 289, 290, 288, 287, 286, 296, 279,
	280, 282, 18, 281, 60, 182, 65, 74, 69, 63,
	73, 0, 0, 67, 0, 0, 0, 0, 248, 0,
	0, 0, 62, 0, 247, 0, 0, 284, 75, 0,
	0, 71, 66, 0, 0, 38, 0, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 222,
	265, 264, 266, 267, 268, 269, 0, 0, 0, 270,
	271, 272, 0, 0, 245, 258, 180, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 0, 0, 0, 0, 64, 255, 256, 0,
	0, 0, 0, 295, 0, 257, 0, 0, 254, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	294, 291, 292, 289, 290, 288, 287, 286, 296, 279,
	280, 282, 0, 281, 60, 0, 65, 74, 69, 63,
	73, 67, 0, 0, 0, 0, 248, 0, 0, 0,
	62, 0, 247, 0, 0, 284, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 277, 278, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 222, 265, 264,
	266, 267, 268, 269, 0, 0, 0, 270, 271, 272,
	0, 0, 245, 258, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 0, 0, 0,
	0, 295, 0, 257, 0, 0, 254, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 294, 291,
	292, 289, 290, 288, 287, 286, 296, 279, 280, 282,
	67, 281, 60, 0, 65, 74, 69, 63, 73, 62,
	0, 0, 0, 0, 284, 75, 0, 0, 71, 66,
	0, 0, 0, 0, 277, 278, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 222, 265, 264, 266,
	267, 268, 269, 0, 0, 0, 270, 271, 272, 0,
	0, 0, 258, 0, 283, 0, 0, 0, 0, 0,
	0, 18, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 255, 256, 0, 0, 0, 0,
	295, 62, 257, 0, 0, 254, 259, 75, 0, 0,
	71, 66, 18, 0, 0, 0, 0, 180, 0, 0,
	293, 0, 0, 67, 0, 39, 0, 61, 58, 70,
	68, 72, 62, 0, 0, 0, 0, 64, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 294, 291, 292,
	289, 290, 288, 287, 286, 296, 279, 280, 282, 180,
	281, 60, 0, 65, 74, 69, 63, 73, 0, 61,
	0, 70, 68, 72, 0, 0, 67, 0, 0, 64,
	329, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	180, 75, 0, 0, 71, 66, 0, 0, 67, 0,
	61, 0, 70, 68, 72, 0, 0, 62, 0, 67,
	64, 0, 182, 75, 331, 0, 71, 66, 62, 0,
	0, 0, 0, 0, 75, 0, 0, 71, 66, 0,
	0, 39, 0, 60, 182, 65, 74, 69, 63, 73,
	0, 0, 0, 0, 0, 58, 0, 631, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 180, 214, 0, 0, 0, 0, 0,
	0, 67, 0, 61, 0, 70, 68, 72, 0, 0,
	62, 0, 0, 64, 0, 180, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 61, 180, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 61, 182, 70, 68,
	72, 67, 0, 0, 0, 0, 64, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 0, 182, 0, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 65, 74, 69, 63, 73, 0, 0, 180, 0,
	60, 0, 65, 74, 69, 63, 73, 0, 61, 0,
	70, 68, 72, 67, 0, 0, 0, 0, 64, 0,
	0, 0, 62, 0, 67, 0, 0, 0, 75, 0,
	0, 71, 66, 62, 0, 0, 0, 0, 180, 75,
	0, 0, 71, 66, 0, 0, 67, 0, 61, 58,
	70, 68, 72, 0, 0, 62, 0, 0, 64, 0,
	222, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	0, 0, 60, 0, 65, 74, 69, 63, 73, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 60, 0, 65, 74, 69, 63, 73, 0,
	61, 180, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 61, 0, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 0, 0, 60, 0, 65, 74, 69,
	63, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73,
}
var yyPact = [...]int{

	3523, -1000, -143, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 641, 685, -1000, -1000,
	-1000, -1000, -1000, 1085, -11, 20, 13, 19, 2952, 4449,
	-1000, -1000, -1000, -1000, -1000, -1000, 487, -1000, -1000, -1000,
	-1000, -1000, 613, 638, 505, 629, 530, -1000, -12, 4221,
	4304, 4427, -15, 7, 4449, -115, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16, 4449, -1000, 4449,
	-16, 291, -16, 4449, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	303, 584, 3844, 3844, 641, -1000, 487, -1000, -1000, -1000,
	580, -1000, -1000, 188, 3622, 461, 595, -1000, -1000, -1000,
	603, 4116, 4199, 87, 4449, 84, -1000, 321, -1000, 132,
	-1000, 82, -1000, -1000, 4449, 170, 287, 2002, -4, 4449,
	2002, -7, 4449, 601, 478, 4449, -1000, -1000, -1000, -1000,
	-1000, 674, 118, 265, -1000, 3844, 1515, 448, 448, -1000,
	-1000, 62, -1000, -1000, 4013, 4013, 4013, 4013, 4013, 4013,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 448, 79, -1000, 3666, 448, 448, 448,
	448, 448, 448, 3844, 448, 448, 448, 448, 448, 448,
	448, 448, 448, 448, 448, 448, 448, 381, -1000, 402,
	613, 303, 530, 1169, 511, -1000, -1000, 491, 4449, -1000,
	4427, 4221, 4221, 4221, 4221, -1000, 524, 522, -1000, 508,
	506, 518, 4449, -1000, 430, 303, 4116, 76, -1000, 4344,
	-1000, -1000, 2762, 661, 4221, 4449, -1000, -1000, 4427, 3844,
	2572, 467, 599, -20, -1000, -1000, -1000, -1000, -1000, 4449,
	858, -1000, 4449, -1000, -1000, 4449, 2002, -1000, 551, 3844,
	3844, 220, 3844, 3844, 68, 4013, 230, 169, 4013, 4013,
	4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,
	4013, 4013, 4013, 288, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 281, -1000, 487, 380, 380, 98, 98, 98,
	98, 98, 83, 3130, 2572, 395, 168, 3666, 3308, 3308,
	3844, 3844, 3308, 605, 146, 168, 4416, -1000, 303, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3308, 3308, 3308, 3308,
	3844, -1000, -1000, -1000, 584, -1000, 605, 632, -1000, 563,
	557, 3308, -1000, 476, 4427, 448, -1000, 4085, -1000, 497,
	595, 475, 493, -1000, -1000, -1000, -1000, 519, -1000, 514,
	-1000, -1000, -1000, -1000, -1000, 303, -1000, 4, 3, -2,
	-1000, -1000, -1000, -1000, 641, 3844, 452, -1000, -1000, 168,
	-1000, 65, -1000, -1000, 275, -1000, 474, 4416, 2002, -1000,
	85, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 546, 68, 173, -1000, -1000, 274, -1000, -1000,
	168, 168, 1250, -1000, -1000, -1000, -1000, 230, 4013, 4013,
	4013, 204, 1250, 1217, 483, 1281, 98, 126, 126, 131,
	131, 131, 131, 131, 64, 64, -1000, -1000, -1000, 303,
	-1000, -1000, -1000, 303, 3308, 378, -1000, -1000, 866, 59,
	448, 3844, -1000, 369, 369, 47, 195, 369, 3308, 185,
	-1000, 3844, 303, -1000, 369, 303, 369, 369, -1000, -1000,
	4449, -1000, -1000, -1000, -1000, 421, -1000, 596, 435, 327,
	-1000, -1000, 3486, 303, 393, 50, 641, 3844, 3844, -1000,
	-1000, -1000, 448, 448, 448, 613, 168, -1000, 2382, 376,
	-1000, 3136, 4449, -1000, -1000, -1000, 4449, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 204, 1250, 1154,
	-1000, 4013, 4013, -1000, -1000, 369, 3308, -1000, -1000, 4232,
	-1000, -1000, 2192, 3308, 168, -1000, -1000, 837, 288, 837,
	-126, 456, 139, -1000, 3844, 339, -1000, -1000, -1000, -1000,
	-1000, -1000, 661, 4221, 593, -1000, 448, -1000, -1000, 515,
	4416, 4416, 613, 168, 168, 4416, 4416, 4416, -1000, -1000,
	1622, 69, 240, -84, -1000, -1000, 392, -1000, 392, 392,
	392, 392, -64, -64, -64, -64, -1000, -1000, -1000, -1000,
	-1000, 464, -1000, 392, 392, 392, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 460, 460, 460, 454, 454, 2002,
	-1000, -1000, -1000, 4013, 1250, 1250, -1000, -1000, -1000, -1000,
	33, 303, 303, 392, 392, -1000, 392, 454, -1000, 392,
	-43, 392, -46, 303, 303, 448, -122, -1000, 168, 3844,
	652, 373, 668, -1000, 448, -1000, 487, 30, -1000, -1000,
	357, -1000, 357, 357, 360, 1380, -1000, -1000, -1000, -1000,
	-1000, -1000, 442, 588, 80, 272, -1000, -1000, 568, -1000,
	179, -88, -1000, -1000, 216, -64, -64, -1000, -1000, 93,
	566, 93, 93, 93, 251, -1000, -1000, -1000, -1000, 208,
	-1000, -1000, -1000, 207, -1000, -1000, 1250, 1812, -1000, -1000,
	-1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4013, 303, 232, 168, 650, 624, 4427, 327, 303, 4416,
	-1000, 4416, -1000, -1000, 1622, -1000, 1622, 4416, -1000, 269,
	-1000, -1000, -80, 420, -1000, -1000, -1000, 309, 93, 93,
	-1000, 254, 148, -1000, -1000, -1000, 346, -1000, 324, 267,
	-1000, -1000, -1000, 52, -1000, -1000, -1000, 3844, 3844, 321,
	-1000, -1000, -1000, 1380, -1000, 259, -1000, 392, -1000, 70,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 226, 202, -1000, 190, 303, 17, -133, 168,
	316, -1000, 4416, -1000, 183, 578, -1000, 577, -1000, 299,
	295, -1000, 534, -129, -136, -1000, -1000, 205, -1000, -1000,
	-1000, -1000, -1000, 533, -1000, -1000, -131, -134, -140, -1000,
}
var yyPgo = [...]int{

	0, 867, 92, 544, 865, 863, 859, 858, 857, 856,
	854, 853, 851, 850, 849, 846, 844, 842, 54, 837,
	836, 829, 45, 826, 46, 824, 823, 34, 86, 22,
	32, 2, 819, 23, 90, 81, 818, 817, 815, 49,
	812, 729, 810, 808, 805, 25, 41, 804, 803, 802,
	801, 44, 10, 800, 799, 795, 787, 786, 785, 38,
	7, 14, 48, 21, 783, 152, 35, 782, 33, 781,
	776, 772, 771, 31, 770, 42, 767, 20, 39, 764,
	40, 15, 56, 763, 543, 762, 237, 761, 758, 757,
	755, 754, 753, 66, 0, 13, 18, 28, 751, 695,
	27, 47, 749, 748, 36, 16, 26, 17, 744, 743,
	741, 740, 737, 735, 734, 6, 732, 728, 12, 8,
	727, 722, 5, 11, 721, 719, 718, 717, 19, 716,
	3, 715, 714, 713, 9, 4, 709, 1, 708, 707,
	706, 879, 43, 704, 703, 164,
}
var yyR1 = [...]int{

	0, 139, 140, 140, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 8, 143, 143, 37, 37, 9, 10, 10, 10,
	10, 131, 132, 132, 132, 128, 109, 109, 109, 112,
	112, 110, 110, 110, 110, 110, 110, 110, 111, 111,
	111, 111, 111, 113, 113, 113, 113, 113, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 127, 127, 115, 115, 122, 122, 123, 123,
	123, 120, 120, 121, 121, 124, 124, 124, 116, 116,
	116, 116, 116, 125, 125, 118, 118, 118, 119, 119,
	126, 126, 126, 126, 126, 117, 117, 129, 136, 136,
	136, 136, 130, 130, 138, 138, 137, 133, 133, 133,
	134, 134, 134, 135, 135, 135, 11, 11, 11, 11,
	12, 13, 13, 13, 14, 108, 108, 108, 15, 16,
	17, 17, 17, 17, 17, 17, 144, 18, 19, 19,
	20, 20, 20, 24, 24, 24, 22, 22, 23, 23,
	29, 29, 28, 28, 30, 30, 30, 30, 98, 98,
	98, 97, 97, 32, 32, 33, 33, 34, 34, 35,
	35, 35, 43, 36, 36, 36, 36, 103, 103, 102,
	102, 102, 101, 101, 38, 38, 38, 38, 39, 39,
	39, 39, 40, 40, 42, 42, 41, 41, 44, 44,
	44, 44, 45, 45, 46, 46, 31, 31, 31, 31,
	31, 31, 31, 85, 85, 48, 48, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 58, 58, 58,
	58, 58, 58, 49, 49, 49, 49, 49, 49, 49,
	27, 27, 59, 59, 59, 65, 60, 60, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 56, 56,
	56, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	55, 55, 55, 55, 55, 55, 55, 55, 145, 145,
	57, 57, 57, 57, 25, 25, 25, 25, 25, 106,
	106, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 69, 69, 26, 26, 67, 67,
	68, 70, 70, 66, 66, 66, 51, 51, 51, 51,
	51, 51, 51, 53, 53, 53, 71, 71, 72, 72,
	73, 73, 74, 74, 75, 76, 76, 76, 77, 77,
	77, 77, 78, 78, 78, 50, 50, 50, 50, 50,
	50, 79, 79, 79, 79, 80, 80, 61, 61, 63,
	63, 62, 64, 81, 81, 82, 83, 83, 86, 86,
	87, 87, 84, 84, 88, 88, 88, 88, 88, 88,
	88, 88, 89, 89, 89, 90, 90, 91, 91, 91,
	92, 92, 95, 95, 96, 96, 99, 99, 100, 100,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 141,
	142, 104, 105, 105, 105,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 5, 8, 4,
	6, 4, 1, 3, 3, 7, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 0, 1, 0, 3, 3, 0, 2,
	0, 2, 1, 2, 1, 0, 2, 4, 2, 3,
	2, 2, 1, 1, 1, 3, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 7, 7, 4,
	5, 4, 5, 5, 3, 1, 1, 1, 3, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -139, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 107, 108, 110, 109, 111, 121, 47,
	24, 122, 123, 126, 127, 128, -141, 7, 182, 50,
	-140, 195, -73, 14, -20, 5, -18, -144, -18, -18,
	-18, -18, 112, -91, 114, 66, 118, -95, 53, -94,
	188, 124, 26, 193, 134, 190, 36, 17, 127, 192,
	126, 35, 128, 194, 191, 32, -84, 114, 116, 112,
	112, 113, 114, 112, -108, 53, -93, -94, 67, 21,
	23, 163, 70, 102, 15, 71, 149, 101, 62, 183,
	107, 45, 175, 176, 173, 174, 168, 28, 9, 24,
	122, 20, 95, 109, 74, 75, 125, 22, 123, 65,
	18, 48, 10, 12, 13, 117, 116, 86, 113, 43,
	7, 103, 25, 83, 39, 27, 41, 84, 16, 177,
	178, 30, 187, 97, 46, 33, 68, 63, 49, 66,
	14, 44, 85, 110, 182, 42, 6, 186, 29, 170,
	171, 172, 121, 40, 112, 169, 73, 115, 64, 5,
	118, 8, 47, 119, 179, 180, 181, 31, 72, 11,
	114, -99, 53, -94, -104, -104, -104, -104, -104, -104,
	-2, -77, 16, 15, -5, -3, -141, 6, 19, 20,
	-24, 37, 38, -19, -84, -33, -34, -35, -36, -43,
	-65, -141, -41, -99, 10, -37, -41, -81, -82, -66,
	-95, -99, 53, -94, -87, 117, 113, -41, 182, 112,
	-41, -41, -86, 117, 53, -86, -41, -104, -142, 52,
	-78, 18, 30, -31, -47, 68, -52, 28, 22, -51,
	-48, -66, -64, -65, 102, 91, 92, 99, 69, 103,
	-56, -54, -55, -57, 55, 54, 56, 57, 58, 59,
	63, 64, 65, -95, -99, -62, -141, 41, 42, 183,
	184, 187, 185, 71, 31, 173, 181, 180, 179, 177,
	178, 175, 176, 117, 174, 97, 182, -74, -75, -31,
	-73, -2, -18, 33, -22, 20, 61, -42, 25, -41,
	29, 51, -38, -39, -40, 39, 43, 45, 40, 41,
	42, 46, -103, 21, -33, -2, -141, -102, -101, 21,
	-99, 55, 104, -41, -143, 51, 10, 119, 51, 76,
	104, -41, 68, 53, -105, -141, -96, -95, -93, 114,
	-41, -105, 115, -41, 22, 49, -41, 8, 86, 67,
	66, 83, 51, 17, -31, -49, 86, 68, 84, 85,
	70, 88, 87, 98, 91, 92, 93, 94, 95, 96,
	97, 89, 90, 101, 76, 77, 78, 79, 80, 81,
	82, -85, -141, -65, -141, 105, 106, -52, -52, -52,
	-52, -52, -52, -141, 104, -60, -31, -141, -141, -141,
	-141, -141, -141, -141, -69, -31, -141, -145, -141, -145,
	-145, -145, -145, -145, -145, -145, -141, -141, -141, -141,
	51, -76, 23, 24, -77, -142, -24, -53, -95, 56,
	59, -23, 40, -50, 29, 31, -2, -141, -41, -81,
	-34, -35, -34, -35, 39, 39, 39, 44, 39, 44,
	39, -39, -99, -142, -142, -2, -44, 47, 116, 48,
	-101, -100, -99, -93, -46, 11, -33, -41, -82, -31,
	-96, -100, -93, -131, 50, 22, -92, 119, -41, -88,
	110, 108, 163, 28, 109, 14, 183, 194, 53, -41,
	-41, -105, 35, -31, -31, -58, 63, 68, 64, 65,
	-31, -31, -52, -59, -62, -65, 60, 86, 84, 85,
	70, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -106, 53, 55, 53,
	-51, -51, -95, -29, 20, -28, -30, 93, -31, -99,
	-96, 51, -142, -28, -28, -31, -31, -28, -22, -67,
	-68, 72, -95, -142, -28, -29, -28, -28, -75, -78,
	-83, 18, 10, 31, 31, -28, -80, 49, -81, -61,
	-63, -62, -141, -2, -79, -95, -46, 49, 49, 39,
	39, -142, 113, 113, 113, -73, -31, -46, 104, -132,
	-128, 53, 49, -95, -105, -104, -89, -90, 115, 21,
	113, 27, 36, 63, 64, 65, -59, -52, -52, -52,
	-27, 125, 67, -142, -142, -28, 51, -98, -97, 21,
	-95, 55, 104, -141, -31, -142, -142, 51, 119, 21,
	-142, -28, -70, -68, 74, -31, -142, -142, -142, -142,
	-142, -41, -32, 10, 26, -80, 51, -142, -142, -142,
	51, 104, -73, -31, -31, -141, -141, -141, -77, -96,
	52, 51, -109, -112, -114, -113, -110, -111, 146, 147,
	102, 150, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 124, 142, 143, 144, 145, 129, 130, 131,
	132, 133, 134, 135, 137, 138, 139, 140, 141, -41,
	-41, -104, -27, 67, -52, -52, -142, -30, -97, 93,
	-100, -29, -107, 102, 146, 124, 144, 140, 160, 151,
	165, 142, 166, -106, -107, 188, -73, 75, -31, 73,
	-46, -33, 27, -63, 31, -2, -141, -95, -95, -77,
	-45, -95, -45, -45, -133, -134, -135, -96, 55, 56,
	-128, -129, -136, 120, 118, -130, 113, 27, -124, 63,
	68, -120, 166, -115, 50, -115, -115, -115, -115, -118,
	149, -118, -118, -118, 50, -115, -115, -115, -122, 50,
	-122, -122, -123, 50, -123, -105, -52, 104, -142, -142,
	-115, -115, -115, -123, -115, 134, -115, 134, -142, -142,
	-141, -26, 186, -31, -71, 12, 8, -61, -2, 104,
	-142, 51, -142, -142, 51, -135, 76, 50, 27, -130,
	53, 53, -116, 28, 63, -121, 167, 56, -118, -118,
	-119, 101, 29, -119, -119, -119, -127, 55, 56, 56,
	93, -118, 53, -52, -142, 55, -72, 13, 15, -81,
	-142, -95, -95, -134, -135, -138, -137, -95, 53, -125,
	163, 55, 56, 57, 63, 52, -119, -119, 53, 53,
	102, 52, 51, 51, 52, 51, -25, 86, 191, -31,
	-60, 52, 51, -115, -126, 120, 27, 118, 55, 56,
	56, -142, 189, 46, 192, -137, -117, 62, 27, 27,
	52, 52, 36, 190, 193, 55, 36, 191, 192, 193,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 370, 0, 156, 156,
	156, 156, 156, 427, 412, 0, 0, 0, 0, 0,
	551, 551, 551, 551, 551, 551, 0, 27, 28, 549,
	1, 3, 378, 0, 0, 160, 163, 158, 412, 0,
	0, 0, 410, 0, 546, 0, 428, 429, 432, 433,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 547, 548, 0, 0, 413, 0,
	408, 0, 408, 0, 551, 145, 146, 147, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 463, 464, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 493, 494, 495, 496, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	546, 149, 436, 437, 150, 151, 152, 153, 154, 155,
	21, 382, 0, 0, 370, 23, 0, 156, 161, 162,
	166, 164, 165, 157, 0, 0, 185, 187, 188, 189,
	197, 0, 199, 216, 0, 0, 34, 36, 403, 0,
	353, 0, -2, -2, 0, 0, 0, 552, 0, 0,
	552, 0, 0, 0, 0, 0, 144, 148, 22, 550,
	17, 0, 0, 379, 226, 0, 231, 233, 0, 268,
	269, 270, 271, 272, 0, 0, 0, 0, 0, 0,
	294, 295, 296, 297, 356, 357, 358, 359, 360, 361,
	362, 235, 236, 353, 0, 402, 0, 0, 0, 0,
	0, 0, 0, 344, 0, 318, 318, 318, 318, 318,
	318, 318, 318, 0, 0, 0, 0, 371, 372, 375,
	378, 21, 163, 0, 168, 167, 159, 0, 0, 215,
	0, 0, 0, 0, 0, 204, 0, 0, 207, 0,
	0, 0, 0, 198, 0, 21, 0, 218, 200, 0,
	202, 203, 0, 224, 0, 0, 32, 33, 0, 0,
	0, 0, 0, 430, 39, 553, 554, 434, 435, 0,
	0, 139, 0, 141, 409, 0, 552, 383, 0, 0,
	0, 0, 0, 0, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	259, 232, 0, 246, 0, 0, 0, 288, 289, 290,
	291, 292, 0, 170, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 166, 0, 345, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 170, 0, 0,
	0, 374, 376, 377, 382, 24, 166, 0, 363, 0,
	0, 0, 169, 395, 0, 0, -2, 0, 214, 224,
	186, 193, 0, 196, 205, 206, 208, 0, 210, 0,
	212, 213, 190, 191, 265, 21, 192, 0, 0, 0,
	201, 217, 438, 439, 370, 0, 224, 35, 404, 405,
	354, 0, -2, 37, 0, 411, 0, 0, 552, 551,
	422, 414, 415, 416, 417, 418, 419, 420, 421, 140,
	142, 143, 0, 227, 228, 230, 247, 0, 249, 251,
	380, 381, 237, 238, 262, 263, 264, 0, 0, 0,
	0, 260, 242, 0, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 287, 329, 330, 0,
	285, 286, 293, 0, 0, 171, 172, 174, 178, 0,
	354, 0, 401, 0, 0, 0, 0, 0, 0, 351,
	348, 0, 0, 319, 0, 0, 0, 0, 373, 18,
	0, 406, 407, 364, 365, 183, 25, 0, 395, 385,
	397, 399, 0, 21, 0, 391, 370, 0, 0, 209,
	211, -2, 0, 0, 0, 378, 225, 31, 0, 0,
	42, 0, 0, 431, 40, 136, 0, 551, 423, 424,
	425, 426, 384, 248, 250, 252, 239, 260, 243, 0,
	240, 0, 0, 234, 298, 0, 0, 175, 179, 0,
	181, 182, 0, 170, 267, 301, 302, 0, 0, 0,
	0, 370, 0, 349, 0, 0, 309, 320, 321, 322,
	323, 19, 224, 0, 0, 26, 0, 400, -2, 0,
	0, 0, 378, 194, 195, 0, 0, 0, 30, 355,
	127, 0, 95, 91, 47, 48, 84, 50, 84, 84,
	84, 84, 105, 105, 105, 105, 76, 77, 78, 79,
	80, 0, 63, 84, 84, 84, 67, 51, 52, 53,
	54, 55, 56, 57, 86, 86, 86, 88, 88, 552,
	137, 138, 241, 0, 261, 244, 299, 173, 180, 176,
	0, 0, 0, 84, 84, 334, 84, 88, 337, 84,
	339, 84, 342, 0, 0, 0, 346, 308, 352, 0,
	366, 184, 0, 398, 0, -2, 0, 393, 392, 29,
	0, 222, 0, 0, 41, 128, 130, 133, 134, 135,
	43, 44, 0, 0, 0, 0, 122, 123, 98, 96,
	0, 93, 92, 49, 0, 105, 105, 70, 71, 108,
	0, 108, 108, 108, 0, 64, 65, 66, 58, 0,
	59, 60, 61, 0, 62, 38, 245, 0, 300, 303,
	331, 105, 335, 336, 338, 340, 341, 343, 305, 304,
	0, 0, 0, 350, 368, 0, 0, 388, 21, 0,
	219, 0, 220, 221, 0, 131, 0, 0, 118, 0,
	120, 121, 103, 0, 97, 46, 94, 0, 108, 108,
	72, 0, 0, 73, 74, 75, 0, 82, 0, 0,
	177, 332, 333, 324, 307, 347, 20, 0, 0, 396,
	-2, 394, 223, 129, 132, 0, 124, 84, 119, 110,
	104, 99, 100, 101, 102, 85, 68, 69, 109, 106,
	107, 81, 0, 0, 89, 0, 0, 0, 0, 369,
	367, 117, 0, 126, 115, 0, 112, 114, 83, 0,
	0, 306, 0, 0, 0, 125, 45, 0, 111, 113,
	87, 90, 325, 0, 328, 116, 326, 0, 0, 327,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 195,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:254
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:259
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:260
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:264
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:282
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:290
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:294
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:301
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:307
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:311
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:317
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:321
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:328
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:339
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:351
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:355
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:361
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:367
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:371
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:377
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:381
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:385
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:391
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:397
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName, TableSpec: yyDollar[5].TableSpec}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:401
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:406
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:410
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:416
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:423
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:428
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:432
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:438
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:448
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:458
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:463
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:611
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:616
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:621
		{
			yyVAL.optVal = nil
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:625
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:630
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:634
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:642
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:646
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:652
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:660
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:669
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:673
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:679
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:683
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:687
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:692
		{
			yyVAL.optVal = nil
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:696
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:700
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:704
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:708
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:713
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:717
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:722
		{
			yyVAL.str = ""
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:726
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:730
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:735
		{
			yyVAL.str = ""
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:744
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:752
		{
			yyVAL.colKeyOpt = colKey
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:760
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:765
		{
			yyVAL.optVal = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:769
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:775
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:781
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:785
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:789
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:793
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:799
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:803
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:809
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:813
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:819
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:824
		{
			yyVAL.str = ""
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:832
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:840
		{
			yyVAL.str = yyDollar[1].str
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:848
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:854
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:858
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:862
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:868
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:872
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 138:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:877
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:882
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:888
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:894
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:902
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:907
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:917
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:923
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:936
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:942
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:948
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:954
		{
			yyVAL.statement = &OtherRead{}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:958
		{
			yyVAL.statement = &OtherRead{}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:962
		{
			yyVAL.statement = &OtherRead{}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:966
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:970
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:974
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:979
		{
			setAllowComments(yylex, true)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:983
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:989
		{
			yyVAL.bytes2 = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:993
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.str = UnionStr
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = UnionAllStr
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.str = UnionDistinctStr
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.str = ""
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.str = SQLCacheStr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.str = DistinctStr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.str = StraightJoinHint
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.selectExprs = nil
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.empty = struct{}{}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.empty = struct{}{}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.str = JoinStr
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.str = JoinStr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = JoinStr
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.str = StraightJoinStr
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.str = LeftJoinStr
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.str = LeftJoinStr
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.str = RightJoinStr
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.str = RightJoinStr
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = NaturalJoinStr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.indexHints = nil
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.expr = nil
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.str = ""
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.str = IsNullStr
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.str = IsNotNullStr
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.str = IsTrueStr
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.str = IsNotTrueStr
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.str = IsFalseStr
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.str = IsNotFalseStr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.str = EqualStr
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.str = LessThanStr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.str = GreaterThanStr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.str = LessEqualStr
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.str = GreaterEqualStr
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.str = NotEqualStr
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.expr = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1571
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1579
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1601
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 300:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 306:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1747
		{
			yyVAL.str = BooleanModeStr
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.str = QueryExpansionStr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.expr = nil
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.str = string("")
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.expr = nil
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.expr = &NullVal{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.exprs = nil
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.expr = nil
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.orderBy = nil
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = AscScr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.str = AscScr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.str = DescScr
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.limit = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.str = ""
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.str = ForUpdateStr
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.str = ShareModeStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2038
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2051
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.updateExprs = nil
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.byt = 0
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.byt = 1
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.empty = struct{}{}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.empty = struct{}{}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.str = IgnoreStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.empty = struct{}{}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.empty = struct{}{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.empty = struct{}{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.empty = struct{}{}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.empty = struct{}{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.empty = struct{}{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			decNesting(yylex)
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2375
		{
			forceEOF(yylex)
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2380
		{
			forceEOF(yylex)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			forceEOF(yylex)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2388
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
