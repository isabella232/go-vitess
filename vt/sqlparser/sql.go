//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	columnDefinitions []*ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const TABLE = 57437
const INDEX = 57438
const VIEW = 57439
const TO = 57440
const IGNORE = 57441
const IF = 57442
const UNIQUE = 57443
const USING = 57444
const PRIMARY = 57445
const SHOW = 57446
const DESCRIBE = 57447
const EXPLAIN = 57448
const DATE = 57449
const ESCAPE = 57450
const REPAIR = 57451
const OPTIMIZE = 57452
const TRUNCATE = 57453
const BIT = 57454
const TINYINT = 57455
const SMALLINT = 57456
const MEDIUMINT = 57457
const INT = 57458
const INTEGER = 57459
const BIGINT = 57460
const INTNUM = 57461
const REAL = 57462
const DOUBLE = 57463
const FLOAT_TYPE = 57464
const DECIMAL = 57465
const NUMERIC = 57466
const TIME = 57467
const TIMESTAMP = 57468
const DATETIME = 57469
const YEAR = 57470
const CHAR = 57471
const VARCHAR = 57472
const BOOL = 57473
const CHARACTER = 57474
const VARBINARY = 57475
const NCHAR = 57476
const TEXT = 57477
const TINYTEXT = 57478
const MEDIUMTEXT = 57479
const LONGTEXT = 57480
const BLOB = 57481
const TINYBLOB = 57482
const MEDIUMBLOB = 57483
const LONGBLOB = 57484
const JSON = 57485
const ENUM = 57486
const NULLX = 57487
const AUTO_INCREMENT = 57488
const APPROXNUM = 57489
const SIGNED = 57490
const UNSIGNED = 57491
const ZEROFILL = 57492
const DATABASES = 57493
const TABLES = 57494
const VITESS_KEYSPACES = 57495
const VITESS_SHARDS = 57496
const VSCHEMA_TABLES = 57497
const CURRENT_TIMESTAMP = 57498
const DATABASE = 57499
const CURRENT_DATE = 57500
const CURRENT_TIME = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const UTC_DATE = 57504
const UTC_TIME = 57505
const UTC_TIMESTAMP = 57506
const REPLACE = 57507
const CONVERT = 57508
const CAST = 57509
const GROUP_CONCAT = 57510
const SEPARATOR = 57511
const MATCH = 57512
const AGAINST = 57513
const BOOLEAN = 57514
const LANGUAGE = 57515
const WITH = 57516
const QUERY = 57517
const EXPANSION = 57518
const UNUSED = 57519

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 222,
	104, 433,
	-2, 429,
	-1, 223,
	104, 434,
	-2, 430,
	-1, 446,
	5, 21,
	-2, 384,
	-1, 482,
	104, 436,
	-2, 432,
	-1, 591,
	5, 22,
	-2, 263,
	-1, 658,
	5, 22,
	-2, 385,
	-1, 745,
	5, 21,
	-2, 387,
	-1, 857,
	5, 22,
	-2, 388,
}

const yyPrivate = 57344

const yyLast = 5054

var yyAct = [...]int{

	223, 863, 756, 548, 405, 837, 755, 346, 580, 217,
	246, 786, 579, 273, 777, 600, 344, 474, 750, 722,
	251, 790, 42, 543, 59, 628, 546, 191, 560, 87,
	183, 620, 275, 536, 184, 513, 481, 57, 576, 324,
	771, 240, 249, 304, 298, 328, 313, 207, 200, 495,
	183, 183, 41, 46, 916, 183, 218, 911, 915, 901,
	914, 348, 910, 493, 900, 220, 185, 186, 187, 188,
	189, 735, 219, 48, 49, 50, 51, 810, 183, 228,
	183, 833, 545, 770, 183, 867, 206, 778, 498, 205,
	86, 805, 803, 325, 3, 884, 372, 371, 381, 382,
	374, 375, 376, 377, 378, 379, 380, 373, 849, 488,
	383, 336, 467, 469, 233, 765, 225, 417, 893, 237,
	77, 78, 78, 352, 637, 349, 594, 609, 593, 253,
	190, 229, 680, 611, 80, 81, 82, 592, 226, 360,
	359, 601, 817, 492, 494, 491, 83, 795, 238, 79,
	395, 396, 335, 661, 692, 632, 361, 598, 404, 697,
	698, 699, 700, 701, 702, 703, 340, 704, 705, 706,
	707, 708, 693, 694, 695, 696, 678, 679, 332, 210,
	681, 468, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 638, 876, 838, 373, 243, 299, 383, 383,
	885, 358, 432, 433, 778, 183, 764, 899, 763, 894,
	361, 892, 183, 183, 339, 183, 359, 300, 496, 610,
	337, 608, 232, 520, 561, 183, 360, 359, 59, 497,
	183, 59, 361, 183, 723, 342, 183, 518, 519, 517,
	639, 347, 877, 361, 347, 360, 359, 351, 737, 364,
	363, 302, 831, 767, 360, 359, 725, 561, 768, 644,
	904, 739, 361, 39, 306, 397, 398, 399, 400, 401,
	402, 361, 727, 516, 731, 912, 726, 897, 724, 896,
	406, 846, 845, 729, 362, 360, 359, 415, 834, 537,
	301, 538, 728, 613, 614, 615, 895, 730, 732, 360,
	359, 852, 361, 844, 59, 235, 506, 508, 509, 183,
	875, 507, 183, 183, 183, 183, 361, 438, 889, 888,
	449, 882, 881, 183, 220, 879, 878, 183, 434, 865,
	183, 219, 828, 183, 601, 183, 183, 868, 869, 870,
	539, 210, 59, 479, 343, 871, 819, 239, 480, 234,
	183, 436, 220, 183, 347, 347, 183, 59, 484, 219,
	451, 908, 453, 503, 504, 907, 510, 511, 461, 471,
	347, 626, 239, 501, 476, 470, 512, 239, 393, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 473, 478, 671, 670, 450, 514,
	452, 446, 482, 59, 419, 420, 421, 422, 423, 424,
	425, 406, 550, 872, 555, 556, 542, 59, 347, 653,
	465, 374, 375, 376, 377, 378, 379, 380, 373, 475,
	562, 383, 660, 239, 299, 551, 239, 310, 540, 541,
	43, 210, 210, 210, 210, 311, 239, 577, 59, 338,
	435, 565, 551, 475, 578, 338, 210, 558, 220, 311,
	626, 585, 880, 656, 210, 219, 482, 586, 822, 311,
	311, 626, 430, 463, 464, 568, 569, 626, 581, 596,
	376, 377, 378, 379, 380, 373, 772, 825, 383, 59,
	59, 553, 554, 338, 597, 557, 515, 595, 39, 18,
	197, 465, 603, 347, 791, 787, 604, 18, 782, 564,
	602, 566, 567, 371, 381, 382, 374, 375, 376, 377,
	378, 379, 380, 373, 575, 605, 383, 587, 442, 617,
	618, 619, 744, 265, 264, 266, 267, 268, 269, 577,
	355, 583, 270, 39, 39, 18, 590, 458, 16, 59,
	514, 39, 459, 616, 552, 634, 76, 315, 318, 319,
	320, 316, 630, 317, 321, 645, 589, 563, 444, 455,
	445, 183, 454, 372, 371, 381, 382, 374, 375, 376,
	377, 378, 379, 380, 373, 456, 406, 383, 643, 39,
	457, 663, 664, 195, 315, 318, 319, 320, 316, 59,
	317, 321, 913, 183, 588, 204, 669, 183, 909, 662,
	502, 621, 347, 460, 591, 319, 320, 655, 201, 202,
	612, 305, 574, 668, 573, 241, 839, 625, 830, 906,
	59, 905, 714, 715, 303, 827, 826, 242, 742, 654,
	550, 641, 711, 630, 486, 354, 347, 515, 738, 712,
	323, 198, 199, 717, 183, 718, 305, 721, 192, 734,
	855, 59, 59, 193, 736, 743, 59, 59, 59, 720,
	740, 59, 733, 43, 747, 748, 854, 813, 757, 751,
	751, 751, 475, 572, 347, 752, 753, 760, 623, 581,
	749, 571, 624, 741, 482, 274, 814, 357, 779, 780,
	781, 45, 635, 636, 47, 334, 640, 40, 1, 862,
	59, 646, 762, 647, 648, 649, 650, 788, 789, 773,
	774, 775, 776, 347, 794, 181, 793, 754, 599, 483,
	792, 657, 658, 659, 783, 784, 785, 761, 843, 891,
	866, 766, 832, 811, 769, 213, 213, 221, 903, 801,
	213, 829, 674, 745, 675, 673, 59, 815, 823, 677,
	676, 672, 84, 757, 798, 799, 322, 800, 327, 347,
	802, 627, 804, 213, 716, 213, 487, 581, 53, 213,
	607, 606, 490, 210, 224, 840, 841, 842, 835, 836,
	391, 570, 584, 431, 297, 853, 59, 812, 642, 414,
	559, 252, 505, 669, 263, 260, 262, 261, 437, 347,
	443, 365, 250, 244, 848, 466, 209, 307, 59, 850,
	59, 314, 312, 59, 856, 59, 59, 861, 220, 860,
	757, 858, 757, 859, 215, 219, 347, 208, 347, 864,
	816, 873, 874, 372, 371, 381, 382, 374, 375, 376,
	377, 378, 379, 380, 373, 652, 809, 383, 886, 406,
	887, 59, 883, 823, 441, 19, 44, 203, 757, 15,
	796, 797, 14, 13, 347, 12, 11, 10, 9, 276,
	36, 8, 806, 807, 7, 6, 5, 4, 194, 17,
	59, 902, 2, 0, 0, 0, 212, 0, 0, 818,
	213, 820, 821, 864, 67, 890, 0, 213, 330, 0,
	213, 0, 0, 62, 0, 0, 36, 0, 0, 75,
	213, 0, 71, 66, 196, 213, 0, 0, 213, 211,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 227, 0, 55, 0, 0, 0, 0, 851, 0,
	0, 713, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 231, 0, 0, 0,
	236, 372, 371, 381, 382, 374, 375, 376, 377, 378,
	379, 380, 373, 0, 0, 383, 0, 0, 0, 52,
	0, 54, 0, 0, 213, 56, 221, 213, 213, 213,
	213, 61, 0, 70, 68, 72, 0, 0, 462, 0,
	0, 64, 213, 0, 0, 330, 0, 0, 472, 0,
	213, 213, 898, 622, 221, 0, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 0, 0, 213, 0,
	0, 213, 0, 372, 371, 381, 382, 374, 375, 376,
	377, 378, 379, 380, 373, 0, 0, 383, 0, 0,
	0, 0, 0, 0, 0, 60, 36, 65, 74, 69,
	63, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 18, 37, 20, 21, 549,
	472, 309, 0, 0, 549, 549, 0, 345, 549, 0,
	345, 333, 0, 30, 0, 0, 0, 0, 22, 0,
	0, 341, 549, 549, 549, 549, 350, 392, 394, 353,
	0, 0, 356, 0, 0, 0, 29, 549, 0, 39,
	221, 0, 381, 382, 374, 375, 376, 377, 378, 379,
	380, 373, 0, 403, 383, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 416, 418, 418, 418, 418, 418,
	418, 418, 418, 426, 427, 428, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 447, 0, 0,
	0, 211, 211, 211, 211, 0, 23, 24, 26, 25,
	27, 0, 0, 0, 0, 448, 326, 0, 0, 67,
	28, 31, 32, 629, 211, 33, 34, 35, 62, 0,
	0, 345, 0, 0, 75, 0, 0, 71, 66, 0,
	0, 0, 477, 0, 0, 0, 345, 0, 0, 0,
	549, 0, 0, 0, 0, 58, 489, 631, 0, 499,
	0, 0, 500, 0, 549, 0, 0, 0, 360, 359,
	0, 67, 0, 0, 0, 0, 213, 0, 0, 0,
	62, 38, 0, 0, 36, 361, 75, 0, 0, 71,
	66, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 213, 0,
	0, 0, 213, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 0, 549, 0, 0, 582, 64, 36, 472, 549,
	0, 372, 371, 381, 382, 374, 375, 376, 377, 378,
	379, 380, 373, 0, 0, 383, 0, 0, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 345,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 367,
	60, 370, 65, 74, 69, 63, 73, 384, 385, 386,
	387, 388, 389, 390, 0, 368, 369, 366, 372, 371,
	381, 382, 374, 375, 376, 377, 378, 379, 380, 373,
	0, 0, 383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	633, 0, 60, 0, 65, 74, 69, 63, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 0, 665, 666, 667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 709,
	0, 0, 0, 710, 0, 0, 0, 0, 0, 0,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 582, 0, 0, 746,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 0, 0, 0, 58, 345,
	758, 759, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 824, 0, 0, 0, 808, 0, 0, 133, 137,
	152, 127, 0, 0, 582, 0, 36, 0, 0, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 0, 0, 0, 58, 0,
	758, 759, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 847, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 39, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 719, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 485, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	169, 156, 130, 171, 108, 122, 179, 123, 124, 150,
	94, 138, 67, 120, 0, 111, 89, 117, 90, 109,
	132, 62, 135, 107, 158, 141, 177, 75, 145, 0,
	71, 66, 0, 0, 134, 163, 136, 155, 129, 151,
	101, 144, 172, 121, 148, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 147, 168,
	119, 149, 88, 146, 0, 92, 95, 178, 166, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 133, 137,
	152, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 143, 0, 0, 0, 97, 93, 131, 0,
	0, 0, 100, 0, 113, 153, 0, 164, 128, 180,
	167, 126, 125, 170, 173, 0, 162, 110, 118, 61,
	116, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 106, 165, 159, 160, 161, 104, 105,
	102, 103, 139, 140, 174, 175, 176, 154, 99, 0,
	0, 157, 142, 60, 0, 65, 74, 69, 63, 73,
	67, 0, 0, 544, 0, 248, 0, 0, 0, 62,
	0, 247, 0, 0, 284, 75, 0, 0, 71, 66,
	0, 0, 0, 0, 277, 278, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 222, 265, 264, 266,
	267, 268, 269, 0, 0, 0, 270, 271, 272, 0,
	0, 245, 258, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 547, 0, 0, 0,
	295, 0, 257, 0, 0, 254, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	293, 0, 0, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 294, 291, 292,
	289, 290, 288, 287, 286, 296, 279, 280, 282, 0,
	281, 60, 0, 65, 74, 69, 63, 73, 67, 0,
	0, 0, 0, 248, 0, 0, 0, 62, 0, 247,
	0, 0, 284, 75, 0, 0, 71, 66, 0, 0,
	0, 0, 277, 278, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 222, 265, 264, 266, 267, 268,
	269, 0, 0, 0, 270, 271, 272, 0, 0, 245,
	258, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 547, 0, 0, 0, 295, 0,
	257, 0, 0, 254, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 293, 0,
	0, 0, 0, 0, 0, 61, 0, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 294, 291, 292, 289, 290,
	288, 287, 286, 296, 279, 280, 282, 0, 281, 60,
	0, 65, 74, 69, 63, 73, 67, 0, 0, 0,
	0, 248, 0, 0, 0, 62, 0, 247, 0, 0,
	284, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	277, 278, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 239, 222, 265, 264, 266, 267, 268, 269, 0,
	0, 0, 270, 271, 272, 0, 0, 245, 258, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 0, 0, 0, 0, 295, 0, 257, 0,
	0, 254, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 293, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	308, 62, 0, 0, 0, 0, 0, 75, 0, 0,
	71, 66, 285, 294, 291, 292, 289, 290, 288, 287,
	286, 296, 279, 280, 282, 18, 281, 60, 182, 65,
	74, 69, 63, 73, 0, 0, 67, 0, 0, 0,
	0, 248, 0, 0, 0, 62, 0, 247, 0, 0,
	284, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	277, 278, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 222, 265, 264, 266, 267, 268, 269, 0,
	0, 0, 270, 271, 272, 0, 0, 245, 258, 180,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	255, 256, 0, 0, 0, 0, 295, 0, 257, 0,
	0, 254, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 293, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 65, 74, 69, 63, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 294, 291, 292, 289, 290, 288, 287,
	286, 296, 279, 280, 282, 0, 281, 60, 0, 65,
	74, 69, 63, 73, 67, 0, 0, 0, 0, 248,
	0, 0, 0, 62, 0, 247, 0, 0, 284, 75,
	0, 0, 71, 66, 0, 0, 0, 0, 277, 278,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	222, 265, 264, 266, 267, 268, 269, 0, 0, 0,
	270, 271, 272, 0, 0, 245, 258, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	0, 0, 0, 0, 295, 0, 257, 0, 0, 254,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 293, 0, 0, 0, 0, 0,
	0, 61, 0, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 294, 291, 292, 289, 290, 288, 287, 286, 296,
	279, 280, 282, 67, 281, 60, 0, 65, 74, 69,
	63, 73, 62, 0, 0, 0, 0, 284, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 222,
	265, 264, 266, 267, 268, 269, 0, 0, 0, 270,
	271, 272, 0, 0, 0, 258, 0, 283, 0, 0,
	0, 0, 0, 0, 18, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 255, 256, 0,
	0, 0, 0, 295, 62, 257, 0, 0, 254, 259,
	75, 0, 0, 71, 66, 18, 0, 0, 0, 0,
	180, 0, 0, 293, 0, 0, 67, 0, 39, 0,
	61, 58, 70, 68, 72, 62, 0, 0, 0, 0,
	64, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	294, 291, 292, 289, 290, 288, 287, 286, 296, 279,
	280, 282, 180, 281, 60, 0, 65, 74, 69, 63,
	73, 0, 61, 0, 70, 68, 72, 0, 0, 67,
	0, 0, 64, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 180, 75, 0, 0, 71, 66, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 67, 0,
	0, 0, 329, 64, 0, 58, 0, 62, 439, 0,
	0, 440, 0, 75, 0, 0, 71, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 65, 74,
	69, 63, 73, 0, 182, 0, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 67, 0, 0, 0, 0, 64, 0, 0, 0,
	62, 0, 0, 0, 0, 180, 75, 0, 0, 71,
	66, 0, 0, 67, 0, 61, 0, 70, 68, 72,
	0, 0, 62, 0, 39, 64, 0, 182, 75, 67,
	0, 71, 66, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 75, 0, 0, 71, 66, 58,
	60, 631, 65, 74, 69, 63, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 65, 74, 69, 63, 73, 0, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 214,
	180, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	61, 0, 70, 68, 72, 62, 180, 0, 0, 0,
	64, 75, 0, 0, 71, 66, 61, 0, 70, 68,
	72, 67, 0, 0, 0, 0, 64, 0, 0, 0,
	62, 0, 182, 0, 0, 0, 75, 0, 0, 71,
	66, 0, 60, 67, 65, 74, 69, 63, 73, 0,
	0, 0, 62, 0, 0, 0, 0, 58, 75, 0,
	0, 71, 66, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 61, 0,
	70, 68, 72, 0, 0, 62, 0, 0, 64, 0,
	180, 75, 0, 0, 71, 66, 0, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 182, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 65, 74, 69, 63, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 65,
	74, 69, 63, 73,
}
var yyPact = [...]int{

	1089, -1000, -143, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 659, 696, -1000, -1000,
	-1000, -1000, -1000, 887, 6, 37, 22, 34, 3245, 4859,
	-1000, -1000, -1000, -1000, -1000, -1000, 493, -1000, -1000, -1000,
	-1000, -1000, 642, 648, 494, 632, 581, -1000, 5, 4604,
	4729, 4776, -1, 25, 4859, -103, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19, 4859, -1000, 4859,
	-3, 296, -3, 4859, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	325, 607, 4137, 4137, 659, -1000, 493, -1000, -1000, -1000,
	601, -1000, -1000, 203, 3915, 408, 518, -1000, -1000, -1000,
	629, 4409, 4521, 74, 4859, 101, -1000, 404, -1000, 138,
	-1000, 62, -1000, -1000, 4859, 167, 291, 2105, 11, 4859,
	2105, 8, 4859, 623, 491, 4859, -1000, -1000, -1000, -1000,
	-1000, 689, 115, 233, -1000, 4137, 1311, 448, 448, -1000,
	-1000, 45, -1000, -1000, 4306, 4306, 4306, 4306, 4306, 4306,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 448, 54, -1000, 3959, 448, 448, 448,
	448, 448, 448, 4137, 448, 448, 448, 448, 448, 448,
	448, 448, 448, 448, 448, 448, 448, 421, -1000, 179,
	642, 325, 581, 4492, 488, -1000, -1000, 539, 4859, -1000,
	4776, 4604, 4604, 4604, 4604, -1000, 533, 530, -1000, 546,
	508, 574, 4859, -1000, 394, 325, 4409, 65, -1000, 4642,
	-1000, -1000, 3055, 671, 4604, 4859, -1000, -1000, 4776, 4137,
	2865, 2485, 622, -10, -1000, -1000, -1000, -1000, -1000, 4859,
	35, -1000, 4859, -1000, -1000, 4859, 2105, -1000, 575, 4137,
	4137, 243, 4137, 4137, 127, 4306, 213, 153, 4306, 4306,
	4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306, 4306,
	4306, 4306, 4306, 236, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 287, -1000, 493, 479, 479, 98, 98, 98,
	98, 98, 1244, 3423, 2865, 384, 160, 3959, 3601, 3601,
	4137, 4137, 3601, 636, 152, 160, 4754, -1000, 325, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3601, 3601, 3601, 3601,
	4137, -1000, -1000, -1000, 607, -1000, 636, 673, -1000, 593,
	591, 3601, -1000, 490, 4776, 448, -1000, 4378, -1000, 442,
	518, 478, 555, -1000, -1000, -1000, -1000, 527, -1000, 507,
	-1000, -1000, -1000, -1000, -1000, 325, -1000, 24, 15, 13,
	-1000, -1000, -1000, -1000, 659, 4137, 418, -1000, -1000, 160,
	-1000, 53, -1000, -1000, -1000, 281, -1000, 461, 4754, 2105,
	-1000, 106, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 584, 127, 149, -1000, -1000, 230, -1000, -1000,
	160, 160, 756, -1000, -1000, -1000, -1000, 213, 4306, 4306,
	4306, 486, 756, 966, 1053, 425, 98, 387, 387, 97,
	97, 97, 97, 97, 330, 330, -1000, -1000, -1000, 325,
	-1000, -1000, -1000, 325, 3601, 420, -1000, -1000, 1192, 51,
	448, 4137, -1000, 320, 320, 73, 219, 320, 3601, 185,
	-1000, 4137, 325, -1000, 320, 325, 320, 320, -1000, -1000,
	4859, -1000, -1000, -1000, -1000, 409, -1000, 613, 398, 412,
	-1000, -1000, 3779, 325, 381, 49, 659, 4137, 4137, -1000,
	-1000, -1000, 448, 448, 448, 642, 160, -1000, 2675, 345,
	-1000, 30, 4859, -1000, -1000, -1000, 4859, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 486, 756, 894,
	-1000, 4306, 4306, -1000, -1000, 320, 3601, -1000, -1000, 4626,
	-1000, -1000, 2295, 3601, 160, -1000, -1000, 132, 236, 132,
	-117, 426, 173, -1000, 4137, 188, -1000, -1000, -1000, -1000,
	-1000, -1000, 671, 4604, 611, -1000, 448, -1000, -1000, 501,
	4754, 4754, 642, 160, 160, 4754, 4754, 4754, -1000, -1000,
	1725, 88, 190, -83, -1000, -1000, 436, -1000, 436, 436,
	436, 436, -62, -62, -62, -62, -1000, -1000, -1000, -1000,
	-1000, 458, -1000, 436, 436, 436, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 455, 455, 455, 454, 454, 2105,
	-1000, -1000, -1000, 4306, 756, 756, -1000, -1000, -1000, -1000,
	43, 325, 325, 436, 436, -1000, 436, 454, -1000, 436,
	-42, 436, -43, 325, 325, 448, -109, -1000, 160, 4137,
	665, 419, 688, -1000, 448, -1000, 493, 38, -1000, -1000,
	295, -1000, 295, 295, 417, 1535, -1000, -1000, -1000, -1000,
	-1000, -1000, 437, 609, 608, 279, 600, -1000, 189, -86,
	-1000, -1000, 232, -62, -62, -1000, -1000, 93, 597, 93,
	93, 93, 248, -1000, -1000, -1000, -1000, 226, -1000, -1000,
	-1000, 225, -1000, -1000, 756, 1915, -1000, -1000, -1000, 55,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4306, 325,
	246, 160, 663, 645, 4776, 412, 325, 4754, -1000, 4754,
	-1000, -1000, 1725, -1000, 1725, 4754, -1000, 276, -1000, -78,
	282, -1000, -1000, -1000, 361, 93, 93, -1000, 257, 140,
	-1000, -1000, -1000, 274, -1000, 411, 270, -1000, -1000, -1000,
	9, -1000, -1000, -1000, 4137, 4137, 404, -1000, -1000, -1000,
	1535, -1000, 267, -1000, 436, -1000, 91, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 241,
	223, -1000, 221, 325, 18, -133, 160, 401, -1000, 4754,
	-1000, 198, 604, -1000, 602, -1000, 313, 309, -1000, 572,
	-128, -136, -1000, -1000, 220, -1000, -1000, -1000, -1000, -1000,
	566, -1000, -1000, -131, -134, -139, -1000,
}
var yyPgo = [...]int{

	0, 892, 93, 548, 889, 888, 887, 886, 885, 884,
	881, 878, 877, 876, 875, 873, 872, 869, 53, 867,
	866, 865, 43, 864, 48, 862, 856, 31, 82, 23,
	26, 3, 855, 39, 86, 47, 837, 834, 822, 46,
	821, 896, 817, 816, 815, 18, 17, 813, 812, 811,
	810, 42, 10, 808, 807, 806, 805, 804, 802, 35,
	4, 12, 32, 8, 801, 129, 20, 800, 28, 799,
	798, 797, 795, 22, 794, 44, 793, 27, 41, 792,
	38, 9, 56, 791, 556, 790, 222, 784, 782, 781,
	780, 778, 776, 61, 0, 13, 7, 25, 771, 695,
	36, 45, 768, 766, 34, 16, 33, 19, 762, 761,
	760, 759, 755, 754, 752, 40, 751, 748, 14, 5,
	744, 742, 11, 21, 741, 740, 739, 738, 15, 737,
	729, 728, 727, 6, 2, 712, 1, 709, 708, 707,
	879, 148, 705, 704, 117,
}
var yyR1 = [...]int{

	0, 138, 139, 139, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 8, 142, 142, 37, 37, 9, 109, 109, 109,
	112, 112, 110, 110, 110, 110, 110, 110, 110, 111,
	111, 111, 111, 111, 113, 113, 113, 113, 113, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 122, 122, 123, 123, 123,
	120, 120, 121, 121, 124, 124, 124, 116, 116, 116,
	116, 116, 125, 125, 118, 118, 118, 119, 119, 126,
	126, 126, 126, 126, 117, 117, 127, 127, 128, 129,
	135, 135, 135, 137, 137, 136, 130, 131, 131, 131,
	132, 132, 132, 133, 133, 133, 134, 134, 134, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 12, 13,
	13, 13, 14, 108, 108, 108, 15, 16, 17, 17,
	17, 17, 17, 17, 143, 18, 19, 19, 20, 20,
	20, 24, 24, 24, 22, 22, 23, 23, 29, 29,
	28, 28, 30, 30, 30, 30, 98, 98, 98, 97,
	97, 32, 32, 33, 33, 34, 34, 35, 35, 35,
	43, 36, 36, 36, 36, 103, 103, 102, 102, 102,
	101, 101, 38, 38, 38, 38, 39, 39, 39, 39,
	40, 40, 42, 42, 41, 41, 44, 44, 44, 44,
	45, 45, 46, 46, 31, 31, 31, 31, 31, 31,
	31, 85, 85, 48, 48, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 58, 58, 58, 58, 58,
	58, 49, 49, 49, 49, 49, 49, 49, 27, 27,
	59, 59, 59, 65, 60, 60, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 56, 56, 56, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 55, 55,
	55, 55, 55, 55, 55, 55, 144, 144, 57, 57,
	57, 57, 25, 25, 25, 25, 25, 106, 106, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 69, 69, 26, 26, 67, 67, 68, 70,
	70, 66, 66, 66, 51, 51, 51, 51, 51, 51,
	51, 53, 53, 53, 71, 71, 72, 72, 73, 73,
	74, 74, 75, 76, 76, 76, 77, 77, 77, 77,
	78, 78, 78, 50, 50, 50, 50, 50, 50, 79,
	79, 79, 79, 80, 80, 61, 61, 63, 63, 62,
	64, 81, 81, 82, 83, 83, 86, 86, 87, 87,
	84, 84, 88, 88, 88, 88, 88, 88, 88, 89,
	89, 89, 90, 90, 91, 91, 91, 92, 92, 95,
	95, 96, 96, 99, 99, 100, 100, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 140, 141, 104, 105,
	105, 105,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 4, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 2,
	2, 2, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 1, 3, 7, 4,
	2, 3, 2, 1, 3, 2, 4, 1, 3, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 5,
	5, 8, 4, 6, 6, 7, 7, 4, 5, 4,
	5, 5, 3, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -138, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 107, 108, 110, 109, 111, 121, 47,
	24, 122, 123, 126, 127, 128, -140, 7, 182, 50,
	-139, 195, -73, 14, -20, 5, -18, -143, -18, -18,
	-18, -18, 112, -91, 114, 66, 118, -95, 53, -94,
	188, 124, 26, 193, 134, 190, 36, 17, 127, 192,
	126, 35, 128, 194, 191, 32, -84, 114, 116, 112,
	112, 113, 114, 112, -108, 53, -93, -94, 67, 21,
	23, 163, 70, 102, 15, 71, 149, 101, 62, 183,
	107, 45, 175, 176, 173, 174, 168, 28, 9, 24,
	122, 20, 95, 109, 74, 75, 125, 22, 123, 65,
	18, 48, 10, 12, 13, 117, 116, 86, 113, 43,
	7, 103, 25, 83, 39, 27, 41, 84, 16, 177,
	178, 30, 187, 97, 46, 33, 68, 63, 49, 66,
	14, 44, 85, 110, 182, 42, 6, 186, 29, 170,
	171, 172, 121, 40, 112, 169, 73, 115, 64, 5,
	118, 8, 47, 119, 179, 180, 181, 31, 72, 11,
	114, -99, 53, -94, -104, -104, -104, -104, -104, -104,
	-2, -77, 16, 15, -5, -3, -140, 6, 19, 20,
	-24, 37, 38, -19, -84, -33, -34, -35, -36, -43,
	-65, -140, -41, -99, 10, -37, -41, -81, -82, -66,
	-95, -99, 53, -94, -87, 117, 113, -41, 182, 112,
	-41, -41, -86, 117, 53, -86, -41, -104, -141, 52,
	-78, 18, 30, -31, -47, 68, -52, 28, 22, -51,
	-48, -66, -64, -65, 102, 91, 92, 99, 69, 103,
	-56, -54, -55, -57, 55, 54, 56, 57, 58, 59,
	63, 64, 65, -95, -99, -62, -140, 41, 42, 183,
	184, 187, 185, 71, 31, 173, 181, 180, 179, 177,
	178, 175, 176, 117, 174, 97, 182, -74, -75, -31,
	-73, -2, -18, 33, -22, 20, 61, -42, 25, -41,
	29, 51, -38, -39, -40, 39, 43, 45, 40, 41,
	42, 46, -103, 21, -33, -2, -140, -102, -101, 21,
	-99, 55, 104, -41, -142, 51, 10, 119, 51, 76,
	104, -41, 68, 53, -105, -140, -96, -95, -93, 114,
	-41, -105, 115, -41, 22, 49, -41, 8, 86, 67,
	66, 83, 51, 17, -31, -49, 86, 68, 84, 85,
	70, 88, 87, 98, 91, 92, 93, 94, 95, 96,
	97, 89, 90, 101, 76, 77, 78, 79, 80, 81,
	82, -85, -140, -65, -140, 105, 106, -52, -52, -52,
	-52, -52, -52, -140, 104, -60, -31, -140, -140, -140,
	-140, -140, -140, -140, -69, -31, -140, -144, -140, -144,
	-144, -144, -144, -144, -144, -144, -140, -140, -140, -140,
	51, -76, 23, 24, -77, -141, -24, -53, -95, 56,
	59, -23, 40, -50, 29, 31, -2, -140, -41, -81,
	-34, -35, -34, -35, 39, 39, 39, 44, 39, 44,
	39, -39, -99, -141, -141, -2, -44, 47, 116, 48,
	-101, -100, -99, -93, -46, 11, -33, -41, -82, -31,
	-96, -100, -93, -130, -105, 50, 22, -92, 119, -41,
	-88, 110, 108, 28, 109, 14, 183, 194, 53, -41,
	-41, -105, 35, -31, -31, -58, 63, 68, 64, 65,
	-31, -31, -52, -59, -62, -65, 60, 86, 84, 85,
	70, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -106, 53, 55, 53,
	-51, -51, -95, -29, 20, -28, -30, 93, -31, -99,
	-96, 51, -141, -28, -28, -31, -31, -28, -22, -67,
	-68, 72, -95, -141, -28, -29, -28, -28, -75, -78,
	-83, 18, 10, 31, 31, -28, -80, 49, -81, -61,
	-63, -62, -140, -2, -79, -95, -46, 49, 49, 39,
	39, -141, 113, 113, 113, -73, -31, -46, 104, -131,
	-128, 53, 49, -95, -105, -104, -89, -90, 115, 21,
	113, 27, 36, 63, 64, 65, -59, -52, -52, -52,
	-27, 125, 67, -141, -141, -28, 51, -98, -97, 21,
	-95, 55, 104, -140, -31, -141, -141, 51, 119, 21,
	-141, -28, -70, -68, 74, -31, -141, -141, -141, -141,
	-141, -41, -32, 10, 26, -80, 51, -141, -141, -141,
	51, 104, -73, -31, -31, -140, -140, -140, -77, -96,
	52, 51, -109, -112, -114, -113, -110, -111, 146, 147,
	102, 150, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 124, 142, 143, 144, 145, 129, 130, 131,
	132, 133, 134, 135, 137, 138, 139, 140, 141, -41,
	-41, -104, -27, 67, -52, -52, -141, -30, -97, 93,
	-100, -29, -107, 102, 146, 124, 144, 140, 160, 151,
	165, 142, 166, -106, -107, 188, -73, 75, -31, 73,
	-46, -33, 27, -63, 31, -2, -140, -95, -95, -77,
	-45, -95, -45, -45, -132, -133, -134, -96, 55, 56,
	-128, -129, -135, 120, 118, 27, -124, 63, 68, -120,
	166, -115, 50, -115, -115, -115, -115, -118, 149, -118,
	-118, -118, 50, -115, -115, -115, -122, 50, -122, -122,
	-123, 50, -123, -105, -52, 104, -141, -141, -115, -115,
	-115, -123, -115, 134, -115, 134, -141, -141, -140, -26,
	186, -31, -71, 12, 8, -61, -2, 104, -141, 51,
	-141, -141, 51, -134, 76, 50, 27, 27, 53, -116,
	28, 63, -121, 167, 56, -118, -118, -119, 101, 29,
	-119, -119, -119, -127, 55, 56, 56, 93, -118, 53,
	-52, -141, 55, -72, 13, 15, -81, -141, -95, -95,
	-133, -134, -137, -136, -95, 53, -125, 163, 55, 56,
	57, 63, 52, -119, -119, 53, 53, 102, 52, 51,
	51, 52, 51, -25, 86, 191, -31, -60, 52, 51,
	-115, -126, 120, 27, 118, 55, 56, 56, -141, 189,
	46, 192, -136, -117, 62, 27, 27, 52, 52, 36,
	190, 193, 55, 36, 191, 192, 193,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 368, 0, 154, 154,
	154, 154, 154, 424, 410, 0, 0, 0, 0, 0,
	548, 548, 548, 548, 548, 548, 0, 27, 28, 546,
	1, 3, 376, 0, 0, 158, 161, 156, 410, 0,
	0, 0, 408, 0, 543, 0, 425, 426, 429, 430,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 544, 545, 0, 0, 411, 0,
	406, 0, 406, 0, 548, 143, 144, 145, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 470, 471, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 481, 482, 483, 484, 485, 486, 487, 488,
	489, 490, 491, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	543, 147, 433, 434, 148, 149, 150, 151, 152, 153,
	21, 380, 0, 0, 368, 23, 0, 154, 159, 160,
	164, 162, 163, 155, 0, 0, 183, 185, 186, 187,
	195, 0, 197, 214, 0, 0, 34, 36, 401, 0,
	351, 0, -2, -2, 0, 0, 0, 549, 0, 0,
	549, 0, 0, 0, 0, 0, 142, 146, 22, 547,
	17, 0, 0, 377, 224, 0, 229, 231, 0, 266,
	267, 268, 269, 270, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 295, 354, 355, 356, 357, 358, 359,
	360, 233, 234, 351, 0, 400, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 316, 316, 316, 316, 316,
	316, 316, 316, 0, 0, 0, 0, 369, 370, 373,
	376, 21, 161, 0, 166, 165, 157, 0, 0, 213,
	0, 0, 0, 0, 0, 202, 0, 0, 205, 0,
	0, 0, 0, 196, 0, 21, 0, 216, 198, 0,
	200, 201, 0, 222, 0, 0, 32, 33, 0, 0,
	0, 549, 0, 427, 132, 550, 551, 431, 432, 0,
	0, 137, 0, 139, 407, 0, 549, 381, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	257, 230, 0, 244, 0, 0, 0, 286, 287, 288,
	289, 290, 0, 168, 0, 0, 264, 0, 0, 0,
	0, 0, 0, 164, 0, 343, 0, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 0, 168, 0, 0,
	0, 372, 374, 375, 380, 24, 164, 0, 361, 0,
	0, 0, 167, 393, 0, 0, -2, 0, 212, 222,
	184, 191, 0, 194, 203, 204, 206, 0, 208, 0,
	210, 211, 188, 189, 263, 21, 190, 0, 0, 0,
	199, 215, 435, 436, 368, 0, 222, 35, 402, 403,
	352, 0, -2, 129, 130, 546, 409, 0, 0, 549,
	548, 419, 412, 413, 414, 415, 416, 417, 418, 138,
	140, 141, 0, 225, 226, 228, 245, 0, 247, 249,
	378, 379, 235, 236, 260, 261, 262, 0, 0, 0,
	0, 258, 240, 0, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 285, 327, 328, 0,
	283, 284, 291, 0, 0, 169, 170, 172, 176, 0,
	352, 0, 399, 0, 0, 0, 0, 0, 0, 349,
	346, 0, 0, 317, 0, 0, 0, 0, 371, 18,
	0, 404, 405, 362, 363, 181, 25, 0, 393, 383,
	395, 397, 0, 21, 0, 389, 368, 0, 0, 207,
	209, -2, 0, 0, 0, 376, 223, 31, 0, 0,
	117, 0, 0, 428, 133, 134, 0, 548, 420, 421,
	422, 423, 382, 246, 248, 250, 237, 258, 241, 0,
	238, 0, 0, 232, 296, 0, 0, 173, 177, 0,
	179, 180, 0, 168, 265, 299, 300, 0, 0, 0,
	0, 368, 0, 347, 0, 0, 307, 318, 319, 320,
	321, 19, 222, 0, 0, 26, 0, 398, -2, 0,
	0, 0, 376, 192, 193, 0, 0, 0, 30, 353,
	120, 0, 84, 80, 38, 39, 73, 41, 73, 73,
	73, 73, 94, 94, 94, 94, 67, 68, 69, 70,
	71, 0, 54, 73, 73, 73, 58, 42, 43, 44,
	45, 46, 47, 48, 75, 75, 75, 77, 77, 549,
	135, 136, 239, 0, 259, 242, 297, 171, 178, 174,
	0, 0, 0, 73, 73, 332, 73, 77, 335, 73,
	337, 73, 340, 0, 0, 0, 344, 306, 350, 0,
	364, 182, 0, 396, 0, -2, 0, 391, 390, 29,
	0, 220, 0, 0, 116, 121, 123, 126, 127, 128,
	118, 119, 0, 0, 0, 0, 87, 85, 0, 82,
	81, 40, 0, 94, 94, 61, 62, 97, 0, 97,
	97, 97, 0, 55, 56, 57, 49, 0, 50, 51,
	52, 0, 53, 131, 243, 0, 298, 301, 329, 94,
	333, 334, 336, 338, 339, 341, 303, 302, 0, 0,
	0, 348, 366, 0, 0, 386, 21, 0, 217, 0,
	218, 219, 0, 124, 0, 0, 110, 0, 112, 92,
	0, 86, 37, 83, 0, 97, 97, 63, 0, 0,
	64, 65, 66, 0, 106, 0, 0, 175, 330, 331,
	322, 305, 345, 20, 0, 0, 394, -2, 392, 221,
	122, 125, 0, 113, 73, 111, 99, 93, 88, 89,
	90, 91, 74, 59, 60, 98, 95, 96, 72, 0,
	0, 78, 0, 0, 0, 0, 367, 365, 109, 0,
	115, 104, 0, 101, 103, 107, 0, 0, 304, 0,
	0, 0, 114, 108, 0, 100, 102, 76, 79, 323,
	0, 326, 105, 324, 0, 0, 325,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 195,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:253
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:258
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:259
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:263
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:281
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:289
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:293
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:300
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:306
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:310
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:316
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:320
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:327
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:338
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:350
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:354
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:360
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:366
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:370
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:375
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:380
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:384
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:390
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:396
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:406
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:417
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:479
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:558
		{
			yyVAL.optVal = nil
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:562
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:567
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:571
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:579
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:583
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:589
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:606
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:616
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:620
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:624
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:629
		{
			yyVAL.optVal = nil
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:633
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:641
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:645
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:650
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:654
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:659
		{
			yyVAL.str = ""
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:663
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:667
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:672
		{
			yyVAL.str = ""
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:676
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:681
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:685
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:689
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:693
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:697
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:702
		{
			yyVAL.optVal = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:706
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:712
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:717
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 108:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:723
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:734
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.indexInfo = &IndexInfo{Primary: true, Name: NewColIdent("PRIMARY"), Unique: true}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:744
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.indexInfo = &IndexInfo{Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:754
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:758
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:764
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:770
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:777
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:782
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:791
		{
			yyVAL.str = ""
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:795
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:799
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:807
		{
			yyVAL.str = yyDollar[1].str
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:811
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:815
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:821
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:835
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName, TableSpec: yyDollar[5].TableSpec}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:839
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 131:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:843
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:848
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:852
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:858
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:862
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:867
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:872
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:878
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:884
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:892
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:897
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:907
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:913
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:926
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:932
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:938
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.statement = &OtherRead{}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:948
		{
			yyVAL.statement = &OtherRead{}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.statement = &OtherRead{}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:960
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:969
		{
			setAllowComments(yylex, true)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:973
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:979
		{
			yyVAL.bytes2 = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:983
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:989
		{
			yyVAL.str = UnionStr
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:993
		{
			yyVAL.str = UnionAllStr
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:997
		{
			yyVAL.str = UnionDistinctStr
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.str = SQLCacheStr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1015
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.str = DistinctStr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.str = StraightJoinHint
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.selectExprs = nil
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.empty = struct{}{}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.empty = struct{}{}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.str = JoinStr
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.str = JoinStr
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.str = JoinStr
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.str = StraightJoinStr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = LeftJoinStr
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.str = LeftJoinStr
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.str = RightJoinStr
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.str = RightJoinStr
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.str = NaturalJoinStr
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1224
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.indexHints = nil
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.expr = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.str = IsNullStr
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = IsNotNullStr
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.str = IsTrueStr
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.str = IsNotTrueStr
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.str = IsFalseStr
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.str = IsNotFalseStr
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.str = EqualStr
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.str = LessThanStr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.str = GreaterThanStr
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.str = LessEqualStr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.str = GreaterEqualStr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.str = NotEqualStr
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.expr = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1569
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1591
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 301:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 302:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 304:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 305:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.str = BooleanModeStr
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.str = QueryExpansionStr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.expr = nil
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.str = string("")
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.expr = nil
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = &NullVal{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1908
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.exprs = nil
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = nil
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.orderBy = nil
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.str = AscScr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.str = AscScr
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.str = DescScr
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.limit = nil
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.str = ForUpdateStr
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.str = ShareModeStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2028
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2041
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.updateExprs = nil
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2101
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.byt = 0
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.byt = 1
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.empty = struct{}{}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.empty = struct{}{}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.str = IgnoreStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.empty = struct{}{}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.empty = struct{}{}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.empty = struct{}{}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.empty = struct{}{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.empty = struct{}{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.empty = struct{}{}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.empty = struct{}{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.empty = struct{}{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2349
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			decNesting(yylex)
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2363
		{
			forceEOF(yylex)
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2368
		{
			forceEOF(yylex)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2372
		{
			forceEOF(yylex)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
