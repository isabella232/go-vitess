// Copyright 2012, Google Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package proto

// DO NOT EDIT.
// FILE GENERATED BY BSONGEN.

import (
	"bytes"

	"github.com/youtube/vitess/go/bson"
	"github.com/youtube/vitess/go/bytes2"
	mproto "github.com/youtube/vitess/go/mysql/proto"
)

// MarshalBson bson-encodes ErrorOnly.
func (errorOnly *ErrorOnly) MarshalBson(buf *bytes2.ChunkedWriter, key string) {
	bson.EncodeOptionalPrefix(buf, bson.Object, key)
	lenWriter := bson.NewLenWriter(buf)

	// *mproto.RPCError
	if errorOnly.Err == nil {
		bson.EncodePrefix(buf, bson.Null, "Err")
	} else {
		(*errorOnly.Err).MarshalBson(buf, "Err")
	}

	lenWriter.Close()
}

// UnmarshalBson bson-decodes into ErrorOnly.
func (errorOnly *ErrorOnly) UnmarshalBson(buf *bytes.Buffer, kind byte) {
	switch kind {
	case bson.EOO, bson.Object:
		// valid
	case bson.Null:
		return
	default:
		panic(bson.NewBsonError("unexpected kind %v for ErrorOnly", kind))
	}
	bson.Next(buf, 4)

	for kind := bson.NextByte(buf); kind != bson.EOO; kind = bson.NextByte(buf) {
		switch bson.ReadCString(buf) {
		case "Err":
			// *mproto.RPCError
			if kind != bson.Null {
				errorOnly.Err = new(mproto.RPCError)
				(*errorOnly.Err).UnmarshalBson(buf, kind)
			}
		default:
			bson.Skip(buf, kind)
		}
	}
}
